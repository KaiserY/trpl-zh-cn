(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{174:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/second-edition/src/ch18-03-pattern-syntax.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch18-03-pattern-syntax.md"),n("OutboundLink")],1),t._v(" "),n("br"),t._v("\ncommit 3f91c488ad4261dee6a61db4f60c197074151aac")])]),t._v(" "),n("p",[t._v("通过本书我们已领略过许多不同类型模式的例子. 本节会统一列出所有在模式中有效的语法并且会阐述你为什么可能会希望使用其中的每一个。")]),t._v(" "),t._m(1),t._v(" "),n("p",[t._v("如第六章所示，可以直接匹配字面值模式。如下代码给出了一些例子：")]),t._v(" "),t._m(2),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._m(25),t._v(" "),t._m(26),t._v(" "),n("p",[t._v("也可以使用模式来解构结构体、枚举、元组和引用，以便使用这些值的不同部分。让我们来分别看一看。")]),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35),t._m(36),t._v(" "),t._m(37),t._v(" "),n("p",[t._v("也可以在部分结构体模式中使用字面值进行结构，而不是为所有的字段创建变量。这允许我们测试一些字段为特定值的同时创建其他字段的变量。")]),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),t._m(41),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44),t._v(" "),t._m(45),t._v(" "),t._m(46),t._v(" "),t._m(47),t._m(48),t._v(" "),t._m(49),t._v(" "),t._m(50),t._v(" "),t._m(51),t._v(" "),t._m(52),t._v(" "),t._m(53),t._v(" "),t._m(54),t._v(" "),n("p",[t._v("这在迭代器遍历引用，不过我们需要使用闭包中的值而不是其引用时非常有用")]),t._v(" "),t._m(55),t._v(" "),t._m(56),t._m(57),t._v(" "),t._m(58),t._v(" "),t._m(59),t._v(" "),t._m(60),t._m(61),t._v(" "),t._m(62),t._v(" "),n("p",[t._v("甚至可以用复杂的方式来合成、匹配和嵌套解构模式。如下是一个负责结构体的例子，其中结构体和元组嵌套在元组中，并将所有的原始类型解构出来：")]),t._v(" "),t._m(63),n("p",[t._v("这将复杂的类型分解成部分组件以便可以单独使用我们感兴趣的值。")]),t._v(" "),n("p",[t._v("通过模式解构是一个方便利用部分值片段的手段，比如结构体中每个单独字段的值。")]),t._v(" "),t._m(64),t._v(" "),t._m(65),t._v(" "),t._m(66),t._v(" "),t._m(67),t._v(" "),t._m(68),t._v(" "),t._m(69),t._m(70),t._v(" "),t._m(71),t._v(" "),n("p",[t._v("在一些情况下忽略函数参数会变得特别有用，比如实现 trait 时，当你需要特定类型签名但是函数实现并不需要某个参数时。此时编译器就不会警告说存在未使用的函数参数，就跟使用命名参数一样。")]),t._v(" "),t._m(72),t._v(" "),t._m(73),t._v(" "),t._m(74),t._m(75),t._v(" "),t._m(76),t._v(" "),t._m(77),t._v(" "),n("p",[t._v("也可以在一个模式中的多处使用下划线来忽略特定值，如示例 18-19 所示，这里忽略了一个五元元组中的第二和第四个值：")]),t._v(" "),n("p",[t._v("我们也可以在一个模式中多处使用下划线, 在例18-17中我们将忽略掉一个五元元组中的第二和第四个值:")]),t._v(" "),t._m(78),t._m(79),t._v(" "),t._m(80),t._v(" "),t._m(81),t._v(" "),n("p",[t._v("如果你创建了一个变量却不在任何地方使用它, Rust 通常会给你一个警告，因为这可能会是个 bug。但是有时创建一个还未使用的变量是有用的，比如你正在设计原型或刚刚开始一个项目。这时你希望告诉 Rust 不要警告未使用的变量，为此可以用下划线作为变量名的开头。示例 18-20 中创建了两个未使用变量，不过当运行代码时只会得到其中一个的警告：")]),t._v(" "),t._m(82),t._v(" "),t._m(83),t._m(84),t._v(" "),t._m(85),t._v(" "),t._m(86),t._v(" "),t._m(87),t._m(88),t._v(" "),t._m(89),t._v(" "),t._m(90),t._m(91),t._v(" "),t._m(92),t._v(" "),t._m(93),t._v(" "),t._m(94),t._v(" "),t._m(95),t._m(96),t._v(" "),t._m(97),t._v(" "),t._m(98),t._v(" "),t._m(99),t._v(" "),t._m(100),t._m(101),t._v(" "),t._m(102),t._v(" "),t._m(103),t._v(" "),t._m(104),t._v(" "),t._m(105),t._m(106),t._v(" "),n("p",[t._v("如果编译上面的例子，会得到下面的错误：")]),t._v(" "),t._m(107),t._m(108),t._v(" "),t._m(109),t._v(" "),t._m(110),t._v(" "),t._m(111),t._m(112),t._v(" "),t._m(113),t._v(" "),t._m(114),t._v(" "),t._m(115),t._v(" "),t._m(116),t._v(" "),t._m(117),t._m(118),t._v(" "),t._m(119),t._v(" "),t._m(120),t._v(" "),t._m(121),t._m(122),t._v(" "),t._m(123),t._v(" "),t._m(124),t._v(" "),t._m(125),t._v(" "),t._m(126),t._v(" "),t._m(127),t._m(128),t._v(" "),t._m(129),t._v(" "),t._m(130),t._v(" "),t._m(131),t._v(" "),t._m(132),t._v(" "),t._m(133),t._v(" "),t._m(134),t._v(" "),t._m(135),t._m(136),t._v(" "),t._m(137),t._v(" "),t._m(138),t._v(" "),t._m(139),t._v(" "),t._m(140),t._m(141),t._v(" "),t._m(142),t._v(" "),t._m(143),t._v(" "),t._m(144),n("p",[t._v("而不是：")]),t._v(" "),t._m(145),t._m(146),t._v(" "),t._m(147),t._v(" "),t._m(148),t._v(" "),t._m(149),t._m(150),t._v(" "),t._m(151),t._v(" "),t._m(152),t._v(" "),t._m(153),t._v(" "),t._m(154),t._v(" "),t._m(155),t._v(" "),t._m(156),t._v(" "),n("p",[t._v("现在，作为本书的倒数第二个章节，让我们看看一些 Rust 众多功能中较为高级的部分。")])])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"所有的模式语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#所有的模式语法","aria-hidden":"true"}},[this._v("#")]),this._v(" 所有的模式语法")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"匹配字面值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#匹配字面值","aria-hidden":"true"}},[this._v("#")]),this._v(" 匹配字面值")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("match")]),t._v(" x "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"one"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"two"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token number"}},[t._v("3")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"three"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    _ "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"anything"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这段代码会打印 "),s("code",[this._v("one")]),this._v(" 因为 "),s("code",[this._v("x")]),this._v(" 的值是 1。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"匹配命名变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#匹配命名变量","aria-hidden":"true"}},[this._v("#")]),this._v(" 匹配命名变量")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("命名变量是匹配任何值的不可反驳模式，这在之前已经使用过数次。然而当其用于 "),n("code",[t._v("match")]),t._v(" 表达式时情况会有些复杂。因为 "),n("code",[t._v("match")]),t._v(" 会开始一个新作用域，"),n("code",[t._v("match")]),t._v(" 表达式中作为模式的一部分声明的变量会覆盖 "),n("code",[t._v("match")]),t._v(" 结构之外的同名变量 ———— 与所有变量一样。在示例 18-11 中，声明了一个值为 "),n("code",[t._v("Some(5)")]),t._v(" 的变量 "),n("code",[t._v("x")]),t._v(" 和一个值为 "),n("code",[t._v("10")]),t._v(" 的变量 "),n("code",[t._v("y")]),t._v("。接着在值 "),n("code",[t._v("x")]),t._v(" 上创建了一个 "),n("code",[t._v("match")]),t._v(" 表达式。观察匹配分支中的模式和结尾的 "),n("code",[t._v("println!")]),t._v("，并尝试在运行代码之前计算出会打印什么，或者继续阅读：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("Filename: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("5")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" y "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("10")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("match")]),t._v(" x "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("50")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Got 50"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Matched, y = {:?}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        _ "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Default case, x = {:?}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"at the end: x = {:?}, y = {:?}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 18-11: 一个 "),s("code",[this._v("match")]),this._v(" 语句其中一个分支引入了覆盖变量 "),s("code",[this._v("y")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("让我们看看当 "),s("code",[this._v("match")]),this._v(" 语句运行的时候发生了什么。第一个匹配分支的模式并不匹配 "),s("code",[this._v("x")]),this._v(" 中定义的值，所以继续。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("第二个匹配分支中的模式引入了一个新变量 "),n("code",[t._v("y")]),t._v("，它会匹配任何 "),n("code",[t._v("Some")]),t._v(" 中的值。因为我们在 "),n("code",[t._v("match")]),t._v(" 表达式的新作用域中，这是一个新变量，而不是开头声明为值 10 的那个 "),n("code",[t._v("y")]),t._v("。这个新的 "),n("code",[t._v("y")]),t._v(" 绑定会匹配任何 "),n("code",[t._v("Some")]),t._v(" 中的值，在这里是 "),n("code",[t._v("x")]),t._v(" 中的值。因此这个 "),n("code",[t._v("y")]),t._v(" 绑定了 "),n("code",[t._v("x")]),t._v(" 中 "),n("code",[t._v("Some")]),t._v(" 内部的值。这个值是 5，所以这个分支的表达式将会执行并打印出 "),n("code",[t._v("Matched, y = 5")]),t._v("。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("如果 "),n("code",[t._v("x")]),t._v(" 的值是 "),n("code",[t._v("None")]),t._v(" 而不是 "),n("code",[t._v("Some(5)")]),t._v("，头两个分支的模式不会匹配，所以会匹配下划线。这个分支的模式中没有引入变量 "),n("code",[t._v("x")]),t._v("，所以此时表达式中的 "),n("code",[t._v("x")]),t._v(" 会是外部没有被覆盖的 "),n("code",[t._v("x")]),t._v("。在这个假想的例子中，"),n("code",[t._v("match")]),t._v(" 将会打印 "),n("code",[t._v("Default case, x = None")]),t._v("。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("一旦 "),n("code",[t._v("match")]),t._v(" 表达式执行完毕，其作用域也就结束了，同理内部 "),n("code",[t._v("y")]),t._v(" 的作用域也结束了。最后的 "),n("code",[t._v("println!")]),t._v(" 会打印 "),n("code",[t._v("at the end: x = Some(5), y = 10")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("为了创建能够比较外部 "),s("code",[this._v("x")]),this._v(" 和 "),s("code",[this._v("y")]),this._v(" 的值，而不引入覆盖变量的 "),s("code",[this._v("match")]),this._v(" 表达式，我们需要相应的使用带有条件的匹配守卫（match guard）。本部分的后面会讨论匹配守卫。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"多个模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多个模式","aria-hidden":"true"}},[this._v("#")]),this._v(" 多个模式")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("在 "),n("code",[t._v("match")]),t._v(" 表达式中，可以使用 "),n("code",[t._v("|")]),t._v(" 语法匹配多个模式，它代表 "),n("strong",[t._v("或")]),t._v("（"),n("em",[t._v("or")]),t._v("）的意思。例如，如下代码将 "),n("code",[t._v("x")]),t._v(" 的值与匹配分支向比较，第一个分支有 "),n("strong",[t._v("或")]),t._v(" 选项，意味着如果 "),n("code",[t._v("x")]),t._v(" 的值匹配此分支的任一个值，它就会运行：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("match")]),t._v(" x "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"one or two"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token number"}},[t._v("3")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"three"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    _ "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"anything"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上面的代码会打印 "),s("code",[this._v("one or two")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"通过-匹配值的范围"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通过-匹配值的范围","aria-hidden":"true"}},[this._v("#")]),this._v(" 通过 "),s("code",[this._v("...")]),this._v(" 匹配值的范围")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("...")]),this._v(" 语法允许你匹配一个闭区间范围内的值。在如下代码中，当模式匹配任何在此范围内的值时，该分支会执行：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("5")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("match")]),t._v(" x "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("...")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("5")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"one through five"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    _ "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"something else"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("如果 "),n("code",[t._v("x")]),t._v(" 是 1、2、3、4 或 5，第一个分支就会匹配。这相比使用 "),n("code",[t._v("|")]),t._v(" 运算符表达相同的意思更为方便；相比 "),n("code",[t._v("1 ... 5")]),t._v("，使用 "),n("code",[t._v("|")]),t._v(" 则不得不指定 "),n("code",[t._v("1 | 2 | 3 | 4 | 5")]),t._v("。相反指定范围就简短的多，特别是在希望匹配比如从 1 到 1000 的数字的时候！")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("范围只允许用于数字或 "),s("code",[this._v("char")]),this._v(" 值，因为编译器会在编译时检查范围不为空。"),s("code",[this._v("char")]),this._v(" 和 数字值是 Rust 唯一知道范围是否为空的类型。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如下是一个使用 "),s("code",[this._v("char")]),this._v(" 类型值范围的例子：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token char string"}},[t._v("'c'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("match")]),t._v(" x "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token char string"}},[t._v("'a'")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("...")]),t._v(" "),n("span",{attrs:{class:"token char string"}},[t._v("'j'")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"early ASCII letter"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token char string"}},[t._v("'k'")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("...")]),t._v(" "),n("span",{attrs:{class:"token char string"}},[t._v("'z'")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"late ASCII letter"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    _ "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"something else"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Rust 知道 "),s("code",[this._v("c")]),this._v(" 位于第一个模式的范围内，并会打印出 "),s("code",[this._v("early ASCII letter")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"解构并分解值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解构并分解值","aria-hidden":"true"}},[this._v("#")]),this._v(" 解构并分解值")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"解构结构体"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解构结构体","aria-hidden":"true"}},[this._v("#")]),this._v(" 解构结构体")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("示例 18-12 展示带有两个字段 "),n("code",[t._v("x")]),t._v(" 和 "),n("code",[t._v("y")]),t._v(" 的结构体 "),n("code",[t._v("Point")]),t._v("，可以通过带有模式的 "),n("code",[t._v("let")]),t._v(" 语句将其分解：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("7")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" a"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" b "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("assert_eq!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("assert_eq!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("7")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 18-12: 解构一个结构体的字段为单独的变量")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这段代码创建了变量 "),n("code",[t._v("a")]),t._v(" 和 "),n("code",[t._v("b")]),t._v(" 来匹配变量 "),n("code",[t._v("p")]),t._v(" 中的 "),n("code",[t._v("x")]),t._v(" 和 "),n("code",[t._v("y")]),t._v(" 字段。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这个例子展示了模式中的变量名不必与结构体中的字段名一致，不过通常希望变量名与字段名一致以便于理解变量来自于哪些字段。因为变量名匹配字段名是常见的，同时因为 "),n("code",[t._v("let Point { x: x, y: y } = p;")]),t._v(" 包含了很多重复，所以对于匹配结构体字段的模式存在简写：只需列出结构体字段的名称，则模式创建的变量会有相同的名称。示例 18-13 展示了与示例 18-12 有着相同行为的代码，不过 "),n("code",[t._v("let")]),t._v(" 模式创建的变量为 "),n("code",[t._v("x")]),t._v(" 和 "),n("code",[t._v("y")]),t._v(" 而不是 "),n("code",[t._v("a")]),t._v(" 和 "),n("code",[t._v("b")]),t._v("：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("7")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("assert_eq!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("assert_eq!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("7")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 18-13: 使用结构体字段简写来解构结构体字段")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这段代码创建了变量 "),n("code",[t._v("x")]),t._v(" 和 "),n("code",[t._v("y")]),t._v("，与变量 "),n("code",[t._v("p")]),t._v(" 中的 "),n("code",[t._v("x")]),t._v(" 和 "),n("code",[t._v("y")]),t._v(" 相匹配。其结果是变量 "),n("code",[t._v("x")]),t._v(" 和 "),n("code",[t._v("y")]),t._v(" 包含结构体 "),n("code",[t._v("p")]),t._v(" 中的值。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("示例 18-14 展示了一个 "),n("code",[t._v("match")]),t._v(" 语句将 "),n("code",[t._v("Point")]),t._v(" 值分成了三种情况：直接位于 "),n("code",[t._v("x")]),t._v(" 轴上（此时 "),n("code",[t._v("y = 0")]),t._v(" 为真）、位于 "),n("code",[t._v("y")]),t._v(" 轴上（"),n("code",[t._v("x = 0")]),t._v("）或其他的点：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("7")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("match")]),t._v(" p "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"On the x axis at {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"On the y axis at {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"On neither axis: ({}, {})"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 18-14: 解构和匹配模式中的字面值")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("第一个分支通过指定字段 "),n("code",[t._v("y")]),t._v(" 匹配字面值 "),n("code",[t._v("0")]),t._v(" 来匹配任何位于 "),n("code",[t._v("x")]),t._v(" 轴上的点。此模式仍然创建了变量 "),n("code",[t._v("x")]),t._v(" 以便在分支的代码中使用。类似的，第二个分支通过指定字段 "),n("code",[t._v("x")]),t._v(" 匹配字面值 "),n("code",[t._v("0")]),t._v(" 来匹配任何位于 "),n("code",[t._v("y")]),t._v(" 轴上的点，并为字段 "),n("code",[t._v("y")]),t._v(" 创建了变量 "),n("code",[t._v("y")]),t._v("。第三个分支没有指定任何字面值，所以其会匹配任何其他的 "),n("code",[t._v("Point")]),t._v(" 并为 "),n("code",[t._v("x")]),t._v(" 和 "),n("code",[t._v("y")]),t._v(" 两个字段创建变量。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在这个例子中，值 "),s("code",[this._v("p")]),this._v(" 因为其 "),s("code",[this._v("x")]),this._v(" 包含 0 而匹配第二个分支，因此会打印出 "),s("code",[this._v("On the y axis at 7")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"解构枚举"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解构枚举","aria-hidden":"true"}},[this._v("#")]),this._v(" 解构枚举")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("本书之前的部分曾经解构过枚举，比如第六章中示例 6-5 中解构了一个 "),s("code",[this._v("Option<i32>")]),this._v("。一个当时没有明确提到的细节是解构枚举的模式需要对应枚举所定义的储存数据的方式。让我们以示例 6-2 中的 "),s("code",[this._v("Message")]),this._v(" 枚举为例，编写一个 "),s("code",[this._v("match")]),this._v(" 使用模式解构每一个内部值，如示例 18-15 所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Message "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Quit"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Move "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32 "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("Write")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("ChangeColor")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" msg "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Message"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("ChangeColor")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("160")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("255")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("match")]),t._v(" msg "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        Message"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Quit "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"The Quit variant has no data to destructure."')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        Message"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Move "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                "),n("span",{attrs:{class:"token string"}},[t._v('"Move in the x direction {} and in the y direction {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                x"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                y\n            "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        Message"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("Write")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Text message: {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" text"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        Message"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("ChangeColor")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" g"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                "),n("span",{attrs:{class:"token string"}},[t._v('"Change the color to red {}, green {}, and blue {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                r"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                g"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                b\n            "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 18-15: 解构包含不同类型值成员的枚举")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这段代码会打印出 "),s("code",[this._v("Change the color to red 0, green 160, and blue 255")]),this._v("。尝试改变 "),s("code",[this._v("msg")]),this._v(" 的值来观察其他分支代码的运行。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("对于像 "),s("code",[this._v("Message::Quit")]),this._v(" 这样没有任何数据的枚举成员，不能进一步解构其值。只能匹配其字面值 "),s("code",[this._v("Message::Quit")]),this._v("，因此模式中没有任何变量。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("对于像 "),s("code",[this._v("Message::Move")]),this._v(" 这样的类结构体枚举成员，可以采用类似于匹配结构体的模式。在成员名称后，使用大括号并列出字段变量以便将其分解以供此分支的代码使用。这里使用了示例 18-13 所真实的简写。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("对于像 "),s("code",[this._v("Message::Write")]),this._v(" 这样的包含一个元素，以及像 "),s("code",[this._v("Message::ChangeColor")]),this._v(" 这样包含两个元素的类元组枚举成员，其模式则类似于用于解构元组的模式。模式中变量的数量必须与成员中元素的数量一致。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"解构引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解构引用","aria-hidden":"true"}},[this._v("#")]),this._v(" 解构引用")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当模式所匹配的值中包含引用时，需要解构引用之中的值，这可以通过在模式中指定 "),s("code",[this._v("&")]),this._v(" 做到。这让我们得到一个包含引用所指向数据的变量，而不是包含引用的变量。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("示例 18-16 中的例子遍历一个 vector 中的 "),s("code",[this._v("Point")]),this._v(" 实例的引用，并同时解构引用和其中的结构体以方便对 "),s("code",[this._v("x")]),this._v(" 和 "),s("code",[this._v("y")]),this._v(" 值进行计算：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" points "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("vec!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("5")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("10")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token number"}},[t._v("3")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sum_of_squares"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" points\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("iter")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("map")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("|")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" x "),n("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" x "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" y "),n("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("sum")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 18-16: 将结构体的引用解构到其字段值中")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这段代码的结果是变量 "),n("code",[t._v("sum_of_squares")]),t._v(" 的值为 135，这个结果是将 "),n("code",[t._v("points")]),t._v(" vector 中每一个 "),n("code",[t._v("Point")]),t._v(" 的 "),n("code",[t._v("x")]),t._v(" 和 "),n("code",[t._v("y")]),t._v(" 的平方相加后求和得到的数字。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果没有在 "),s("code",[this._v("&Point { x, y }")]),this._v(" 中包含 "),s("code",[this._v("&")]),this._v(" 则会得到一个类型不匹配错误，因为这样 "),s("code",[this._v("iter")]),this._v(" 会遍历 vector 中项的引用而不是值本身。这个错误看起来像这样：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("error[E0308]: mismatched types\n  --\x3e\n   |\n14 |         .map(|Point { x, y }| x * x + y * y)\n   |               ^^^^^^^^^^^^ expected &Point, found struct `Point`\n   |\n   = note: expected type `&Point`\n              found type `Point`\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这个错误表明 Rust 期望闭包匹配 "),s("code",[this._v("&Point")]),this._v("，不过我们尝试直接匹配 "),s("code",[this._v("Point")]),this._v(" 值，而不是 "),s("code",[this._v("Point")]),this._v(" 的引用。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"解构结构体和元组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解构结构体和元组","aria-hidden":"true"}},[this._v("#")]),this._v(" 解构结构体和元组")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("feet"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" inches"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("x"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("10")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token number"}},[t._v("10")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"忽略模式中的值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#忽略模式中的值","aria-hidden":"true"}},[this._v("#")]),this._v(" 忽略模式中的值")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("有时忽略模式中的一些值是有用的，比如 "),n("code",[t._v("match")]),t._v(" 中最后捕获全部情况的分支实际上没有做任何事，但是它确实对所有剩余情况负责。有一些简单的方法可以忽略模式中全部或部分值：使用 "),n("code",[t._v("_")]),t._v(" 模式（我们已经见过了），在另一个模式中使用 "),n("code",[t._v("_")]),t._v(" 模式，使用一个以下划线开始的名称，或者使用 "),n("code",[t._v("..")]),t._v(" 忽略所剩部分的值。让我们来分别探索如何以及为什么要这么做。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"使用-忽略整个值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-忽略整个值","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用 "),s("code",[this._v("_")]),this._v(" 忽略整个值")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们已经使用过下划线作为匹配但不绑定任何值的通配符模式了。虽然下划线模式作为 "),s("code",[this._v("match")]),this._v(" 表达式最后的分支特别有用，也可以将其用于任意模式，包括函数参数中，如示例 18-17 所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("foo")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"This code only uses the y parameter: {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("foo")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("4")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 18-17: 在函数签名中使用 "),s("code",[this._v("_")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这段代码会完全忽略作为第一个参数传递的值，3，并会打印出 "),s("code",[this._v("This code only uses the y parameter: 4")]),this._v("。大部分情况当你不再需要特定函数参数时，最好修改签名不再包含无用的参数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"使用嵌套的-忽略部分值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用嵌套的-忽略部分值","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用嵌套的 "),s("code",[this._v("_")]),this._v(" 忽略部分值")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当只需要测试部分值但在期望运行的代码部分中没有使用它们时，也可以在另一个模式内部使用 "),s("code",[this._v("_")]),this._v(" 来只忽略部分值。示例 18-18 展示了负责从设置中获取一个值的代码。业务需求是用户不允许覆盖某个设置中已经存在的自定义配置，但是可以重设设置和在目前未设置时提供新的设置。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" setting_value "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("5")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" new_setting_value "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("10")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("match")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("setting_value"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" new_setting_value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Can\'t overwrite an existing customized value"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    _ "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        setting_value "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" new_setting_value"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"setting is {:?}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" setting_value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("使用 18-18: 当不需要 "),s("code",[this._v("Some")]),this._v(" 中的值时在模式内使用下划线来匹配 "),s("code",[this._v("Some")]),this._v(" 成员")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这段代码会打印出 "),n("code",[t._v("Can't overwrite an existing customized value")]),t._v(" 接着是 "),n("code",[t._v("setting is Some(5)")]),t._v("。在第一个匹配分支，我们不需要匹配或使用任一个 "),n("code",[t._v("Some")]),t._v(" 成员中的值；重要的部分是需要测试 "),n("code",[t._v("setting_value")]),t._v(" 和 "),n("code",[t._v("new_setting_value")]),t._v(" 都为 "),n("code",[t._v("Some")]),t._v(" 成员的情况。在这种情况，我们希望打印出为何不改变 "),n("code",[t._v("setting_value")]),t._v("，并且不会改变它。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("对于所有其他情况（"),n("code",[t._v("setting_value")]),t._v(" 或 "),n("code",[t._v("new_setting_value")]),t._v(" 任一为 "),n("code",[t._v("None")]),t._v("），这由第二个分支的 "),n("code",[t._v("_")]),t._v(" 模式体现，这时确实希望允许 "),n("code",[t._v("new_setting_value")]),t._v(" 变为 "),n("code",[t._v("setting_value")]),t._v("。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" numbers "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("4")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("8")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("16")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("32")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("match")]),t._v(" numbers "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("first"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" third"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fifth"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Some numbers: {}, {}, {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" first"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" third"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fifth"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 18-19: 忽略元组的多个部分")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这会打印出 "),s("code",[this._v("Some numbers: 2, 8, 32")]),this._v(", 值 4 和 16 会被忽略。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"通过在名字前以一个下划线开头来忽略未使用的变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通过在名字前以一个下划线开头来忽略未使用的变量","aria-hidden":"true"}},[this._v("#")]),this._v(" 通过在名字前以一个下划线开头来忽略未使用的变量")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" _x "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("5")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" y "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("10")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 18-20: 以下划线开始变量名以便去掉未使用变量警告")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里得到了警告说未使用变量 "),s("code",[this._v("y")]),this._v("，不过没有警告说未使用下划线开头的变量。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("注意, 只使用"),s("code",[this._v("_")]),this._v("和使用以下划线开头的名称有些微妙的不同：比如 "),s("code",[this._v("_x")]),this._v(" 仍会将值绑定到变量，而 "),s("code",[this._v("_")]),this._v(" 则完全不会绑定。为了展示这个区别的意义，示例 18-21 会产生一个错误。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('let s = Some(String::from("Hello!"));\n\nif let Some(_s) = s {\n    println!("found a string");\n}\n\nprintln!("{:?}", s);\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 18-21: 以下划线开头的未使用变量仍然会绑定值，它可能会获取值的所有权")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("我们会得到一个错误，因为 "),n("code",[t._v("s")]),t._v(" 的值仍然会移动进 "),n("code",[t._v("_s")]),t._v("，并阻止我们再次使用 "),n("code",[t._v("s")]),t._v("。然而只使用下划线本身，并不会绑定值。示例 18-22 能够无错编译，因为 "),n("code",[t._v("s")]),t._v(" 没有被移动进 "),n("code",[t._v("_")]),t._v("：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Hello!"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" s "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"found a string"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"{:?}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 18-22: 单独使用下划线不会绑定值")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上面的代码能很好的运行；因为没有把 "),s("code",[this._v("s")]),this._v(" 绑定到任何变量，它没有被移动。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"用-忽略剩余值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用-忽略剩余值","aria-hidden":"true"}},[this._v("#")]),this._v(" 用 "),s("code",[this._v("..")]),this._v(" 忽略剩余值")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("对于有多个部分的值，可以使用 "),n("code",[t._v("..")]),t._v(" 语法来只使用部分并忽略其它值，同时避免不得不每一个忽略值列出下划线。"),n("code",[t._v("..")]),t._v(" 模式会忽略模式中剩余的任何没有显式匹配的值部分。在示例 18-23 中，有一个 "),n("code",[t._v("Point")]),t._v(" 结构体存放了三维空间中的坐标。在 "),n("code",[t._v("match")]),t._v(" 表达式中，我们希望只操作 "),n("code",[t._v("x")]),t._v(" 坐标并忽略 "),n("code",[t._v("y")]),t._v(" 和 "),n("code",[t._v("z")]),t._v(" 字段的值：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    z"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" origin "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" z"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("match")]),t._v(" origin "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"x is {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 18-23: 通过使用 "),s("code",[this._v("..")]),this._v(" 来忽略 "),s("code",[this._v("Point")]),this._v(" 中除 "),s("code",[this._v("x")]),this._v(" 以外的字段")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这里列出了 "),n("code",[t._v("x")]),t._v(" 值，接着仅仅包含了 "),n("code",[t._v("..")]),t._v(" 模式。这比不得不列出 "),n("code",[t._v("y: _")]),t._v(" 和 "),n("code",[t._v("z: _")]),t._v(" 要来得简单，特别是在处理有很多字段的结构体，但只涉及一到两个字段时的情形。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("..")]),this._v(" 会扩展为所需要的值的数量。示例 18-24 展示了元组中 "),s("code",[this._v("..")]),this._v(" 的应用：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" numbers "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("4")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("8")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("16")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("32")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("match")]),t._v(" numbers "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("first"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("..")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" last"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Some numbers: {}, {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" first"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" last"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 18-24: 用 "),s("code",[this._v("..")]),this._v(" 匹配元组中的第一个和最后一个值并忽略掉所有其它值")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里用 "),s("code",[this._v("first")]),this._v(" 和 "),s("code",[this._v("last")]),this._v(" 来匹配第一个和最后一个值。"),s("code",[this._v("..")]),this._v(" 将匹配并忽略中间的所有值。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("然而使用 "),s("code",[this._v("..")]),this._v(" 必须是无歧义的。如果期望匹配和忽略的值是不明确的，Rust 会报错。示例 18-25 展示了一个带有歧义的 "),s("code",[this._v("..")]),this._v(" 应用，因此其不能编译：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('fn main() {\n    let numbers = (2, 4, 8, 16, 32);\n\n    match numbers {\n        (.., second, ..) => {\n            println!("Some numbers: {}", second)\n        },\n    }\n}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 18-25: 尝试以有歧义的方式运用 "),s("code",[this._v("..")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("error: `..` can only be used once per tuple or tuple struct pattern\n --\x3e src/main.rs:5:22\n  |\n5 |         (.., second, ..) => {\n  |                      ^^\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("Rust 不可能决定在元组中匹配 "),n("code",[t._v("second")]),t._v(" 值之前应该忽略多少个值，以及在之后忽略多少个值。这段代码可能表明我们意在忽略 2，绑定 "),n("code",[t._v("second")]),t._v(" 为 4，接着忽略 8、16 和 32；抑或是意在忽略 2 和 4，绑定 "),n("code",[t._v("second")]),t._v(" 为 8，接着忽略 16 和 32，以此类推。变量名 "),n("code",[t._v("second")]),t._v(" 对于 Rust 来说并没有任何特殊意义，所以会得到编译错误，因为在这两个地方使用 "),n("code",[t._v("..")]),t._v(" 是有歧义的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"使用-ref-和-ref-mut-在模式中创建引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-ref-和-ref-mut-在模式中创建引用","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用 "),s("code",[this._v("ref")]),this._v(" 和 "),s("code",[this._v("ref mut")]),this._v(" 在模式中创建引用")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这里我们将看到使用 "),n("code",[t._v("ref")]),t._v(" 来创建引用，这样值的所有权就不会移动到模式的变量中。通常当匹配模式时，模式所引入的变量将绑定一个值。Rust 的所有权规则意味着这个值将被移动到 "),n("code",[t._v("match")]),t._v(" 中，或者任何使用此模式的位置。示例 18-26 展示了一个带有变量的模式的例子，并接着在 "),n("code",[t._v("match")]),t._v(" 之后使用这整个值。这会编译失败，因为值 "),n("code",[t._v("robot_name")]),t._v(" 的一部分在第一个 "),n("code",[t._v("match")]),t._v(" 分支时被移动到了模式的变量 "),n("code",[t._v("name")]),t._v(" 中：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('let robot_name = Some(String::from("Bors"));\n\nmatch robot_name {\n    Some(name) => println!("Found a name: {}", name),\n    None => (),\n}\n\nprintln!("robot_name is: {:?}", robot_name);\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 18-26: 在匹配分支的模式中创建获取值所有权的变量")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这个例子会编译失败，因为当 "),n("code",[t._v("name")]),t._v(" 绑定 "),n("code",[t._v("robot_name")]),t._v(" 的 "),n("code",[t._v("Some")]),t._v(" 中的值时，其被移动到了 "),n("code",[t._v("match")]),t._v(" 中。因为 "),n("code",[t._v("robot_name")]),t._v(" 的部分所有权被移动到了 "),n("code",[t._v("name")]),t._v(" 中，就不再能够在 "),n("code",[t._v("match")]),t._v(" 之后的 "),n("code",[t._v("println!")]),t._v(" 中使用 "),n("code",[t._v("robot_name")]),t._v("，因为 "),n("code",[t._v("robot_name")]),t._v(" 不再有所有权。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("为了修复这段代码，需要让 "),n("code",[t._v("Some(name)")]),t._v(" 模式借用部分 "),n("code",[t._v("robot_name")]),t._v(" 而不是获取其所有权。在模式之外，我们见过了使用 "),n("code",[t._v("&")]),t._v(" 创建引用来借用值，所以可能会想到的解决方案是将 "),n("code",[t._v("Some(name)")]),t._v(" 改为 "),n("code",[t._v("Some(&name)")]),t._v("。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("然而，在 “解构并分解值” 部分我们见过了模式中的 "),n("code",[t._v("&")]),t._v(" 并不能 "),n("strong",[t._v("创建")]),t._v(" 引用，它会 "),n("strong",[t._v("匹配")]),t._v(" 值中已经存在的引用。因为 "),n("code",[t._v("&")]),t._v(" 在模式中已经有其他意义，不能够使用 "),n("code",[t._v("&")]),t._v(" 在模式中创建引用。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("相对的，为了在模式中创建引用，可以在新变量前使用 "),s("code",[this._v("ref")]),this._v(" 关键字，如示例 18-27 所示：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" robot_name "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Bors"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("match")]),t._v(" robot_name "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("ref")]),t._v(" name"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Found a name: {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    None "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"robot_name is: {:?}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" robot_name"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 18-27: 创建一个引用以便模式变量不会获取其所有权")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这个例子可以编译，因为 "),n("code",[t._v("robot_name")]),t._v(" 中 "),n("code",[t._v("Some")]),t._v(" 成员的值没有被移动到 "),n("code",[t._v("match")]),t._v(" 中；"),n("code",[t._v("match")]),t._v(" 值获取了 "),n("code",[t._v("robot_name")]),t._v(" 中数据的引用而没有移动它。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("为了能够修改模式中匹配的值需要创建可变引用，使用 "),n("code",[t._v("ref mut")]),t._v(" 替代 "),n("code",[t._v("&mut")]),t._v("，类似于上面用 "),n("code",[t._v("ref")]),t._v(" 替代 "),n("code",[t._v("&")]),t._v("：模式中的 "),n("code",[t._v("&mut")]),t._v(" 用于匹配已经存在的可变引用，而不是新建一个。示例 18-28 展示了一个创建可变引用模式的例子：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" robot_name "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Bors"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("match")]),t._v(" robot_name "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("ref")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" name"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("name "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Another name"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    None "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"robot_name is: {:?}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" robot_name"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 18-28: 在模式中使用 "),s("code",[this._v("ref mut")]),this._v(" 来创建一个值的可变引用")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上例可以编译并打印出 "),s("code",[this._v('robot_name is: Some("Another name")')]),this._v("。因为 "),s("code",[this._v("name")]),this._v(" 是一个可变引用，我们需要在匹配分支代码中使用 "),s("code",[this._v("*")]),this._v(" 运算符解引用以便能够修改它。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"匹配守卫提供的额外条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#匹配守卫提供的额外条件","aria-hidden":"true"}},[this._v("#")]),this._v(" 匹配守卫提供的额外条件")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("strong",[t._v("匹配守卫")]),t._v("（"),n("em",[t._v("match guard")]),t._v("）是一个指定与 "),n("code",[t._v("match")]),t._v(" 分支模式之后的额外 "),n("code",[t._v("if")]),t._v(" 条件，它也必须被满足才能选择此分支。匹配守卫用于表达比单独的模式所能允许的更为复杂的情况。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这个条件可以使用模式中创建的变量。示例 18-29 展示了一个 "),s("code",[this._v("match")]),this._v("，其中第一个分支有模式 "),s("code",[this._v("Some(x)")]),this._v(" 还有匹配守卫 "),s("code",[this._v("if x < 5")]),this._v("：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("4")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("match")]),t._v(" num "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" x "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("5")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"less than five: {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"{}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    None "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 18-29: 在模式中加入匹配守卫")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("例18-27: 往一个模式中加入匹配守卫")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("上例会打印出 "),n("code",[t._v("less than five: 4")]),t._v("。当 "),n("code",[t._v("num")]),t._v(" 与模式中第一个分支比较时，因为 "),n("code",[t._v("Some(4)")]),t._v(" 匹配 "),n("code",[t._v("Some(x)")]),t._v(" 所以可以匹配。接着匹配守卫检查 "),n("code",[t._v("x")]),t._v(" 值是否小于 5，因为 4 小于 5，所以第一个分支被选择。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("相反如果 "),s("code",[this._v("num")]),this._v(" 为 "),s("code",[this._v("Some(10)")]),this._v("，因为 10 不小于 5 所以第一个分支的匹配守卫为假。接着 Rust 会前往第二个分支，这会匹配因为它没有匹配守卫所以会匹配任何 "),s("code",[this._v("Some")]),this._v(" 成员。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("无法在模式中表达 "),s("code",[this._v("if x < 5")]),this._v(" 的条件，所以匹配守卫提供了表现此逻辑的能力。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在示例 18-11 中，我们提到可以使用匹配守卫来解决模式中变量覆盖的问题，那里 "),s("code",[this._v("match")]),this._v(" 表达式的模式中新建了一个变量而不是使用 "),s("code",[this._v("match")]),this._v(" 之外的同名变量。新变量意味着不能够测试外部变量的值。实例 18-30 展示了如何使用匹配守卫修复这个问题：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("5")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" y "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("10")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("match")]),t._v(" x "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("50")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Got 50"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" n "),n("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" y "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Matched, n = {:?}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        _ "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Default case, x = {:?}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"at the end: x = {:?}, y = {:?}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 18-30: 使用匹配守卫来测试与外部变量的相等性")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("现在这会打印出 "),n("code",[t._v("Default case, x = Some(5)")]),t._v("。现在第二个匹配分支中的模式不会引入一个覆盖外部 "),n("code",[t._v("y")]),t._v(" 的新变量 "),n("code",[t._v("y")]),t._v("，这意味着可以在匹配守卫中使用外部的 "),n("code",[t._v("y")]),t._v("。相比指定会覆盖外部 "),n("code",[t._v("y")]),t._v(" 的模式 "),n("code",[t._v("Some(y)")]),t._v("，这里指定为 "),n("code",[t._v("Some(n)")]),t._v("。此新建的变量 "),n("code",[t._v("n")]),t._v(" 并没有覆盖任何值，因为 "),n("code",[t._v("match")]),t._v(" 外部没有变量 "),n("code",[t._v("n")]),t._v("。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("在匹配守卫 "),n("code",[t._v("if n == y")]),t._v(" 中，这并不是一个模式所以没有引入新变量。这个 "),n("code",[t._v("y")]),t._v(" "),n("strong",[t._v("正是")]),t._v(" 外部的 "),n("code",[t._v("y")]),t._v(" 而不是新的覆盖变量 "),n("code",[t._v("y")]),t._v("，这样就可以通过比较 "),n("code",[t._v("n")]),t._v(" 和 "),n("code",[t._v("y")]),t._v(" 来表达寻找一个与外部 "),n("code",[t._v("y")]),t._v(" 相同的值的概念了。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("也可以在匹配守卫中使用或运算符 "),n("code",[t._v("|")]),t._v(" 来指定多个模式，同时匹配守卫的条件会作用域所有的模式。示例 18-31 展示了结合匹配守卫与使用了 "),n("code",[t._v("|")]),t._v(" 的模式的优先级。这个例子中重要的部分是匹配守卫 "),n("code",[t._v("if y")]),t._v(" 作用于 4、5 "),n("strong",[t._v("和")]),t._v(" 6，即使这看起来好像 "),n("code",[t._v("if y")]),t._v(" 只作用于 6：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("4")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" y "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("false")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("match")]),t._v(" x "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token number"}},[t._v("4")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("5")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("6")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" y "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"yes"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    _ "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"no"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 18-31: 结合多个模式与匹配守卫")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这个匹配条件表明此分支值匹配 "),n("code",[t._v("x")]),t._v(" 值为 4、5 或 6 "),n("strong",[t._v("同时")]),t._v(" "),n("code",[t._v("y")]),t._v(" 为 "),n("code",[t._v("true")]),t._v(" 的情况。运行这段代码时会发生的是第一个分支的模式因 "),n("code",[t._v("x")]),t._v(" 为 4 而匹配，不过匹配守卫 "),n("code",[t._v("if y")]),t._v(" 为假，所以第一个分支不会被选择。代码移动到第二个分支，这会匹配，此程序会打印出 "),n("code",[t._v("no")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这是因为 "),s("code",[this._v("if")]),this._v(" 条件作用于整个 "),s("code",[this._v("4 | 5 | 6")]),this._v(" 模式，而不仅是最后的值 "),s("code",[this._v("6")]),this._v("。换句话说，匹配守卫与模式的优先级关系看起来像这样：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("(4 | 5 | 6) if y => ...\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("4 | 5 | (6 if y) => ...\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以通过运行代码时的情况看出这一点：如果匹配守卫只作用于由 "),s("code",[this._v("|")]),this._v(" 运算符指定的值列表的最后一个值，这个分支就会匹配且程序会打印出 "),s("code",[this._v("yes")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#绑定","aria-hidden":"true"}},[this._v("#")]),this._v(" "),s("code",[this._v("@")]),this._v(" 绑定")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("at 运算符 "),n("code",[t._v("@")]),t._v(" 允许我们在创建一个存放值的变量的同时测试其值是否匹配模式。示例 18-32 展示了一个例子，这里我们希望测试 "),n("code",[t._v("Message::Hello")]),t._v(" 的 "),n("code",[t._v("id")]),t._v(" 字段是否位于 "),n("code",[t._v("3...7")]),t._v(" 范围内，同时也希望能其值绑定到 "),n("code",[t._v("id_variable")]),t._v(" 变量中以便此分支相关联的代码可以使用它。可以将 "),n("code",[t._v("id_variable")]),t._v(" 命名为 "),n("code",[t._v("id")]),t._v("，与字段同名，不过出于示例的目的这里选择了不同的名称：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Message "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Hello "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" id"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32 "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" msg "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Message"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Hello "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" id"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("5")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("match")]),t._v(" msg "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Message"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Hello "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" id"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" id_variable "),n("span",{attrs:{class:"token operator"}},[t._v("@")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v("...")]),n("span",{attrs:{class:"token number"}},[t._v("7")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Found an id in range: {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" id_variable"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Message"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Hello "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" id"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("10")]),n("span",{attrs:{class:"token punctuation"}},[t._v("...")]),n("span",{attrs:{class:"token number"}},[t._v("12")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Found an id in another range"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Message"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Hello "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" id "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Found some other id: {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" id"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 18-32: 使用 "),s("code",[this._v("@")]),this._v(" 在模式中绑定值的同时测试它")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上例会打印出 "),s("code",[this._v("Found an id in range: 5")]),this._v("。通过在 "),s("code",[this._v("3...7")]),this._v(" 之前指定 "),s("code",[this._v("id_variable @")]),this._v("，我们捕获了任何匹配此范围的值并同时测试其值匹配这个范围模式。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("第二个分支只在模式中指定了一个范围，分支相关代码代码没有一个包含 "),n("code",[t._v("id")]),t._v(" 字段实际值的变量。"),n("code",[t._v("id")]),t._v(" 字段的值将会是 10、11 或 12，不过这个模式的代码并不知情也不能使用 "),n("code",[t._v("id")]),t._v(" 字段中的值，因为没有将 "),n("code",[t._v("id")]),t._v(" 值保存进一个变量。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后一个分支指定了一个没有范围的变量，此时确实拥有可以用于分支代码的变量 "),s("code",[this._v("id")]),this._v("，因为这里使用了结构体字段简写语法。不过此分支中不能像头两个分支那样对 "),s("code",[this._v("id")]),this._v(" 字段的值进行任何测试：任何值都会匹配此分支。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("使用 "),s("code",[this._v("@")]),this._v(" 可以在一个模式中同时测试和保存变量值。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("模式是 Rust 中一个很有用的功能，它帮助我们区分不同类型的数据。当用于 "),s("code",[this._v("match")]),this._v(" 语句时，Rust 确保模式会包含每一个可能的值，否则程序将不能编译。"),s("code",[this._v("let")]),this._v(" 语句和函数参数的模式使得这些结构更强大，可以在将值解构为更小部分的同时为变量赋值。可以创建简单或复杂的模式来满足我们的要求。")])}],!1,null,null,null);e.options.__file="ch18-03-pattern-syntax.md";s.default=e.exports}}]);