(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{262:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch03-03-how-functions-work.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch03-03-how-functions-work.md"),n("OutboundLink")],1),t._v(" "),n("br"),t._v("\ncommit a86c1d315789b3ca13b20d50ad5005c62bdd9e37")])]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),n("p",[t._v("尝试运行程序，将会输出如下内容：")]),t._v(" "),t._m(15),t._m(16),t._v(" "),t._m(17),t._v(" "),n("p",[t._v("当一个函数有多个参数时，使用逗号分隔，像这样：")]),t._v(" "),t._m(18),t._v(" "),t._m(19),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._m(23),t._v(" "),t._m(24),t._v(" "),n("p",[t._v("函数体由一系列的语句和一个可选的结尾表达式构成。目前为止，我们只介绍了没有结尾表达式的函数，不过你已经见过作为语句一部分的表达式。因为 Rust 是一门基于表达式（expression-based）的语言，这是一个需要理解的（不同于其他语言）重要区别。其他语言并没有这样的区别，所以让我们看看语句与表达式有什么区别以及这些区别是如何影响函数体的。")]),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._m(29),t._v(" "),n("p",[t._v("函数定义也是语句，上面整个例子本身就是一个语句。")]),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),n("p",[t._v("当运行这个程序时，会得到如下错误：")]),t._v(" "),t._m(33),t._m(34),t._v(" "),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),n("p",[t._v("这个表达式：")]),t._v(" "),t._m(38),t._m(39),t._v(" "),t._m(40),t._v(" "),t._m(41),t._v(" "),t._m(42),t._v(" "),t._m(43),t._m(44),t._v(" "),t._m(45),t._m(46),t._v(" "),t._m(47),t._m(48),t._v(" "),n("p",[t._v("让我们看看另一个例子：")]),t._v(" "),t._m(49),t._v(" "),t._m(50),t._m(51),t._v(" "),t._m(52),t._v(" "),t._m(53),n("p",[t._v("运行代码会产生一个错误，如下：")]),t._v(" "),t._m(54),t._m(55)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数","aria-hidden":"true"}},[this._v("#")]),this._v(" 函数")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("函数遍布于 Rust 代码中。你已经见过语言中最重要的函数之一："),s("code",[this._v("main")]),this._v(" 函数，它是很多程序的入口点。你也见过 "),s("code",[this._v("fn")]),this._v(" 关键字，它用来声明新函数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Rust 代码中的函数和变量名使用 "),s("em",[this._v("snake case")]),this._v(" 规范风格。在 snake case 中，所有字母都是小写并使用下划线分隔单词。这是一个包含函数定义示例的程序：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Hello, world!"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token function"}},[t._v("another_function")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("another_function")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Another function."')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Rust 中的函数定义以 "),s("code",[this._v("fn")]),this._v(" 开始并在函数名后跟一对圆括号。大括号告诉编译器哪里是函数体的开始和结尾。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("可以使用函数名后跟圆括号来调用我们定义过的任意函数。因为程序中已定义 "),n("code",[t._v("another_function")]),t._v(" 函数，所以可以在 "),n("code",[t._v("main")]),t._v(" 函数中调用它。注意，源码中 "),n("code",[t._v("another_function")]),t._v(" 定义在 "),n("code",[t._v("main")]),t._v(" 函数 "),n("strong",[t._v("之后")]),t._v("；也可以定义在之前。Rust 不关心函数定义于何处，只要定义了就行。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("让我们新建一个叫做 "),s("em",[this._v("functions")]),this._v(" 的二进制项目来进一步探索函数。将上面的 "),s("code",[this._v("another_function")]),this._v(" 例子写入 "),s("em",[this._v("src/main.rs")]),this._v(" 中并运行。你应该会看到如下输出：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.28 secs\n     Running `target/debug/functions`\nHello, world!\nAnother function.\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("main")]),this._v(" 函数中的代码会按顺序执行。首先，打印 “Hello, world!” 信息，然后调用 "),s("code",[this._v("another_function")]),this._v(" 函数并打印它的信息。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"函数参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数参数","aria-hidden":"true"}},[this._v("#")]),this._v(" 函数参数")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("函数也可以被定义为拥有 "),n("strong",[t._v("参数")]),t._v("（"),n("em",[t._v("parameters")]),t._v("），参数是特殊变量，是函数签名的一部分。当函数拥有参数（形参）时，可以为这些参数提供具体的值（实参）。技术上讲，这些具体值被称为参数（"),n("em",[t._v("arguments")]),t._v("），但是在日常交流中，人们倾向于不区分使用 "),n("em",[t._v("parameter")]),t._v(" 和 "),n("em",[t._v("argument")]),t._v(" 来表示函数定义中的变量或调用函数时传入的具体值。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("下面被重写的 "),s("code",[this._v("another_function")]),this._v(" 版本展示了 Rust 中参数是什么样的：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("another_function")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("5")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("another_function")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"The value of x is: {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.21 secs\n     Running `target/debug/functions`\nThe value of x is: 5\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("another_function")]),t._v(" 的声明中有一个命名为 "),n("code",[t._v("x")]),t._v(" 的参数。"),n("code",[t._v("x")]),t._v(" 的类型被指定为 "),n("code",[t._v("i32")]),t._v("。当将 "),n("code",[t._v("5")]),t._v(" 传给 "),n("code",[t._v("another_function")]),t._v(" 时，"),n("code",[t._v("println!")]),t._v(" 宏将 "),n("code",[t._v("5")]),t._v(" 放入格式化字符串中大括号的位置。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在函数签名中，"),s("strong",[this._v("必须")]),this._v(" 声明每个参数的类型。这是 Rust 设计中一个经过慎重考虑的决定：要求在函数定义中提供类型注解，意味着编译器不需要你在代码的其他地方注明类型来指出你的意图。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("another_function")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("5")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("6")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("another_function")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"The value of x is: {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"The value of y is: {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这个例子创建了有两个参数的函数，都是 "),s("code",[this._v("i32")]),this._v(" 类型。函数打印出了这两个参数的值。注意函数的参数类型并不一定相同，这个例子中只是碰巧相同罢了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("尝试运行代码。使用上面的例子替换当前 "),s("em",[this._v("functions")]),this._v(" 项目的 "),s("em",[this._v("src/main.rs")]),this._v(" 文件，并用 "),s("code",[this._v("cargo run")]),this._v(" 运行它：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31 secs\n     Running `target/debug/functions`\nThe value of x is: 5\nThe value of y is: 6\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("因为我们使用 "),n("code",[t._v("5")]),t._v(" 作为 "),n("code",[t._v("x")]),t._v(" 的值，"),n("code",[t._v("6")]),t._v(" 作为 "),n("code",[t._v("y")]),t._v(" 的值来调用函数，因此打印出这两个字符串及相应的值。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"包含语句和表达式的函数体"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#包含语句和表达式的函数体","aria-hidden":"true"}},[this._v("#")]),this._v(" 包含语句和表达式的函数体")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("实际上，我们已经使用过语句和表达式。"),s("strong",[this._v("语句")]),this._v("（"),s("em",[this._v("Statements")]),this._v("）是执行一些操作但不返回值的指令。表达式（"),s("em",[this._v("Expressions")]),this._v("）计算并产生一个值。让我们看一些例子：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("使用 "),s("code",[this._v("let")]),this._v(" 关键字创建变量并绑定一个值是一个语句。在列表 3-1 中，"),s("code",[this._v("let y = 6;")]),this._v(" 是一个语句。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" y "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("6")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("列表 3-1：包含一个语句的 "),s("code",[this._v("main")]),this._v(" 函数定义")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("语句不返回值。因此，不能把 "),s("code",[this._v("let")]),this._v(" 语句赋值给另一个变量，比如下面的例子尝试做的，会产生一个错误：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore,does_not_compile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("fn main() {\n    let x = (let y = 6);\n}\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\nerror: expected expression, found statement (`let`)\n --\x3e src/main.rs:2:14\n  |\n2 |     let x = (let y = 6);\n  |              ^^^\n  |\n  = note: variable declaration using `let` is a statement\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("let y = 6")]),t._v(" 语句并不返回值，所以没有可以绑定到 "),n("code",[t._v("x")]),t._v(" 上的值。这与其他语言不同，例如 C 和 Ruby，它们的赋值语句会返回所赋的值。在这些语言中，可以这么写 "),n("code",[t._v("x = y = 6")]),t._v("，这样 "),n("code",[t._v("x")]),t._v(" 和 "),n("code",[t._v("y")]),t._v(" 的值都是 "),n("code",[t._v("6")]),t._v("；Rust 中不能这样写。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("表达式会计算出一些值，并且你将编写的大部分 Rust 代码是由表达式组成的。考虑一个简单的数学运算，比如 "),n("code",[t._v("5 + 6")]),t._v("，这是一个表达式并计算出值 "),n("code",[t._v("11")]),t._v("。表达式可以是语句的一部分：在示例 3-1 中，语句 "),n("code",[t._v("let y = 6;")]),t._v(" 中的 "),n("code",[t._v("6")]),t._v(" 是一个表达式，它计算出的值是 "),n("code",[t._v("6")]),t._v("。函数调用是一个表达式。宏调用是一个表达式。我们用来创建新作用域的大括号（代码块），"),n("code",[t._v("{}")]),t._v("，也是一个表达式，例如：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("5")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" y "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        x "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"The value of y is: {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("{\n    let x = 3;\n    x + 1\n}\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("是一个代码块，它的值是 "),n("code",[t._v("4")]),t._v("。这个值作为 "),n("code",[t._v("let")]),t._v(" 语句的一部分被绑定到 "),n("code",[t._v("y")]),t._v(" 上。注意结尾没有分号的那一行 "),n("code",[t._v("x+1")]),t._v("，与你见过的大部分代码行不同。表达式的结尾没有分号。如果在表达式的结尾加上分号，它就变成了语句，而语句不会返回值。在接下来探索具有返回值的函数和表达式时要谨记这一点。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"具有返回值的函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#具有返回值的函数","aria-hidden":"true"}},[this._v("#")]),this._v(" 具有返回值的函数")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("函数可以向调用它的代码返回值。我们并不对返回值命名，但要在箭头（"),s("code",[this._v("->")]),this._v("）后声明它的类型。在 Rust 中，函数的返回值等同于函数体最后一个表达式的值。使用 "),s("code",[this._v("return")]),this._v(" 关键字和指定值，可从函数中提前返回；但大部分函数隐式的返回最后的表达式。这是一个有返回值的函数的例子：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("five")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" i32 "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token number"}},[t._v("5")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("five")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"The value of x is: {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("在 "),n("code",[t._v("five")]),t._v(" 函数中没有函数调用、宏、甚至没有 "),n("code",[t._v("let")]),t._v(" 语句——只有数字 "),n("code",[t._v("5")]),t._v("。这在 Rust 中是一个完全有效的函数。注意，也指定了函数返回值的类型，就是 "),n("code",[t._v("-> i32")]),t._v("。尝试运行代码；输出应该看起来像这样：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.30 secs\n     Running `target/debug/functions`\nThe value of x is: 5\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("five")]),t._v(" 函数的返回值是 "),n("code",[t._v("5")]),t._v("，所以返回值类型是 "),n("code",[t._v("i32")]),t._v("。让我们仔细检查一下这段代码。有两个重要的部分：首先，"),n("code",[t._v("let x = five();")]),t._v(" 这一行表明我们使用函数的返回值初始化一个变量。因为 "),n("code",[t._v("five")]),t._v(" 函数返回 "),n("code",[t._v("5")]),t._v("，这一行与如下代码相同：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[this._v("let")]),this._v(" x "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{attrs:{class:"token number"}},[this._v("5")]),s("span",{attrs:{class:"token punctuation"}},[this._v(";")]),this._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("其次，"),s("code",[this._v("five")]),this._v(" 函数没有参数并定义了返回值类型，不过函数体只有单单一个 "),s("code",[this._v("5")]),this._v(" 也没有分号，因为这是一个表达式，我们想要返回它的值。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("plus_one")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("5")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"The value of x is: {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("plus_one")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" i32 "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("运行代码会打印出 "),s("code",[this._v("The value of x is: 6")]),this._v("。但如果在包含 "),s("code",[this._v("x + 1")]),this._v(" 的行尾加上一个分号，把它从表达式变成语句，我们将看到一个错误。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore,does_not_compile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('fn main() {\n    let x = plus_one(5);\n\n    println!("The value of x is: {}", x);\n}\n\nfn plus_one(x: i32) -> i32 {\n    x + 1;\n}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("error[E0308]: mismatched types\n --\x3e src/main.rs:7:28\n  |\n7 |   fn plus_one(x: i32) -> i32 {\n  |  ____________________________^\n8 | |     x + 1;\n  | |          - help: consider removing this semicolon\n9 | | }\n  | |_^ expected i32, found ()\n  |\n  = note: expected type `i32`\n             found type `()`\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("主要的错误信息，“mismatched types”（类型不匹配），揭示了代码的核心问题。函数 "),s("code",[this._v("plus_one")]),this._v(" 的定义说明它要返回一个 "),s("code",[this._v("i32")]),this._v(" 类型的值，不过语句并不会返回值，使用空元组 "),s("code",[this._v("()")]),this._v(" 表示不返回值。因为不返回值与函数定义相矛盾，从而出现一个错误。在输出中，Rust 提供了一条信息，可能有助于纠正这个错误：它建议删除分号，这会修复这个错误。")])}],!1,null,null,null);e.options.__file="ch03-03-how-functions-work.md";s.default=e.exports}}]);