(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{222:function(t,e,c){"use strict";c.r(e);var n=c(0),a=Object(n.a)({},function(){var t=this,e=t.$createElement,c=t._self._c||e;return c("div",{staticClass:"content"},[t._m(0),t._v(" "),c("blockquote",[c("p",[c("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch09-01-unrecoverable-errors-with-panic.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch09-01-unrecoverable-errors-with-panic.md"),c("OutboundLink")],1),t._v(" "),c("br"),t._v("\ncommit d073ece693e880b69412e645e4eabe99e74e7590")])]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),c("p",[t._v("运行程序将会出现类似这样的输出：")]),t._v(" "),t._m(6),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),c("p",[t._v("为了使程序远离这类漏洞，如果尝试读取一个索引不存在的元素，Rust 会停止执行并拒绝继续。尝试运行上面的程序会出现如下：")]),t._v(" "),t._m(16),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"panic-与不可恢复的错误"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#panic-与不可恢复的错误","aria-hidden":"true"}},[this._v("#")]),this._v(" "),e("code",[this._v("panic!")]),this._v(" 与不可恢复的错误")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("突然有一天，代码出问题了，而你对此束手无策。对于这种情况，Rust 有 "),e("code",[this._v("panic!")]),this._v("宏。当执行这个宏时，程序会打印出一个错误信息，展开并清理栈数据，然后接着退出。出现这种情况的场景通常是检测到一些类型的 bug 而且程序员并不清楚该如何处理它。")])},function(){var t=this,e=t.$createElement,c=t._self._c||e;return c("blockquote",[c("h3",{attrs:{id:"对应-panic-时的栈展开或终止"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#对应-panic-时的栈展开或终止","aria-hidden":"true"}},[t._v("#")]),t._v(" 对应 panic 时的栈展开或终止")]),t._v(" "),c("p",[t._v("当出现 panic 时，程序默认会开始 "),c("strong",[t._v("展开")]),t._v("（"),c("em",[t._v("unwinding")]),t._v("），这意味着 Rust 会回溯栈并清理它遇到的每一个函数的数据，不过这个回溯并清理的过程有很多工作。另一种选择是直接 "),c("strong",[t._v("终止")]),t._v("（"),c("em",[t._v("abort")]),t._v("），这会不清理数据就退出程序。那么程序所使用的内存需要由操作系统来清理。如果你需要项目的最终二进制文件越小越好，panic 时通过在  "),c("em",[t._v("Cargo.toml")]),t._v(" 的 "),c("code",[t._v("[profile]")]),t._v(" 部分增加 "),c("code",[t._v("panic = 'abort'")]),t._v("，可以由展开切换为终止。例如，如果你想要在release模式中 panic 时直接终止：")]),t._v(" "),c("div",{staticClass:"language-toml extra-class"},[c("pre",{pre:!0,attrs:{class:"language-text"}},[c("code",[t._v("[profile.release]\npanic = 'abort'\n")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("让我们在一个简单的程序中调用 "),e("code",[this._v("panic!")]),this._v("：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-rust,should_panic,panics extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('fn main() {\n    panic!("crash and burn");\n}\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$ cargo run\n   Compiling panic v0.1.0 (file:///projects/panic)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.25 secs\n     Running `target/debug/panic`\nthread 'main' panicked at 'crash and burn', src/main.rs:2:4\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("最后两行包含 "),e("code",[this._v("panic!")]),this._v(" 调用造成的错误信息。第一行显示了 panic 提供的信息并指明了源码中 panic 出现的位置："),e("em",[this._v("src/main.rs:2:4")]),this._v(" 表明这是 "),e("em",[this._v("src/main.rs")]),this._v(" 文件的第二行第四个字符。")])},function(){var t=this,e=t.$createElement,c=t._self._c||e;return c("p",[t._v("在这个例子中，被指明的那一行是我们代码的一部分，而且查看这一行的话就会发现 "),c("code",[t._v("panic!")]),t._v(" 宏的调用。在其他情况下，"),c("code",[t._v("panic!")]),t._v(" 可能会出现在我们的代码调用的代码中。错误信息报告的文件名和行号可能指向别人代码中的 "),c("code",[t._v("panic!")]),t._v(" 宏调用，而不是我们代码中最终导致 "),c("code",[t._v("panic!")]),t._v(" 的那一行。可以使用 "),c("code",[t._v("panic!")]),t._v(" 被调用的函数的 backtrace 来寻找（我们代码中出问题的地方）。下面我们会详细介绍 backtrace 是什么。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"使用-panic-的-backtrace"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-panic-的-backtrace","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用 "),e("code",[this._v("panic!")]),this._v(" 的 backtrace")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("让我们来看看另一个因为我们代码中的 bug 引起的别的库中 "),e("code",[this._v("panic!")]),this._v(" 的例子，而不是直接的宏调用。示例 9-1 有一些尝试通过索引访问 vector 中元素的例子：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-rust,should_panic,panics extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("fn main() {\n    let v = vec![1, 2, 3];\n\n    v[99];\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("span",{staticClass:"caption"},[this._v("示例 9-1：尝试访问超越 vector 结尾的元素，这会造成 "),e("code",[this._v("panic!")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这里尝试访问 vector 的第一百个元素（这里的索引是 99 因为索引从 0 开始），不过它只有三个元素。这种情况下 Rust 会 panic。"),e("code",[this._v("[]")]),this._v(" 应当返回一个元素，不过如果传递了一个无效索引，就没有可供 Rust 返回的正确的元素。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这种情况下其他像 C 这样语言会尝试直接提供所要求的值，即便这可能不是你期望的：你会得到任何对应 vector 中这个元素的内存位置的值，甚至是这些内存并不属于 vector 的情况。这被称为 "),e("strong",[this._v("缓冲区溢出")]),this._v("（"),e("em",[this._v("buffer overread")]),this._v("），并可能会导致安全漏洞，比如攻击者可以像这样操作索引来读取储存在数组后面不被允许的数据。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$ cargo run\n   Compiling panic v0.1.0 (file:///projects/panic)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.27 secs\n     Running `target/debug/panic`\nthread 'main' panicked at 'index out of bounds: the len is 3 but the index is\n99', /checkout/src/liballoc/vec.rs:1555:10\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n")])])])},function(){var t=this,e=t.$createElement,c=t._self._c||e;return c("p",[t._v("这指向了一个不是我们编写的文件，"),c("em",[t._v("vec.rs")]),t._v("。这是标准库中 "),c("code",[t._v("Vec<T>")]),t._v(" 的实现。这是当对 vector "),c("code",[t._v("v")]),t._v(" 使用 "),c("code",[t._v("[]")]),t._v(" 时 "),c("em",[t._v("vec.rs")]),t._v(" 中会执行的代码，也是真正出现 "),c("code",[t._v("panic!")]),t._v(" 的地方。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("接下来的几行提醒我们可以设置 "),e("code",[this._v("RUST_BACKTRACE")]),this._v(" 环境变量来得到一个 backtrace "),e("em",[this._v("backtrace")]),this._v(" 是一个执行到目前位置所有被调用的函数的列表。Rust 的 backtrace 跟其他语言中的一样：阅读 backtrace 的关键是从头开始读直到发现你编写的文件。这就是问题的发源地。这一行往上是你的代码调用的代码；往下则是调用你的代码的代码。这些行可能包含核心 Rust 代码，标准库代码或用到的 crate 代码。让我们将 "),e("code",[this._v("RUST_BACKTRACE")]),this._v(" 环境变量设置为任何不是 0 的值来获取 backtrace 看看。示例 9-2 展示了与你看到类似的输出：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$ RUST_BACKTRACE=1 cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs\n     Running `target/debug/panic`\nthread 'main' panicked at 'index out of bounds: the len is 3 but the index is 99', /checkout/src/liballoc/vec.rs:1555:10\nstack backtrace:\n   0: std::sys::imp::backtrace::tracing::imp::unwind_backtrace\n             at /checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\n   1: std::sys_common::backtrace::_print\n             at /checkout/src/libstd/sys_common/backtrace.rs:71\n   2: std::panicking::default_hook::{{closure}}\n             at /checkout/src/libstd/sys_common/backtrace.rs:60\n             at /checkout/src/libstd/panicking.rs:381\n   3: std::panicking::default_hook\n             at /checkout/src/libstd/panicking.rs:397\n   4: std::panicking::rust_panic_with_hook\n             at /checkout/src/libstd/panicking.rs:611\n   5: std::panicking::begin_panic\n             at /checkout/src/libstd/panicking.rs:572\n   6: std::panicking::begin_panic_fmt\n             at /checkout/src/libstd/panicking.rs:522\n   7: rust_begin_unwind\n             at /checkout/src/libstd/panicking.rs:498\n   8: core::panicking::panic_fmt\n             at /checkout/src/libcore/panicking.rs:71\n   9: core::panicking::panic_bounds_check\n             at /checkout/src/libcore/panicking.rs:58\n  10: <alloc::vec::Vec<T> as core::ops::index::Index<usize>>::index\n             at /checkout/src/liballoc/vec.rs:1555\n  11: panic::main\n             at src/main.rs:4\n  12: __rust_maybe_catch_panic\n             at /checkout/src/libpanic_unwind/lib.rs:99\n  13: std::rt::lang_start\n             at /checkout/src/libstd/panicking.rs:459\n             at /checkout/src/libstd/panic.rs:361\n             at /checkout/src/libstd/rt.rs:61\n  14: main\n  15: __libc_start_main\n  16: <unknown>\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("span",{staticClass:"caption"},[this._v("示例 9-2：当设置 "),e("code",[this._v("RUST_BACKTRACE")]),this._v(" 环境变量时 "),e("code",[this._v("panic!")]),this._v(" 调用所生成的 backtrace 信息")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这里有大量的输出！你实际看到的输出可能因不同的操作系统和 Rust 版本而有所不同。为了获取带有这些信息的 backtrace，必须启用 debug 标识。当不使用 "),e("code",[this._v("--release")]),this._v(" 参数运行 cargo build 或 cargo run 时 debug 标识会默认启用，就像这里一样。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("示例 9-2 的输出中，backtrace 的 11 行指向了我们项目中造成问题的行："),e("em",[this._v("src/main.rs")]),this._v(" 的第 4 行。如果你不希望程序 panic，第一个提到我们编写的代码行的位置是你应该开始调查的，以便查明是什么值如何在这个地方引起了 panic。在示例 9-1 中，我们故意编写会 panic 的代码来演示如何使用 backtrace，修复这个 panic 的方法就是不要尝试在一个只包含三个项的 vector 中请求索引是 100 的元素。当将来你的代码出现了 panic，你需要搞清楚在这特定的场景下代码中执行了什么操作和什么值导致了 panic，以及应当如何处理才能避免这个问题。")])},function(){var t=this,e=t.$createElement,c=t._self._c||e;return c("p",[t._v("本章后面的小节 “panic! 还是不 panic!”会再次回到 "),c("code",[t._v("panic!")]),t._v(" 会回到 "),c("code",[t._v("panic!")]),t._v(" 并讲解何时应该何时不应该使用 "),c("code",[t._v("panic!")]),t._v(" 来处理错误情况。接下来，我们来看看如何使用 "),c("code",[t._v("Result")]),t._v(" 来从错误中恢复。")])}],!1,null,null,null);a.options.__file="ch09-01-unrecoverable-errors-with-panic.md";e.default=a.exports}}]);