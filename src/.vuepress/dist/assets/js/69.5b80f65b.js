(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{201:function(t,s,n){"use strict";n.r(s);var e=n(0),a=Object(e.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch13-03-improving-our-io-project.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch13-03-improving-our-io-project.md"),n("OutboundLink")],1),t._v(" "),n("br"),t._v("\ncommit 1fedfc4b96c2017f64ecfcf41a0a07e2e815f24f")])]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),t._m(38),t._m(39),t._v(" "),t._m(40),t._v(" "),n("p",[t._v("接下来的逻辑问题就是在代码中应该选择哪种风格：示例 13-28 中的原始实现，或者是示例 13-29 中使用迭代器的版本。大部分 Rust 程序员倾向于使用迭代器风格。开始这有点难以理解，不过一旦你对不同迭代器的工作方式有了感觉之后，迭代器可能会更容易理解。相比摆弄不同的循环并创建新 vector，（迭代器）代码则更关注循环的目的。这抽象出了那些老生常谈的代码，这样就更容易看清代码所特有的概念，比如迭代器中每个元素必须面对的过滤条件。")]),t._v(" "),n("p",[t._v("不过这两种实现真的完全等同吗？直觉上的假设是更底层的循环会更快一些。让我们聊聊性能吧。")])])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"改进-i-o-项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#改进-i-o-项目","aria-hidden":"true"}},[this._v("#")]),this._v(" 改进 I/O 项目")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("有了这些关于迭代器的新知识，我们可以使用迭代器来改进第十二章中 I/O 项目的实现来使得代码更简洁明了。让我们看看迭代器如何能够改进 "),s("code",[this._v("Config::new")]),this._v(" 函数和 "),s("code",[this._v("search")]),this._v(" 函数的实现。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"使用迭代器并去掉-clone"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用迭代器并去掉-clone","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用迭代器并去掉 "),s("code",[this._v("clone")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("在示例 12-6 中，我们增加了一些代码获取一个 "),n("code",[t._v("String")]),t._v(" slice 并创建一个 "),n("code",[t._v("Config")]),t._v(" 结构体的实例，他们索引 slice 中的值并克隆这些值以便 "),n("code",[t._v("Config")]),t._v(" 结构体可以拥有这些值。在示例 13-24 中重现了第十二章结尾示例 12-23 中 "),n("code",[t._v("Config::new")]),t._v(" 函数的实现：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('impl Config {\n    pub fn new(args: &[String]) -> Result<Config, &\'static str> {\n        if args.len() < 3 {\n            return Err("not enough arguments");\n        }\n\n        let query = args[1].clone();\n        let filename = args[2].clone();\n\n        let case_sensitive = env::var("CASE_INSENSITIVE").is_err();\n\n        Ok(Config { query, filename, case_sensitive })\n    }\n}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 13-24：重现第十二章结尾的 "),s("code",[this._v("Config::new")]),this._v(" 函数")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这时可以不必担心低效的 "),s("code",[this._v("clone")]),this._v(" 调用了，因为将来可以去掉他们。好吧，就是现在！")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("起初这里需要 "),n("code",[t._v("clone")]),t._v(" 的原因是参数 "),n("code",[t._v("args")]),t._v(" 中有一个 "),n("code",[t._v("String")]),t._v(" 元素的 slice，而 "),n("code",[t._v("new")]),t._v(" 函数并不拥有 "),n("code",[t._v("args")]),t._v("。为了能够返回 "),n("code",[t._v("Config")]),t._v(" 实例的所有权，我们需要克隆 "),n("code",[t._v("Config")]),t._v(" 中字段 "),n("code",[t._v("query")]),t._v(" 和 "),n("code",[t._v("filename")]),t._v(" 的值，这样 "),n("code",[t._v("Config")]),t._v(" 实例就能拥有这些值。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("通过迭代器的新知识，我们可以将 "),s("code",[this._v("new")]),this._v(" 函数改为获取一个有所有权的迭代器作为参数而不是借用 slice。我们将使用迭代器功能之前检查 slice 长度和索引特定位置的代码。这会明确 "),s("code",[this._v("Config::new")]),this._v(" 的工作因为迭代器会负责访问这些值。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("一旦 "),n("code",[t._v("Config::new")]),t._v(" 获取了迭代器的所有权并不再使用借用的索引操作，就可以将迭代器中的 "),n("code",[t._v("String")]),t._v(" 值移动到 "),n("code",[t._v("Config")]),t._v(" 中，而不是调用 "),n("code",[t._v("clone")]),t._v(" 分配新的空间。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"直接使用-env-args-返回的迭代器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#直接使用-env-args-返回的迭代器","aria-hidden":"true"}},[this._v("#")]),this._v(" 直接使用 "),s("code",[this._v("env::args")]),this._v(" 返回的迭代器")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("打开 I/O 项目的 "),s("em",[this._v("src/main.rs")]),this._v(" 文件，它看起来应该像这样：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('fn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let config = Config::new(&args).unwrap_or_else(|err| {\n        eprintln!("Problem parsing arguments: {}", err);\n        process::exit(1);\n    });\n\n    // --snip--\n}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们会修改第十二章结尾示例 12-24 中的 "),s("code",[this._v("main")]),this._v(" 函数的开头为示例 13-25 中的代码。直到同步更新 "),s("code",[this._v("Config::new")]),this._v(" 之前这些代码还不能编译：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('fn main() {\n    let config = Config::new(env::args()).unwrap_or_else(|err| {\n        eprintln!("Problem parsing arguments: {}", err);\n        process::exit(1);\n    });\n\n    // --snip--\n}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 13-25：将 "),s("code",[this._v("env::args")]),this._v(" 的返回值传递给 "),s("code",[this._v("Config::new")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("env::args")]),t._v(" 函数返回一个迭代器！不同于将迭代器的值收集到一个 vector 中接着传递一个 slice 给 "),n("code",[t._v("Config::new")]),t._v("，现在我们直接将 "),n("code",[t._v("env::args")]),t._v(" 返回的迭代器的所有权传递给 "),n("code",[t._v("Config::new")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接下来需要更新 "),s("code",[this._v("Config::new")]),this._v(" 的定义。在 I/O 项目的 "),s("em",[this._v("src/lib.rs")]),this._v(" 中，将 "),s("code",[this._v("Config::new")]),this._v(" 的签名改为如示例 13-26 所示。这仍然不能编译因为我们还需更新函数体：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("impl Config {\n    pub fn new(mut args: std::env::Args) -> Result<Config, &'static str> {\n        // --snip--\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 13-26：更新 "),s("code",[this._v("Config::new")]),this._v(" 的签名来接受一个迭代器")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("env::args")]),t._v(" 函数的标准库文档展示了其返回的迭代器类型是 "),n("code",[t._v("std::env::Args")]),t._v("。需要更新 "),n("code",[t._v("Config::new")]),t._v(" 函数的签名中 "),n("code",[t._v("args")]),t._v(" 参数的类型为 "),n("code",[t._v("std::env::Args")]),t._v(" 而不是 "),n("code",[t._v("&[String]")]),t._v("。因为这里需要获取 "),n("code",[t._v("args")]),t._v(" 的所有权且通过迭代改变 "),n("code",[t._v("args")]),t._v("，我们可以在 "),n("code",[t._v("args")]),t._v(" 参数前指定 "),n("code",[t._v("mut")]),t._v(" 关键字使其可变。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"使用-iterator-trait-方法代替索引"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-iterator-trait-方法代替索引","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用 "),s("code",[this._v("Iterator")]),this._v(" trait 方法代替索引")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("接下来修复 "),n("code",[t._v("Config::new")]),t._v(" 的函数体。标准库文档也提到了 "),n("code",[t._v("std::env::Args")]),t._v(" 实现了 "),n("code",[t._v("Iterator")]),t._v(" trait，所以可以在其上调用 "),n("code",[t._v("next")]),t._v(" 方法！示例 13-27 更新了示例 12-23 中的代码为使用 "),n("code",[t._v("next")]),t._v(" 方法：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("env"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Config "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     query"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     filename"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     case_sensitive"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" bool"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Config "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" args"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("env"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Args"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Result"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Config"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'static")]),t._v(" str"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        args"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("next")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" query "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("match")]),t._v(" args"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("next")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" arg"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            None "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Err")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Didn\'t get a query string"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" filename "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("match")]),t._v(" args"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("next")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" arg"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            None "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Err")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Didn\'t get a file name"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" case_sensitive "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" env"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("var")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"CASE_INSENSITIVE"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("is_err")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token function"}},[t._v("Ok")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Config "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" query"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filename"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" case_sensitive "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 13-27：修改 "),s("code",[this._v("Config::new")]),this._v(" 的函数体来使用迭代器方法")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("请记住 "),n("code",[t._v("env::args")]),t._v(" 返回值的第一个值是程序的名称。我们希望忽略它并获取下一个值，所以首先调用 "),n("code",[t._v("next")]),t._v(" 并不对返回值做任何操作。之后对希望放入 "),n("code",[t._v("Config")]),t._v(" 中字段 "),n("code",[t._v("query")]),t._v(" 调用 "),n("code",[t._v("next")]),t._v("。如果 "),n("code",[t._v("next")]),t._v(" 返回 "),n("code",[t._v("Some")]),t._v("，使用 "),n("code",[t._v("match")]),t._v(" 来提取其值。如果它返回 "),n("code",[t._v("None")]),t._v("，则意味着没有提供足够的参数并通过 "),n("code",[t._v("Err")]),t._v(" 值提早返回。对 "),n("code",[t._v("filename")]),t._v(" 值进行同样的操作。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"使用迭代器适配器来使代码更简明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用迭代器适配器来使代码更简明","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用迭代器适配器来使代码更简明")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("I/O 项目中其他可以利用迭代器优势的地方位于 "),s("code",[this._v("search")]),this._v(" 函数，示例 13-28 中重现了第十二章结尾示例 12-19 中此函数的定义：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("pub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.contains(query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 13-28：示例 12-19 中 "),s("code",[this._v("search")]),this._v(" 函数的定义")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以通过使用迭代器适配器方法来编写更简明的代码。这也避免了一个可变的中间 "),s("code",[this._v("results")]),this._v(" vector 的使用。函数式编程风格倾向于最小化可变状态的数量来使代码更简洁。去掉可变状态可能会使得将来进行并行搜索的增强变得更容易，因为我们不必管理 "),s("code",[this._v("results")]),this._v(" vector 的并发访问。示例 13-29 展示了该变化：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("pub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\n    contents.lines()\n        .filter(|line| line.contains(query))\n        .collect()\n}\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 13-29：在 "),s("code",[this._v("search")]),this._v(" 函数实现中使用迭代器适配器")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("回忆 "),n("code",[t._v("search")]),t._v(" 函数的目的是返回所有 "),n("code",[t._v("contents")]),t._v(" 中包含 "),n("code",[t._v("query")]),t._v(" 的行。类似于示例 13-19 中的 "),n("code",[t._v("filter")]),t._v(" 例子，可以使用 "),n("code",[t._v("filter")]),t._v(" 适配器只保留 "),n("code",[t._v("line.contains(query)")]),t._v(" 返回 "),n("code",[t._v("true")]),t._v(" 的那些行。接着使用 "),n("code",[t._v("collect")]),t._v(" 将匹配行收集到另一个 vector 中。这样就容易多了！请随意对 "),n("code",[t._v("search_case_insensitive")]),t._v(" 函数做出同样的使用迭代器方法的修改。")])}],!1,null,null,null);a.options.__file="ch13-03-improving-our-io-project.md";s.default=a.exports}}]);