(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{237:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/second-edition/src/ch20-05-sending-requests-via-channels.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch20-05-sending-requests-via-channels.md"),n("OutboundLink")],1),t._v(" "),n("br"),t._v("\ncommit 2e269ff82193fd65df8a87c06561d74b51ac02f7")])]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._m(13),t._v(" "),t._m(14),t._v(" "),n("p",[t._v("如果尝试检查代码，会得到这个错误：")]),t._v(" "),t._m(15),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._m(21),t._v(" "),t._m(22),t._v(" "),n("p",[t._v("通过这些修改，代码可以编译了！我们做到了！")]),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),n("p",[t._v("理论上这段代码应该能够编译。不幸的是，Rust 编译器仍不够完美，会给出如下错误：")]),t._v(" "),t._m(35),t._m(36),t._v(" "),t._m(37),t._v(" "),n("p",[t._v("将来列表 20-20 中的代码应该能够正常工作。Rust 仍在努力改进提升编译器。有很多像你一样的人正在修复这个以及其他问题！当你结束了本书的阅读，我们希望看到你也成为他们中的一员。")]),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),t._m(41),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44),t._v(" "),n("p",[t._v("这是非常狡猾且复杂的手段。无需过分担心他们并不是非常有道理；总有一天，这一切将是毫无必要的。")]),t._v(" "),t._m(45),t._v(" "),t._m(46),t._m(47),t._v(" "),t._m(48),t._v(" "),t._m(49)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"使用通道向线程发送请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用通道向线程发送请求","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用通道向线程发送请求")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("下一个需要解决的问题是（线程中的）闭包完全没有做任何工作。我们一直在绕过获取 "),s("code",[this._v("execute")]),this._v(" 方法中实际期望执行的闭包的问题，不过看起来在创建 "),s("code",[this._v("ThreadPool")]),this._v(" 时就需要知道实际的闭包。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("不过考虑一下真正需要做的：我们希望刚创建的 "),s("code",[this._v("Worker")]),this._v(" 结构体能够从 "),s("code",[this._v("ThreadPool")]),this._v(" 的队列中获取任务，并在线程中执行他们。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在第十六章中，我们学习了通道。通道是一个沟通两个线程的良好手段，对于这个例子来说则是绝佳的。通道将充当任务队列的作用，"),s("code",[this._v("execute")]),this._v(" 将通过 "),s("code",[this._v("ThreadPool")]),this._v(" 向其中线程正在寻找工作的 "),s("code",[this._v("Worker")]),this._v(" 实例发送任务。如下是这个计划：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ol",[n("li",[n("code",[t._v("ThreadPool")]),t._v(" 会创建一个通道并充当发送端。")]),t._v(" "),n("li",[t._v("每个 "),n("code",[t._v("Worker")]),t._v(" 将会充当通道的接收端。")]),t._v(" "),n("li",[t._v("新建一个 "),n("code",[t._v("Job")]),t._v(" 结构体来存放用于向通道中发送的闭包。")]),t._v(" "),n("li",[n("code",[t._v("ThreadPool")]),t._v(" 的 "),n("code",[t._v("execute")]),t._v(" 方法会在发送端发出期望执行的任务。")]),t._v(" "),n("li",[t._v("在线程中，"),n("code",[t._v("Worker")]),t._v(" 会遍历通道的接收端并执行任何接收到的任务。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("让我们以在 "),s("code",[this._v("ThreadPool::new")]),this._v(" 中创建通道并让 "),s("code",[this._v("ThreadPool")]),this._v(" 实例充当发送端开始，如列表 20-16 所示。"),s("code",[this._v("Job")]),this._v(" 是将在通道中发出的类型；目前它是一个没有任何内容的结构体：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// ...snip...")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("sync"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("mpsc"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    workers"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Vec"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Worker"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    sender"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mpsc"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Sender"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Job"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Job"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// ...snip...")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" usize"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("assert!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size "),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sender"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" receiver"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" mpsc"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("channel")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" workers "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Vec"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("with_capacity")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" id "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v("size "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            workers"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("push")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Worker"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            workers"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            sender"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// ...snip...")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     id"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" usize"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("JoinHandle"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" usize"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#         "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" thread "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("spawn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token closure-params"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("|")]),n("span",{attrs:{class:"token punctuation"}},[t._v("|")])]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n#         Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#             id"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#             thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#         "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#     "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("列表 20-16：修改 "),s("code",[this._v("ThreadPool")]),this._v(" 来储存一个发送 "),s("code",[this._v("Job")]),this._v(" 实例的通道发送端")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 "),s("code",[this._v("ThreadPool::new")]),this._v(" 中，新建了一个通道，并接着让线程池在接收端等待。这段代码能够编译，不过仍有警告。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在线程池创建每个 worker 时将通道的接收端传递给他们。须知我们希望在 worker 所分配的线程中使用通道的接收端，所以将在闭包中引用 "),s("code",[this._v("receiver")]),this._v(" 参数。列表 20-17 中展示的代码还不能编译：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("impl ThreadPool {\n    // ...snip...\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let (sender, receiver) = mpsc::channel();\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id, receiver));\n        }\n\n        ThreadPool {\n            workers,\n            sender,\n        }\n    }\n    // ...snip...\n}\n\n// ...snip...\n\nimpl Worker {\n    fn new(id: usize, receiver: mpsc::Receiver<Job>) -> Worker {\n        let thread = thread::spawn(|| {\n            receiver;\n        });\n\n        Worker {\n            id,\n            thread,\n        }\n    }\n}\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("列表 20-17：将通道的接收端传递给 worker")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这是一些小而直观的修改：将通道的接收端传递进了 "),s("code",[this._v("Worker::new")]),this._v("，并接着在闭包中使用他们。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("$ cargo check\n   Compiling hello v0.1.0 (file:///projects/hello)\nerror[E0382]: use of moved value: `receiver`\n  --\x3e src/lib.rs:27:42\n   |\n27 |             workers.push(Worker::new(id, receiver));\n   |                                          ^^^^^^^^ value moved here in\n   previous iteration of loop\n   |\n   = note: move occurs because `receiver` has type\n   `std::sync::mpsc::Receiver<Job>`, which does not implement the `Copy` trait\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这些代码还不能编译的原因如上因为它尝试将 "),n("code",[t._v("receiver")]),t._v(" 传递给多个 "),n("code",[t._v("Worker")]),t._v(" 实例。回忆第十六章，Rust 所提供的通道实现是多"),n("strong",[t._v("生产者")]),t._v("，单"),n("strong",[t._v("消费者")]),t._v("的，所以不能简单的克隆通道的消费端来解决问题。即便可以我们也不希望克隆消费端；在所有的 worker 中共享单一 "),n("code",[t._v("receiver")]),t._v(" 才是我们希望的在线程间分发任务的机制。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("另外，从通道队列中取出任务涉及到修改 "),s("code",[this._v("receiver")]),this._v("，所以这些线程需要一个能安全的共享和修改 "),s("code",[this._v("receiver")]),this._v(" 的方式。如果修改不是线程安全的，则可能遇到竞争状态，例如两个线程因同时在队列中取出相同的任务并执行了相同的工作。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所以回忆一下第十六章讨论的线程安全智能指针，为了在多个线程间共享所有权并允许线程修改其值，需要使用 "),s("code",[this._v("Arc<Mutex<T>>")]),this._v("。"),s("code",[this._v("Arc")]),this._v(" 使得多个 worker 拥有接收端，而 "),s("code",[this._v("Mutex")]),this._v(" 则确保一次只有一个 worker 能从接收端得到任务。列表 20-18 展示了所做的修改：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("sync"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("mpsc"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("sync"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Arc"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("sync"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Mutex"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// ...snip...")]),t._v("\n\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     workers"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Vec"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Worker"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     sender"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mpsc"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Sender"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Job"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Job"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n"),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// ...snip...")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" usize"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("assert!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size "),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sender"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" receiver"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" mpsc"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("channel")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" receiver "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Arc"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Mutex"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("receiver"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" workers "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Vec"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("with_capacity")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" id "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v("size "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            workers"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("push")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Worker"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" receiver"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("clone")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            workers"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            sender"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// ...snip...")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     id"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" usize"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("JoinHandle"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" usize"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" receiver"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Arc"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Mutex"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("mpsc"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Receiver"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Job"),n("span",{attrs:{class:"token operator"}},[t._v(">>")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token comment"}},[t._v("// ...snip...")]),t._v("\n#         "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" thread "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("spawn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token closure-params"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("|")]),n("span",{attrs:{class:"token punctuation"}},[t._v("|")])]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#            receiver"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#         "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n#         Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#             id"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#             thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#         "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("列表 20-18：使用 "),s("code",[this._v("Arc")]),this._v(" 和 "),s("code",[this._v("Mutex")]),this._v(" 在 worker 间共享通道的接收端")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("在 "),n("code",[t._v("ThreadPool::new")]),t._v(" 中，将通道的接收端放入一个 "),n("code",[t._v("Arc")]),t._v(" 和一个 "),n("code",[t._v("Mutex")]),t._v(" 中。对于每一个新 worker，则克隆 "),n("code",[t._v("Arc")]),t._v(" 来增加引用计数，如此这些 worker 就可以共享接收端的所有权了。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("最好让我们实现 "),n("code",[t._v("ThreadPool")]),t._v(" 上的 "),n("code",[t._v("execute")]),t._v(" 方法。同时也要修改 "),n("code",[t._v("Job")]),t._v(" 结构体：它将不再是结构体，"),n("code",[t._v("Job")]),t._v(" 将是一个有着 "),n("code",[t._v("execute")]),t._v(" 接收到的闭包类型的 trait 对象的类型别名。我们讨论过类型别名如何将长的类型变短，现在就这种情况！看一看列表 20-19：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// ...snip...")]),t._v("\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     workers"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Vec"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Worker"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     sender"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mpsc"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Sender"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Job"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("sync"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("mpsc"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Job "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Box"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),n("span",{attrs:{class:"token function"}},[t._v("FnOnce")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" Send "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'static")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// ...snip...")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" execute"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("F"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" F"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("where")]),t._v("\n            F"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("FnOnce")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" Send "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'static")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" job "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Box"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sender"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("send")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("job"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// ...snip...")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("列表 20-19：为存放每一个闭包的 "),s("code",[this._v("Box")]),this._v(" 创建一个 "),s("code",[this._v("Job")]),this._v(" 类型别名，接着在通道中发出")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("在使用 "),n("code",[t._v("execute")]),t._v(" 得到的闭包新建 "),n("code",[t._v("Job")]),t._v(" 实例之后，将这些任务从通道的发送端发出。这里调用 "),n("code",[t._v("send")]),t._v(" 上的 "),n("code",[t._v("unwrap")]),t._v("，因为如果接收端停止接收新消息则发送可能会失败，这可能发生于我们停止了所有的执行线程。不过目前这是不可能的，因为只要线程池存在他们就会一直执行。使用 "),n("code",[t._v("unwrap")]),t._v(" 是因为我们知道失败不可能发生，即便编译器不这么认为，正如第九章讨论的这是 "),n("code",[t._v("unwrap")]),t._v(" 的一个恰当用法。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那我们结束了吗？不完全是！在 worker 中，传递给 "),s("code",[this._v("thread::spawn")]),this._v(" 的闭包仍然还只是"),s("strong",[this._v("引用")]),this._v("了通道的接收端。但是我们需要闭包一直循环，向通道的接收端请求任务，并在得到任务时执行他们。如列表 20-20 对 "),s("code",[this._v("Worker::new")]),this._v(" 做出修改：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// ...snip...")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" usize"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" receiver"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Arc"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Mutex"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("mpsc"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Receiver"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Job"),n("span",{attrs:{class:"token operator"}},[t._v(">>")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" thread "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("spawn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("move")]),t._v(" "),n("span",{attrs:{class:"token closure-params"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("|")]),n("span",{attrs:{class:"token punctuation"}},[t._v("|")])]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{attrs:{class:"token keyword"}},[t._v("loop")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" job "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" receiver"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("lock")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("recv")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Worker {} got a job; executing."')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" id"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("job"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            id"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("列表 20-20： 在 worker 线程中接收并执行任务")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这里，首先在 "),n("code",[t._v("receiver")]),t._v(" 上调用了 "),n("code",[t._v("lock")]),t._v(" 来获取互斥器，接着 "),n("code",[t._v("unwrap")]),t._v(" 在出现任何错误时 panic。如果互斥器处于一种叫做"),n("strong",[t._v("被污染")]),t._v("（"),n("em",[t._v("poisoned")]),t._v("）的状态时获取锁肯能会失败，这可能发生于其他线程在持有锁时 panic 了并没有释放锁。如果当前线程因为这个原因不能得到所，调用 "),n("code",[t._v("unwrap")]),t._v(" 使其 panic 也是正确的行为。如果你觉得有意义的话请随意将 "),n("code",[t._v("unwrap")]),t._v(" 改为带有错误信息的 "),n("code",[t._v("expect")]),t._v("。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("如果锁定了互斥器，接着调用 "),n("code",[t._v("recv")]),t._v(" 从通道中接收 "),n("code",[t._v("Job")]),t._v("。最后的 "),n("code",[t._v("unwrap")]),t._v(" 也绕过了一些错误，"),n("code",[t._v("recv")]),t._v(" 在通道的发送端关闭时会返回 "),n("code",[t._v("Err")]),t._v("，类似于 "),n("code",[t._v("send")]),t._v(" 在接收端关闭时返回 "),n("code",[t._v("Err")]),t._v(" 一样。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("调用 "),s("code",[this._v("recv")]),this._v(" 的代码块；也就是说，它还没有任务，这个线程会等待直到有可用的任务。"),s("code",[this._v("Mutex<T>")]),this._v(" 确保一次只有一个 "),s("code",[this._v("Worker")]),this._v(" 线程尝试请求任务。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("error[E0161]: cannot move a value of type std::ops::FnOnce() +\nstd::marker::Send: the size of std::ops::FnOnce() + std::marker::Send cannot be\nstatically determined\n  --\x3e src/lib.rs:63:17\n   |\n63 |                 (*job)();\n   |                 ^^^^^^\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这个错误非常的神秘，因为这个问题本身就很神秘。为了调用储存在 "),n("code",[t._v("Box<T>")]),t._v(" （这正是 "),n("code",[t._v("Job")]),t._v(" 别名的类型）中的 "),n("code",[t._v("FnOnce")]),t._v(" 闭包，该闭包需要能将自己移动出 "),n("code",[t._v("Box<T>")]),t._v("，因为当调用这个闭包时，它获取 "),n("code",[t._v("self")]),t._v(" 的所有权。通常来说，将值移动出 "),n("code",[t._v("Box<T>")]),t._v(" 是不被允许的，因为 Rust 不知道 "),n("code",[t._v("Box<T>")]),t._v(" 中的值将会有多大；回忆第十五章能够正常使用 "),n("code",[t._v("Box<T>")]),t._v(" 是因为我们将未知大小的值储存进 "),n("code",[t._v("Box<T>")]),t._v(" 从而得到已知大小的值。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("第十七章曾见过，列表 17-15 中有使用了 "),n("code",[t._v("self: Box<Self>")]),t._v(" 语法的方法，它获取了储存在 "),n("code",[t._v("Box<T>")]),t._v(" 中的 "),n("code",[t._v("Self")]),t._v(" 值的所有权。这正是我们希望做的，然而不幸的是 Rust 调用闭包的那部分实现并没有使用 "),n("code",[t._v("self: Box<Self>")]),t._v("。所以这里 Rust 也不知道它可以使用 "),n("code",[t._v("self: Box<Self>")]),t._v(" 来获取闭包的所有权并将闭包移动出 "),n("code",[t._v("Box<T>")]),t._v("。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("不过目前让我们绕过这个问题。所幸有一个技巧可以显式的告诉 Rust 我们处于可以获取使用 "),n("code",[t._v("self: Box<Self>")]),t._v(" 的 "),n("code",[t._v("Box<T>")]),t._v(" 中值的所有权的状态，而一旦获取了闭包的所有权就可以调用它了。这涉及到定义一个新 trait，它带有一个在签名中使用 "),n("code",[t._v("self: Box<Self>")]),t._v(" 的方法 "),n("code",[t._v("call_box")]),t._v("，为任何实现了 "),n("code",[t._v("FnOnce()")]),t._v(" 的类型定义这个 trait，修改类型别名来使用这个新 trait，并修改 "),n("code",[t._v("Worker")]),t._v(" 使用 "),n("code",[t._v("call_box")]),t._v(" 方法。这些修改如列表 20-21 所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" FnBox "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("call_box")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Box"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Self"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("F"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("FnOnce")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" FnBox "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" F "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("call_box")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Box"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("F"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("*")]),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Job "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Box"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("FnBox "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" Send "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'static")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// ...snip...")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" usize"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" receiver"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Arc"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Mutex"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("mpsc"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Receiver"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Job"),n("span",{attrs:{class:"token operator"}},[t._v(">>")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" thread "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("spawn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("move")]),t._v(" "),n("span",{attrs:{class:"token closure-params"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("|")]),n("span",{attrs:{class:"token punctuation"}},[t._v("|")])]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{attrs:{class:"token keyword"}},[t._v("loop")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" job "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" receiver"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("lock")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("recv")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Worker {} got a job; executing."')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" id"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                job"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("call_box")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            id"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("列表 20-21：新增一个 trait "),s("code",[this._v("FnBox")]),this._v(" 来绕过当前 "),s("code",[this._v("Box<FnOnce()>")]),this._v(" 的限制")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("首先，新建了一个叫做 "),n("code",[t._v("FnBox")]),t._v(" 的 trait。这个 trait 有一个方法 "),n("code",[t._v("call_box")]),t._v("，它类似于其他 "),n("code",[t._v("Fn*")]),t._v(" trait 中的 "),n("code",[t._v("call")]),t._v(" 方法，除了它获取 "),n("code",[t._v("self: Box<Self>")]),t._v(" 以便获取 "),n("code",[t._v("self")]),t._v(" 的所有权并将值从 "),n("code",[t._v("Box<T>")]),t._v(" 中移动出来。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("现在我们希望 "),n("code",[t._v("Job")]),t._v(" 类型别名是任何实现了新 trait "),n("code",[t._v("FnBox")]),t._v(" 的 "),n("code",[t._v("Box")]),t._v("，而不是 "),n("code",[t._v("FnOnce()")]),t._v("。这允许我们在得到 "),n("code",[t._v("Job")]),t._v(" 值时使用 "),n("code",[t._v("Worker")]),t._v(" 中的 "),n("code",[t._v("call_box")]),t._v("。因为我们为任何 "),n("code",[t._v("FnOnce()")]),t._v(" 闭包都实现了 "),n("code",[t._v("FnBox")]),t._v(" trait，无需对实际在通道中发出的值做任何修改。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后，对于 "),s("code",[this._v("Worker::new")]),this._v(" 的线程中所运行的闭包，调用 "),s("code",[this._v("call_box")]),this._v(" 而不是直接执行闭包。现在 Rust 就能够理解我们的行为是正确的了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("通过这些技巧，线程池处于可以运行的状态了！执行 "),s("code",[this._v("cargo run")]),this._v(" 并发起一些请求：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("$ cargo run\n   Compiling hello v0.1.0 (file:///projects/hello)\nwarning: field is never used: `workers`\n --\x3e src/lib.rs:7:5\n  |\n7 |     workers: Vec<Worker>,\n  |     ^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: #[warn(dead_code)] on by default\n\nwarning: field is never used: `id`\n  --\x3e src/lib.rs:61:5\n   |\n61 |     id: usize,\n   |     ^^^^^^^^^\n   |\n   = note: #[warn(dead_code)] on by default\n\nwarning: field is never used: `thread`\n  --\x3e src/lib.rs:62:5\n   |\n62 |     thread: thread::JoinHandle<()>,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: #[warn(dead_code)] on by default\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.99 secs\n     Running `target/debug/hello`\n     Worker 0 got a job; executing.\nWorker 2 got a job; executing.\nWorker 1 got a job; executing.\nWorker 3 got a job; executing.\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\nWorker 1 got a job; executing.\nWorker 3 got a job; executing.\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("成功了！现在我们有了一个可以异步执行连接的线程池！它绝不会创建超过四个线程，所以当 server 收到大量请求时系统也不会负担过重。如果请求 "),s("code",[this._v("/sleep")]),this._v("，server 也能够通过另外一个线程处理其他请求。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("那么这些警告怎么办呢？难道我们没有使用 "),n("code",[t._v("workers")]),t._v("、"),n("code",[t._v("id")]),t._v(" 和 "),n("code",[t._v("thread")]),t._v(" 字段吗？好吧，目前我们用了所有这些字段存放了一些数据，不过当设置线程池并开始执行代码在通道中向线程发送任务时，我们并没有对数据"),n("strong",[t._v("进行")]),t._v("任何实际的操作。但是如果不存放这些值，他们将会离开作用域：比如，如果不将 "),n("code",[t._v("Vec<Worker>")]),t._v(" 值作为 "),n("code",[t._v("ThreadPool")]),t._v(" 的一部分返回，这个 vector 在 "),n("code",[t._v("ThreadPool::new")]),t._v(" 的结尾就会被清理。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么这些警告有错吗？从某种角度上讲是的，这些警告是错误的，因为我们使用这些字段储存一直需要的数据。从另一种角度来说也不对：使用过后我们也没有做任何操作清理线程池，仅仅通过 "),s("span",{staticClass:"keystroke"},[this._v("ctrl-C")]),this._v(" 来停止程序并让操作系统为我们清理。下面让我们实现 graceful shutdown 来清理所创建的一切。")])}],!1,null,null,null);e.options.__file="ch20-05-sending-requests-via-channels.md";s.default=e.exports}}]);