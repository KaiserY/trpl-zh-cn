(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{238:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/second-edition/src/ch20-04-storing-threads.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch20-04-storing-threads.md"),n("OutboundLink")],1),t._v(" "),n("br"),t._v("\ncommit d06a6a181fd61704cbf7feb55bc61d518c6469f9")])]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),n("p",[t._v("如果代码能够工作就应是如此效果，不过他们还不能工作！如果检查他们，会得到一个错误：")]),t._v(" "),t._m(21),t._m(22),t._v(" "),t._m(23),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),n("p",[t._v("让我们做出如下修改：")]),t._v(" "),t._m(27),t._v(" "),n("p",[t._v("如果你渴望挑战，在查看列表 20-15 中的代码之前尝试自己实现这些修改。")]),t._v(" "),n("p",[t._v("准备好了吗？列表 20-15 就是一个做出了这些修改的例子：")]),t._v(" "),t._m(28),t._v(" "),t._m(29),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"创建线程池并储存线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建线程池并储存线程","aria-hidden":"true"}},[this._v("#")]),this._v(" 创建线程池并储存线程")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("之前的警告是因为在 "),s("code",[this._v("new")]),this._v(" 和 "),s("code",[this._v("execute")]),this._v(" 中没有对参数做任何操作。让我们用期望的实际行为实现他们。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"验证池中的线程数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#验证池中的线程数","aria-hidden":"true"}},[this._v("#")]),this._v(" 验证池中的线程数")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("以考虑 "),n("code",[t._v("new")]),t._v(" 作为开始。之前提到使用无符号类型作为 "),n("code",[t._v("size")]),t._v(" 参数的类型，因为为负的线程数没有意义。然而，零个线程同样没有意义，不过零是一个完全有效的 "),n("code",[t._v("u32")]),t._v(" 值。让我们在返回 "),n("code",[t._v("ThreadPool")]),t._v(" 之前检查 "),n("code",[t._v("size")]),t._v("  是否大于零，并使用 "),n("code",[t._v("assert!")]),t._v(" 宏在得到零时 panic，如列表 20-13 所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" ThreadPool"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/// Create a new ThreadPool.")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("///")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/// The size is the number of threads in the pool.")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("///")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/// # Panics")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("///")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/// The `new` function will panic if the size is zero.")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" u32"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("assert!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size "),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        ThreadPool\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// ...snip...")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("列表 20-13：实现 "),s("code",[this._v("ThreadPool::new")]),this._v(" 在 "),s("code",[this._v("size")]),this._v(" 为零时 panic")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("趁着这个机会我们用文档注释为 "),n("code",[t._v("ThreadPool")]),t._v(" 增加了一些文档。注意这里遵循了良好的文档实践并增加了一个部分提示函数会 panic 的情况，正如第十四章所讨论的。尝试运行 "),n("code",[t._v("cargo doc --open")]),t._v(" 并点击 "),n("code",[t._v("ThreadPool")]),t._v(" 结构体来查看生成的 "),n("code",[t._v("new")]),t._v(" 的文档看起来如何！")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("相比像这里使用 "),n("code",[t._v("assert!")]),t._v(" 宏，也可以让 "),n("code",[t._v("new")]),t._v(" 像之前 I/O 项目中列表 12-9 中 "),n("code",[t._v("Config::new")]),t._v(" 那样返回一个 "),n("code",[t._v("Result")]),t._v("，不过在这里我们选择创建一个没有任何线程的线程池应该是要给不可恢复的错误。如果你想做的更好，尝试编写一个采用如下签名的 "),n("code",[t._v("new")]),t._v(" 版本来感受一下两者的区别：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" u32"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Result"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("ThreadPool"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" PoolCreationError"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"在线程池中储存线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在线程池中储存线程","aria-hidden":"true"}},[this._v("#")]),this._v(" 在线程池中储存线程")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在有了一个有效的线程池线程数，就可以实际创建这些线程并在返回之前将他们储存在 "),s("code",[this._v("ThreadPool")]),this._v(" 结构体中。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这引出了另一个问题：如何“储存”一个线程？让我们再看看 "),s("code",[this._v("thread::spawn")]),this._v(" 的签名：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" spawn"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("F"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" F"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" JoinHandle"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("where")]),t._v("\n        F"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("FnOnce")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" T "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" Send "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'static,")]),t._v("\n        T"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Send "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'static")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("spawn")]),t._v(" 返回 "),n("code",[t._v("JoinHandle<T>")]),t._v("，其中 "),n("code",[t._v("T")]),t._v(" 是闭包返回的类型。尝试使用 "),n("code",[t._v("JoinHandle")]),t._v(" 来看看会发生什么。在我们的情况中，传递给线程池的闭包会处理连接并不返回任何值，所以 "),n("code",[t._v("T")]),t._v(" 将会是单元类型 "),n("code",[t._v("()")]),t._v("。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这还不能编译，不过考虑一下列表 20-14 所示的代码。我们改变了 "),n("code",[t._v("ThreadPool")]),t._v(" 的定义来存放一个 "),n("code",[t._v("thread::JoinHandle<()>")]),t._v(" 的 vector 实例，使用 "),n("code",[t._v("size")]),t._v(" 容量来初始化，并设置一个 "),n("code",[t._v("for")]),t._v(" 循环了来运行创建线程的代码，并返回包含这些线程的 "),n("code",[t._v("ThreadPool")]),t._v(" 实例：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("use std::thread;\n\npub struct ThreadPool {\n    threads: Vec<thread::JoinHandle<()>>,\n}\n\nimpl ThreadPool {\n    // ...snip...\n    pub fn new(size: u32) -> ThreadPool {\n        assert!(size > 0);\n\n        let mut threads = Vec::with_capacity(size);\n\n        for _ in 0..size {\n            // create some threads and store them in the vector\n        }\n\n        ThreadPool {\n            threads\n        }\n    }\n\n    // ...snip...\n}\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("列表 20-14：为 "),s("code",[this._v("ThreadPool")]),this._v(" 创建一个 vector 来存放线程")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里将 "),s("code",[this._v("std::thread")]),this._v(" 引入库 crate 的作用域，因为使用了 "),s("code",[this._v("thread::JoinHandle")]),this._v(" 作为 "),s("code",[this._v("ThreadPool")]),this._v(" 中 vector 元素的类型。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("在得到了有效的数量之后，就可以新建一个存放 "),n("code",[t._v("size")]),t._v(" 个元素的 vector。本书还未使用过 "),n("code",[t._v("with_capacity")]),t._v("；它与 "),n("code",[t._v("Vec::new")]),t._v(" 做了同样的工作，不过有一个重要的区别：它为 vector 预先分配空间。因为已经知道了 vector 中需要 "),n("code",[t._v("size")]),t._v(" 个元素，预先进行分配比仅仅 "),n("code",[t._v("Vec::new")]),t._v(" 要稍微有效率一些，因为 "),n("code",[t._v("Vec::new")]),t._v(" 随着插入元素而重新改变大小。因为一开始就用所需的确定大小来创建 vector，为其增减元素时不会改变底层 vector 的大小。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("$ cargo check\n   Compiling hello v0.1.0 (file:///projects/hello)\nerror[E0308]: mismatched types\n  --\x3e src\\main.rs:70:46\n   |\n70 |         let mut threads = Vec::with_capacity(size);\n   |                                              ^^^^ expected usize, found u32\n\nerror: aborting due to previous error\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("size")]),t._v(" 是 "),n("code",[t._v("u32")]),t._v("，不过 "),n("code",[t._v("Vec::with_capacity")]),t._v(" 需要一个 "),n("code",[t._v("usize")]),t._v("。这里有两个选择：可以改变函数签名，或者可以将 "),n("code",[t._v("u32")]),t._v(" 转换为 "),n("code",[t._v("usize")]),t._v("。如果你还记得定义 "),n("code",[t._v("new")]),t._v(" 时，并没有仔细考虑有意义的数值类型，只是随便选了一个。现在来进行一些思考吧。考虑到 "),n("code",[t._v("size")]),t._v(" 是 vector 的长度，"),n("code",[t._v("usize")]),t._v(" 就很有道理了。甚至他们的名字都很类似！改变 "),n("code",[t._v("new")]),t._v(" 的签名，这会使列表 20-14 的代码能够编译：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" usize"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果再次运行 "),s("code",[this._v("cargo check")]),this._v("，会得到一些警告，不过应该能成功编译。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("列表 20-14 的 "),s("code",[this._v("for")]),this._v(" 循环中留下了一个关于创建线程的注释。如何实际创建线程呢？这是一个难题。这些线程应该做什么呢？这里并不知道他们需要做什么，因为 "),s("code",[this._v("execute")]),this._v(" 方法获取闭包并传递给了线程池。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("让我们稍微重构一下：不再储存一个 "),n("code",[t._v("JoinHandle<()>")]),t._v(" 实例的 vector，将创建一下新的结构体来代表 "),n("em",[t._v("worker")]),t._v(" 的概念。worker 会接收 "),n("code",[t._v("execute")]),t._v(" 方法，并会处理实际的闭包调用。另外储存固定 "),n("code",[t._v("size")]),t._v(" 数量的还不知道将要执行什么闭包的 "),n("code",[t._v("Worker")]),t._v(" 实例，也可以为每一个 worker 设置一个 "),n("code",[t._v("id")]),t._v("，这样就可以在日志和调试中区别线程池中的不同 worker。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ol",[n("li",[t._v("定义 "),n("code",[t._v("Worker")]),t._v(" 结构体存放 "),n("code",[t._v("id")]),t._v(" 和 "),n("code",[t._v("JoinHandle<()>")])]),t._v(" "),n("li",[t._v("修改 "),n("code",[t._v("ThreadPool")]),t._v(" 存放一个 "),n("code",[t._v("Worker")]),t._v(" 实例的 vector")]),t._v(" "),n("li",[t._v("定义 "),n("code",[t._v("Worker::new")]),t._v(" 函数，它获取一个 "),n("code",[t._v("id")]),t._v(" 数字并返回一个带有 "),n("code",[t._v("id")]),t._v(" 和用空闭包分配的线程的 "),n("code",[t._v("Worker")]),t._v(" 实例，之后会修复这些")]),t._v(" "),n("li",[t._v("在 "),n("code",[t._v("ThreadPool::new")]),t._v(" 中，使用 "),n("code",[t._v("for")]),t._v(" 循环来计数生成 "),n("code",[t._v("id")]),t._v("，使用这个 "),n("code",[t._v("id")]),t._v(" 新建 "),n("code",[t._v("Worker")]),t._v("，并储存进 vector 中")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    workers"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Vec"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Worker"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// ...snip...")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" usize"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("assert!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size "),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" workers "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Vec"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("with_capacity")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" id "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v("size "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            workers"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("push")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Worker"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            workers\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// ...snip...")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    id"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" usize"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("JoinHandle"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" usize"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" thread "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("spawn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token closure-params"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("|")]),n("span",{attrs:{class:"token punctuation"}},[t._v("|")])]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            id"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("列表 20-15：修改 "),s("code",[this._v("ThreadPool")]),this._v(" 存放 "),s("code",[this._v("Worker")]),this._v(" 实例而不是直接存放线程")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这里选择将 "),n("code",[t._v("ThreadPool")]),t._v(" 中字段名从 "),n("code",[t._v("threads")]),t._v(" 改为 "),n("code",[t._v("workers")]),t._v("，因为我们改变了存放内容为 "),n("code",[t._v("Worker")]),t._v(" 而不是 "),n("code",[t._v("JoinHandle<()>")]),t._v("。使用 "),n("code",[t._v("for")]),t._v(" 循环中的计数作为 "),n("code",[t._v("Worker::new")]),t._v(" 的参数，并将每一个新建的 "),n("code",[t._v("Worker")]),t._v(" 储存在叫做 "),n("code",[t._v("workers")]),t._v(" 的 vector 中。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("Worker")]),t._v(" 结构体和其 "),n("code",[t._v("new")]),t._v(" 函数是私有的，因为外部代码（比如 "),n("em",[t._v("src/bin/main.rs")]),t._v(" 中的 server）并不需要 "),n("code",[t._v("ThreadPool")]),t._v(" 中使用 "),n("code",[t._v("Worker")]),t._v(" 结构体的实现细节。"),n("code",[t._v("Worker::new")]),t._v(" 函数使用 "),n("code",[t._v("id")]),t._v(" 参数并储存了使用一个空闭包创建的 "),n("code",[t._v("JoinHandle<()>")]),t._v("。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这段代码能够编译并用指定给 "),n("code",[t._v("ThreadPool::new")]),t._v(" 的参数创建储存了一系列的 "),n("code",[t._v("Worker")]),t._v(" 实例，不过"),n("strong",[t._v("仍然")]),t._v("没有处理 "),n("code",[t._v("execute")]),t._v(" 中得到的闭包。让我们聊聊接下来怎么做。")])}],!1,null,null,null);e.options.__file="ch20-04-storing-threads.md";s.default=e.exports}}]);