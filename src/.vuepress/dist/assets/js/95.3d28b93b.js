(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{175:function(t,e,s){"use strict";s.r(e);var n=s(0),a=Object(n.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/second-edition/src/ch18-02-refutability.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch18-02-refutability.md"),s("OutboundLink")],1),t._v(" "),s("br"),t._v("\ncommit 267f442fa1c637eab07b4eebb64a6dcd2c943a36")])]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),s("p",[t._v("通常无需担心可反驳和不可反驳模式的区别，不过确实需要熟悉可反驳性的概念，这样当在错误信息中看到时就知道如何应对。遇到这些情况，根据代码行为的意图，需要修改模式或者使用模式的结构。")]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._m(17),t._v(" "),s("p",[t._v("目前我们已经讨论了所有可以使用模式的地方, 以及可反驳模式与不可反驳模式的区别，下面让我们一起去把可以用来创建模式的语法过目一遍吧。")])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"refutability（可反驳性）-模式是否会匹配失效"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#refutability（可反驳性）-模式是否会匹配失效","aria-hidden":"true"}},[this._v("#")]),this._v(" Refutability（可反驳性）: 模式是否会匹配失效")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("模式有两种形式：refutable（可反驳的）和 irrefutable（不可反驳的）。能匹配任何传递的可能值的模式被称为是 "),s("strong",[t._v("不可反驳的")]),t._v("（"),s("em",[t._v("irrefutable")]),t._v("）。一个例子就是 "),s("code",[t._v("let x = 5;")]),t._v(" 语句中的 "),s("code",[t._v("x")]),t._v("，因为 "),s("code",[t._v("x")]),t._v(" 可以匹配任何值所以不可能会失败。对某些可能的值进行匹配会失败的模式被称为是 "),s("strong",[t._v("可反驳的")]),t._v("（"),s("em",[t._v("refutable")]),t._v("）。一个这样的例子便是 "),s("code",[t._v("if let Some(x) = a_value")]),t._v(" 表达式中的 "),s("code",[t._v("Some(x)")]),t._v("；如果变量 "),s("code",[t._v("a_value")]),t._v(" 中的值是 "),s("code",[t._v("None")]),t._v(" 而不是 "),s("code",[t._v("Some")]),t._v("，那么 "),s("code",[t._v("Some(x)")]),t._v(" 模式不能匹配。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[s("code",[t._v("let")]),t._v(" 语句、 函数参数和 "),s("code",[t._v("for")]),t._v(" 循环只能接受不可反驳的模式，因为通过不匹配的值程序无法进行有意义的工作。"),s("code",[t._v("if let")]),t._v(" 和 "),s("code",[t._v("while let")]),t._v(" 表达式被限制为只能接受可反驳的模式，因为根据定义他们意在处理可能的失败 ———— 条件表达式的功能就是根据成功或失败执行不同的操作。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("让我们看看一个尝试在 Rust 要求不可反驳模式的地方使用可反驳模式以及相反情况的例子。在示例 18-8 中，有一个 "),e("code",[this._v("let")]),this._v(" 语句，不过模式被指定为可反驳模式 "),e("code",[this._v("Some(x)")]),this._v("。如你所见，这会出现错误：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-rust,ignore extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("let Some(x) = some_option_value;\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("span",{staticClass:"caption"},[this._v("示例 18-8: 尝试在 "),e("code",[this._v("let")]),this._v(" 中使用可反驳模式")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("如果 "),s("code",[t._v("some_option_value")]),t._v(" 的值是 "),s("code",[t._v("None")]),t._v("，其不会成功匹配模式 "),s("code",[t._v("Some(x)")]),t._v("，表明这个模式是可反驳的。然而 "),s("code",[t._v("let")]),t._v(" 语句只能接受不可反驳模式因为代码不能通过 "),s("code",[t._v("None")]),t._v(" 值进行有效的操作。Rust 会在编译时抱怨我们尝试在要求不可反驳模式的地方使用可反驳模式：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("error[E0005]: refutable pattern in local binding: `None` not covered\n --\x3e <anon>:3:5\n  |\n3 | let Some(x) = some_option_value;\n  |     ^^^^^^^ pattern `None` not covered\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("因为我们没有（也不可能）覆盖到模式 "),e("code",[this._v("Some(x)")]),this._v(" 的每一个可能的值, 所以 Rust 会合理的抗议.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("为了修复在需要不可反驳模式的地方使用可反驳模式的情况，可以修改使用模式的代码：不同于使用 "),e("code",[this._v("let")]),this._v("，可以使用 "),e("code",[this._v("if let")]),this._v("。如此，如果模式不匹配，大括号中的代码将被忽略，其余代码保持有效。示例 18-9 展示了如何修复示例 18-8 中的代码。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[t._v("# "),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" some_option_value"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Option"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("i32"),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" None"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("Some")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" some_option_value "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token function"}},[t._v("println!")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"{}"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("span",{staticClass:"caption"},[this._v("示例 18-9: 使用 "),e("code",[this._v("if let")]),this._v(" 和一个带有可反驳模式的代码块来代替 "),e("code",[this._v("let")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("我们给了代码一个得以继续的出路！这段代码可以完美运行，当让如此意味着我们不能再使用不可反驳模式并免于收到错误。如果为 "),e("code",[this._v("if let")]),this._v(" 提供了一个总是会匹配的模式，比如示例 18-10 中的 "),e("code",[this._v("x")]),this._v("，则会出错：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-rust,ignore extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('if let x = 5 {\n    println!("{}", x);\n};\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("span",{staticClass:"caption"},[this._v("示例 18-10: 尝试把不可反驳模式用到 "),e("code",[this._v("if let")]),this._v(" 上")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Rust 会抱怨将不可反驳模式用于 "),e("code",[this._v("if let")]),this._v(" 是没有意义的：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("error[E0162]: irrefutable if-let pattern\n --\x3e <anon>:2:8\n  |\n2 | if let x = 5 {\n  |        ^ irrefutable pattern\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如此，匹配分支必须使用可反驳模式，除了最后一个分支需要使用能匹配任何剩余值的不可反驳模式。允许将不可反驳模式用于只有一个分支的 "),e("code",[this._v("match")]),this._v("，不过这么做不是特别有用，并可以被更简单的 "),e("code",[this._v("let")]),this._v(" 语句替代。")])}],!1,null,null,null);a.options.__file="ch18-02-refutability.md";e.default=a.exports}}]);