(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{202:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch13-02-iterators.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch13-02-iterators.md"),n("OutboundLink")],1),t._v(" "),n("br"),t._v("\ncommit 1fedfc4b96c2017f64ecfcf41a0a07e2e815f24f")])]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._m(8),t._v(" "),n("p",[t._v("在标准库中没有提供迭代器的语言中，我们可能会使用一个从 0 开始的索引变量，使用这个变量索引 vector 中的值，并循环增加其值直到达到 vector 的元素数量。")]),t._v(" "),n("p",[t._v("迭代器为我们处理了所有这些逻辑，这减少了重复代码并消除了潜在的混乱。另外，迭代器的实现方式提供了对多种不同的序列使用相同逻辑的灵活性，而不仅仅是像 vector 这样可索引的数据结构.让我们看看迭代器是如何做到这些的。")]),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._m(32),t._v(" "),n("p",[t._v("得到的警告是：")]),t._v(" "),t._m(33),n("p",[t._v("示例 13-17 中的代码实际上并没有做任何事；所指定的闭包从未被调用过。警告提醒了我们为什么：迭代器适配器是惰性的，而这里我们需要消费迭代器。")]),t._v(" "),t._m(34),t._v(" "),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),t._m(41),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44),t._m(45),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),t._m(48),t._v(" "),t._m(49),t._v(" "),t._m(50),t._v(" "),t._m(51),t._v(" "),t._m(52),t._v(" "),t._m(53),t._v(" "),t._m(54),t._v(" "),t._m(55),t._m(56),t._v(" "),t._m(57),t._v(" "),t._m(58),t._v(" "),t._m(59),t._v(" "),t._m(60),t._m(61),t._v(" "),t._m(62),t._v(" "),t._m(63),t._v(" "),t._m(64),t._v(" "),t._m(65),t._v(" "),t._m(66),t._v(" "),t._m(67),t._m(68),t._v(" "),t._m(69),t._v(" "),t._m(70),t._v(" "),t._m(71),t._v(" "),t._m(72),t._v(" "),t._m(73),t._v(" "),t._m(74),t._m(75),t._v(" "),t._m(76),t._v(" "),t._m(77)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"使用迭代器处理元素序列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用迭代器处理元素序列","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用迭代器处理元素序列")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("迭代器模式允许你对一个项的序列进行某些处理。"),s("strong",[this._v("迭代器")]),this._v("（"),s("em",[this._v("iterator")]),this._v("）负责遍历序列中的每一项和决定序列何时结束的逻辑。当使用迭代器时，我们无需重新实现这些逻辑。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("在 Rust 中，迭代器是 "),n("strong",[t._v("惰性的")]),t._v("（"),n("em",[t._v("lazy")]),t._v("），这意味着直到调用方法消费迭代器之前它都不会有效果。例如，示例 13-13 中的代码通过调用定义于 "),n("code",[t._v("Vec")]),t._v(" 上的 "),n("code",[t._v("iter")]),t._v(" 方法在一个 vector "),n("code",[t._v("v1")]),t._v(" 上创建了一个迭代器。这段代码本身没有任何用处：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" v1 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("vec!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" v1_iter "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" v1"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("iter")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 13-13：创建一个迭代器")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("一旦创建迭代器之后，可以选择用多种方式利用它。在示例 3-4 中，我们使用迭代器和 "),s("code",[this._v("for")]),this._v(" 循环在每一个项上执行了一些代码，虽然直到现在为止我们一直掩盖了 "),s("code",[this._v("iter")]),this._v(" 调用做了什么。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("示例 13-14 中的例子将迭代器的创建和 "),n("code",[t._v("for")]),t._v(" 循环中的使用分开。迭代器被储存在 "),n("code",[t._v("v1_iter")]),t._v(" 变量中，而这时没有进行迭代。一旦 "),n("code",[t._v("for")]),t._v(" 循环开始使用 "),n("code",[t._v("v1_iter")]),t._v("，接着迭代器中的每一个元素被用于循环的一次迭代，这会打印出其每一个值：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" v1 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("vec!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" v1_iter "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" v1"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("iter")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" val "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" v1_iter "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Got: {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 13-14：在一个 "),s("code",[this._v("for")]),this._v(" 循环中使用迭代器")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"iterator-trait-和-next-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#iterator-trait-和-next-方法","aria-hidden":"true"}},[this._v("#")]),this._v(" "),s("code",[this._v("Iterator")]),this._v(" trait 和 "),s("code",[this._v("next")]),this._v(" 方法")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("迭代器都实现了一个叫做 "),s("code",[this._v("Iterator")]),this._v(" 的定义于标准库的 trait。这个 trait 的定义看起来像这样：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" Iterator "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Item"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("next")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Option"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Self"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Item"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// 此处省略了方法的默认实现")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("注意这里有一下我们还未讲到的新语法："),n("code",[t._v("type Item")]),t._v(" 和 "),n("code",[t._v("Self::Item")]),t._v("，他们定义了 trait 的 "),n("strong",[t._v("关联类型")]),t._v("（"),n("em",[t._v("associated type")]),t._v("）。第十九章会深入讲解关联类型，不过现在只需知道这段代码表明实现 "),n("code",[t._v("Iterator")]),t._v(" trait 要求同时定义一个 "),n("code",[t._v("Item")]),t._v(" 类型，这个 "),n("code",[t._v("Item")]),t._v(" 类型被用作 "),n("code",[t._v("next")]),t._v(" 方法的返回值类型。换句话说，"),n("code",[t._v("Item")]),t._v(" 类型将是迭代器返回元素的类型。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("next")]),t._v(" 是 "),n("code",[t._v("Iterator")]),t._v(" 实现者被要求定义的唯一方法。"),n("code",[t._v("next")]),t._v(" 一次返回迭代器中的一个项，封装在 "),n("code",[t._v("Some")]),t._v(" 中，当迭代器结束时，它返回 "),n("code",[t._v("None")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以直接调用迭代器的 "),s("code",[this._v("next")]),this._v(" 方法；示例 13-15 有一个测试展示了重复调用由 vector 创建的迭代器的 "),s("code",[this._v("next")]),this._v(" 方法所得到的值：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token attribute attr-name"}},[t._v("#[test]")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("iterator_demonstration")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" v1 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("vec!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" v1_iter "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" v1"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("iter")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token function"}},[t._v("assert_eq!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v1_iter"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("next")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("assert_eq!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v1_iter"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("next")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("assert_eq!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v1_iter"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("next")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("assert_eq!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v1_iter"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("next")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" None"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 13-15：在迭代器上（直接）调用 "),s("code",[this._v("next")]),this._v(" 方法")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("注意 "),n("code",[t._v("v1_iter")]),t._v(" 需要是可变的：在迭代器上调用 "),n("code",[t._v("next")]),t._v(" 方法改变了迭代器中用来记录序列位置的状态。换句话说，代码 "),n("strong",[t._v("消费")]),t._v("（consume）了，或使用了迭代器。每一个 "),n("code",[t._v("next")]),t._v(" 调用都会从迭代器中消费一个项。使用 "),n("code",[t._v("for")]),t._v(" 循环时无需使 "),n("code",[t._v("v1_iter")]),t._v(" 可变因为 "),n("code",[t._v("for")]),t._v(" 循环会获取 "),n("code",[t._v("v1_iter")]),t._v(" 的所有权并在后台使 "),n("code",[t._v("v1_iter")]),t._v(" 可变。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("另外需要注意到从 "),n("code",[t._v("next")]),t._v(" 调用中得到的值是 vector 的不可变引用。"),n("code",[t._v("iter")]),t._v(" 方法生成一个不可变引用的迭代器。如果我们需要一个获取 "),n("code",[t._v("v1")]),t._v(" 所有权并返回拥有所有权的迭代器，则可以调用 "),n("code",[t._v("into_iter")]),t._v(" 而不是 "),n("code",[t._v("iter")]),t._v("。类似的，如果我们希望迭代可变引用，则可以调用 "),n("code",[t._v("iter_mut")]),t._v(" 而不是 "),n("code",[t._v("iter")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"消费迭代器的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消费迭代器的方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 消费迭代器的方法")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("Iterator")]),t._v(" trait 有一系列不同的由标准库提供默认实现的方法；你可以在 "),n("code",[t._v("Iterator")]),t._v(" trait 的标准库 API 文档中找到所有这些方法。一些方法在其定义中调用了 "),n("code",[t._v("next")]),t._v(" 方法，这也就是为什么在实现 "),n("code",[t._v("Iterator")]),t._v(" trait 时要求实现 "),n("code",[t._v("next")]),t._v(" 方法的原因。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这些调用 "),n("code",[t._v("next")]),t._v(" 方法的方法被称为 "),n("strong",[t._v("消费适配器")]),t._v("（"),n("em",[t._v("consuming adaptors")]),t._v("），因为调用他们会消耗迭代器。一个消费适配器的例子是 "),n("code",[t._v("sum")]),t._v(" 方法。这个方法获取迭代器的所有权并反复调用 "),n("code",[t._v("next")]),t._v(" 来遍历迭代器，因而会消费迭代器。当其遍历每一个项时，它将每一个项加总到一个总和并在迭代完成时返回总和。示例 13-16 有一个展示 "),n("code",[t._v("sum")]),t._v(" 方法使用的测试：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token attribute attr-name"}},[t._v("#[test]")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("iterator_sum")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" v1 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("vec!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" v1_iter "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" v1"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("iter")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" total"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" v1_iter"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("sum")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token function"}},[t._v("assert_eq!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("total"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("6")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 13-16：调用 "),s("code",[this._v("sum")]),this._v(" 方法获取迭代器所有项的总和")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("调用 "),s("code",[this._v("sum")]),this._v(" 之后不再允许使用 "),s("code",[this._v("v1_iter")]),this._v(" 因为调用 "),s("code",[this._v("sum")]),this._v(" 时它会获取迭代器的所有权。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"产生其他迭代器的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#产生其他迭代器的方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 产生其他迭代器的方法")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("Iterator")]),this._v(" trait 中定义了另一类方法，被称为 "),s("strong",[this._v("迭代器适配器")]),this._v("（"),s("em",[this._v("iterator adaptors")]),this._v("），他们允许我们将当前迭代器变为不同类型的迭代器。可以链式调用多个迭代器适配器。不过因为所有的迭代器都是惰性的，必须调用一个消费适配器方法以便获取迭代器适配器调用的结果。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("示例 13-17 展示了一个调用迭代器适配器方法 "),s("code",[this._v("map")]),this._v(" 的例子，该 "),s("code",[this._v("map")]),this._v(" 方法使用闭包来调用每个元素以生成新的迭代器。 这里的闭包创建了一个新的迭代器，对其中 vector 中的每个元素都被加 1。不过这些代码会产生一个警告：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,not_desired_behavior extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("let v1: Vec<i32> = vec![1, 2, 3];\n\nv1.iter().map(|x| x + 1);\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 13-17：调用迭代器适配器 "),s("code",[this._v("map")]),this._v(" 来创建一个新迭代器")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("warning: unused `std::iter::Map` which must be used: iterator adaptors are lazy\nand do nothing unless consumed\n --\x3e src/main.rs:4:5\n  |\n4 |     v1.iter().map(|x| x + 1);\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: #[warn(unused_must_use)] on by default\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("为了修复这个警告并消费迭代器获取有用的结果，我们将使用第十二章简要讲到的 "),s("code",[this._v("collect")]),this._v(" 方法。这个方法消费迭代器并将结果收集到一个数据结构中。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在示例 13-18 中，我们将遍历由 "),s("code",[this._v("map")]),this._v(" 调用生成的迭代器的结果收集到一个 vector 中，它将会含有原始 vector 中每个元素加 1 的结果：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" v1"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Vec"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("i32"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("vec!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" v2"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Vec"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("_"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" v1"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("iter")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("map")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v("x"),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" x "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("collect")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token function"}},[t._v("assert_eq!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v2"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("vec!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("4")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 13-18：调用 "),s("code",[this._v("map")]),this._v(" 方法创建一个新迭代器，接着调用 "),s("code",[this._v("collect")]),this._v(" 方法消费新迭代器并创建一个 vector")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("因为 "),s("code",[this._v("map")]),this._v(" 获取一个闭包，可以指定任何希望在遍历的每个元素上执行的操作。这是一个展示如何使用闭包来自定义行为同时又复用 "),s("code",[this._v("Iterator")]),this._v(" trait 提供的迭代行为的绝佳例子。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"使用闭包获取环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用闭包获取环境","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用闭包获取环境")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("现在我们介绍了迭代器，让我们展示一个通过使用 "),n("code",[t._v("filter")]),t._v(" 迭代器适配器和捕获环境的闭包的常规用例。迭代器的 "),n("code",[t._v("filter")]),t._v(" 方法获取一个使用迭代器的每一个项并返回布尔值的闭包。如果闭包返回 "),n("code",[t._v("true")]),t._v("，其值将会包含在 "),n("code",[t._v("filter")]),t._v(" 提供的新迭代器中。如果闭包返回 "),n("code",[t._v("false")]),t._v("，其值不会包含在结果迭代器中。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("示例 13-19 展示了使用 "),s("code",[this._v("filter")]),this._v(" 和一个捕获环境中变量 "),s("code",[this._v("shoe_size")]),this._v(" 的闭包，这样闭包就可以遍历一个 "),s("code",[this._v("Shoe")]),this._v(" 结构体集合以便只返回指定大小的鞋子：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token attribute attr-name"}},[t._v("#[derive(PartialEq, Debug)]")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Shoe "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    size"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" u32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    style"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("shoes_in_my_size")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shoes"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Vec"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Shoe"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" shoe_size"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" u32"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Vec"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Shoe"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    shoes"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("into_iter")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("filter")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v("s"),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" s"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("size "),n("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" shoe_size"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("collect")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token attribute attr-name"}},[t._v("#[test]")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("filters_by_size")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" shoes "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("vec!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        Shoe "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" size"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("10")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" style"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"sneaker"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        Shoe "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" size"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("13")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" style"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"sandal"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        Shoe "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" size"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("10")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" style"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"boot"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" in_my_size "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("shoes_in_my_size")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shoes"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("10")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token function"}},[t._v("assert_eq!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        in_my_size"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("vec!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            Shoe "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" size"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("10")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" style"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"sneaker"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            Shoe "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" size"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("10")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" style"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"boot"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 13-19：使用 "),s("code",[this._v("filter")]),this._v(" 方法和一个捕获 "),s("code",[this._v("shoe_size")]),this._v(" 的闭包")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("shoes_in_my_size")]),this._v(" 函数获取一个鞋子 vector 的所有权和一个鞋子大小作为参数。它返回一个只包含指定大小鞋子的 vector。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("在 "),n("code",[t._v("shoes_in_my_size")]),t._v(" 函数体中调用了 "),n("code",[t._v("into_iter")]),t._v(" 来创建一个获取 vector 所有权的迭代器。接着调用 "),n("code",[t._v("filter")]),t._v(" 将这个迭代器适配成只含有闭包返回 "),n("code",[t._v("true")]),t._v(" 元素的新迭代器。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("闭包从环境中捕获了 "),s("code",[this._v("shoe_size")]),this._v(" 变量并使用其值与每一只鞋的大小作比较，只保留指定大小的鞋子。最终，调用 "),s("code",[this._v("collect")]),this._v(" 将迭代器适配器返回的值收集进一个 vector 并返回。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这个测试展示当调用 "),s("code",[this._v("shoes_in_my_size")]),this._v(" 时，我们只会得到与指定值相同大小的鞋子。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"实现-iterator-trait-来创建自定义迭代器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现-iterator-trait-来创建自定义迭代器","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现 "),s("code",[this._v("Iterator")]),this._v(" trait 来创建自定义迭代器")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("我们已经展示了可以通过在 vector 上调用 "),n("code",[t._v("iter")]),t._v("、"),n("code",[t._v("into_iter")]),t._v(" 或 "),n("code",[t._v("iter_mut")]),t._v(" 来创建一个迭代器。也可以用标准库中其他的集合类型创建迭代器，比如哈希 map。另外，可以实现 "),n("code",[t._v("Iterator")]),t._v(" trait 来创建任何我们希望的迭代器。正如之前提到的，定义中唯一要求提供的方法就是 "),n("code",[t._v("next")]),t._v(" 方法。一旦定义了它，就可以使用所有其他由 "),n("code",[t._v("Iterator")]),t._v(" trait 提供的拥有默认实现的方法来创建自定义迭代器了！")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("作为展示，让我们创建一个只会从 1 数到 5 的迭代器。首先，创建一个结构体来存放一些值，接着实现 "),s("code",[this._v("Iterator")]),this._v(" trait 将这个结构体放入迭代器中并在此实现中使用其值。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("示例 13-20 有一个 "),s("code",[this._v("Counter")]),this._v(" 结构体定义和一个创建 "),s("code",[this._v("Counter")]),this._v(" 实例的关联函数 "),s("code",[this._v("new")]),this._v("：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Counter "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    count"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" u32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Counter "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Counter "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        Counter "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" count"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("span",{staticClass:"caption"},[t._v("示例 13-20：定义 "),n("code",[t._v("Counter")]),t._v(" 结构体和一个创建 "),n("code",[t._v("count")]),t._v(" 初值为 0 的 "),n("code",[t._v("Counter")]),t._v(" 实例的 "),n("code",[t._v("new")]),t._v(" 函数")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("Counter")]),t._v(" 结构体有一个字段 "),n("code",[t._v("count")]),t._v("。这个字段存放一个 "),n("code",[t._v("u32")]),t._v(" 值，它会记录处理 1 到 5 的迭代过程中的位置。"),n("code",[t._v("count")]),t._v(" 是私有的因为我们希望 "),n("code",[t._v("Counter")]),t._v(" 的实现来管理这个值。"),n("code",[t._v("new")]),t._v(" 函数通过总是从为 0 的 "),n("code",[t._v("count")]),t._v(" 字段开始新实例来确保我们需要的行为。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接下来将为 "),s("code",[this._v("Counter")]),this._v(" 类型实现 "),s("code",[this._v("Iterator")]),this._v(" trait，通过定义 "),s("code",[this._v("next")]),this._v(" 方法来指定使用迭代器时的行为，如示例 13-21 所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Counter "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     count"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" u32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Iterator "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" Counter "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Item "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" u32"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("next")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Option"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Self"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Item"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),n("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("6")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            None\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 13-21：在 "),s("code",[this._v("Counter")]),this._v(" 结构体上实现 "),s("code",[this._v("Iterator")]),this._v(" trait")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里将迭代器的关联类型 "),s("code",[this._v("Item")]),this._v(" 设置为 "),s("code",[this._v("u32")]),this._v("，意味着迭代器会返回 "),s("code",[this._v("u32")]),this._v(" 值集合。再一次，这里仍无需担心关联类型，第十九章会讲到。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("我们希望迭代器对其内部状态加一，这也就是为何将 "),n("code",[t._v("count")]),t._v(" 初始化为 0：我们希望迭代器首先返回 1。如果 "),n("code",[t._v("count")]),t._v(" 值小于 6，"),n("code",[t._v("next")]),t._v(" 会返回封装在 "),n("code",[t._v("Some")]),t._v(" 中的当前值，不过如果 "),n("code",[t._v("count")]),t._v(" 大于或等于 6，迭代器会返回 "),n("code",[t._v("None")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"使用-counter-迭代器的-next-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-counter-迭代器的-next-方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用 "),s("code",[this._v("Counter")]),this._v(" 迭代器的 "),s("code",[this._v("next")]),this._v(" 方法")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("一旦实现了 "),s("code",[this._v("Iterator")]),this._v(" trait，我们就有了一个迭代器！示例 13-22 展示了一个测试用来演示使用 "),s("code",[this._v("Counter")]),this._v(" 结构体的迭代器功能，通过直接调用 "),s("code",[this._v("next")]),this._v(" 方法，正如示例 13-15 中从 vector 创建的迭代器那样：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Counter "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     count"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" u32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Iterator "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" Counter "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),n("span",{attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Item "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" u32"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n#     "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("next")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Option"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Self"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Item"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#         "),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),n("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n#         "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("6")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#             "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n#         "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#             None\n#         "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#     "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),n("span",{attrs:{class:"token attribute attr-name"}},[t._v("#[test]")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("calling_next_directly")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" counter "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Counter"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token function"}},[t._v("assert_eq!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("counter"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("next")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("assert_eq!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("counter"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("next")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("assert_eq!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("counter"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("next")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("assert_eq!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("counter"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("next")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("4")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("assert_eq!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("counter"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("next")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("5")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("assert_eq!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("counter"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("next")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" None"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 13-22：测试 "),s("code",[this._v("next")]),this._v(" 方法实现的功能")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这个测试在 "),s("code",[this._v("counter")]),this._v(" 变量中新建了一个 "),s("code",[this._v("Counter")]),this._v(" 实例并接着反复调用 "),s("code",[this._v("next")]),this._v(" 方法，来验证我们实现的行为符合这个迭代器返回从 1 到 5 的值的预期。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"使用自定义迭代器中其他-iterator-trait-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用自定义迭代器中其他-iterator-trait-方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用自定义迭代器中其他 "),s("code",[this._v("Iterator")]),this._v(" trait 方法")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("通过定义 "),n("code",[t._v("next")]),t._v(" 方法实现 "),n("code",[t._v("Iterator")]),t._v(" trait，我们现在就可以使用任何标准库定义的拥有默认实现的 "),n("code",[t._v("Iterator")]),t._v(" trait 方法了，因为他们都使用了 "),n("code",[t._v("next")]),t._v(" 方法的功能。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("例如，出于某种原因我们希望获取 "),s("code",[this._v("Counter")]),this._v(" 实例产生的值，将这些值与另一个 "),s("code",[this._v("Counter")]),this._v(" 实例在省略了第一个值之后产生的值配对，将每一对值相乘，只保留那些可以被三整除的结果，然后将所有保留的结果相加，这可以如示例 13-23 中的测试这样做：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Counter "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     count"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" u32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Counter "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Counter "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#         Counter "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" count"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#     "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Iterator "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" Counter "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),n("span",{attrs:{class:"token comment"}},[t._v("// Our iterator will produce u32s")]),t._v("\n#     "),n("span",{attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Item "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" u32"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n#     "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("next")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Option"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Self"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Item"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#         "),n("span",{attrs:{class:"token comment"}},[t._v("// increment our count. This is why we started at zero.")]),t._v("\n#         "),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),n("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n#         "),n("span",{attrs:{class:"token comment"}},[t._v("// check to see if we've finished counting or not.")]),t._v("\n#         "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("6")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#             "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n#         "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#             None\n#         "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#     "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),n("span",{attrs:{class:"token attribute attr-name"}},[t._v("#[test]")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("using_other_iterator_trait_methods")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sum"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" u32 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Counter"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("zip")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Counter"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("skip")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                                 "),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("map")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("|")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" a "),n("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" b"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                                 "),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("filter")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v("x"),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" x "),n("span",{attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("3")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                                 "),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("sum")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("assert_eq!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("18")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sum"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 13-23：使用自定义的 "),s("code",[this._v("Counter")]),this._v(" 迭代器的多种方法")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("注意 "),n("code",[t._v("zip")]),t._v(" 只产生四对值；理论上第五对值 "),n("code",[t._v("(5, None)")]),t._v(" 从未被产生，因为 "),n("code",[t._v("zip")]),t._v(" 在任一输入迭代器返回 "),n("code",[t._v("None")]),t._v(" 时也返回 "),n("code",[t._v("None")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所有这些方法调用都是可能的，因为我们指定了 "),s("code",[this._v("next")]),this._v(" 方法如何工作，而标准库则提供了其它调用 "),s("code",[this._v("next")]),this._v(" 的方法的默认实现。")])}],!1,null,null,null);e.options.__file="ch13-02-iterators.md";s.default=e.exports}}]);