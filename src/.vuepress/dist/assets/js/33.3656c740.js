(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{241:function(t,e,n){"use strict";n.r(e);var s=n(0),r=Object(s.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch06-00-enums.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch06-00-enums.md"),n("OutboundLink")],1),t._v(" "),n("br"),t._v("\ncommit 1fedfc4b96c2017f64ecfcf41a0a07e2e815f24f")])]),t._v(" "),t._m(1),t._v(" "),t._m(2)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"枚举和模式匹配"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#枚举和模式匹配","aria-hidden":"true"}},[this._v("#")]),this._v(" 枚举和模式匹配")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("本章介绍 "),n("strong",[t._v("枚举")]),t._v("（"),n("em",[t._v("enumerations")]),t._v("），也被称作 "),n("em",[t._v("enums")]),t._v("。枚举允许你通过列举可能的值来定义一个类型。首先，我们会定义并使用一个枚举来展示它是如何连同数据一起编码信息的。接下来，我们会探索一个特别有用的枚举，叫做 "),n("code",[t._v("Option")]),t._v("，它代表一个值要么是某个值要么什么都不是。然后会讲到在 "),n("code",[t._v("match")]),t._v(" 表达式中用模式匹配，针对不同的枚举值编写相应要执行的代码。最后会介绍 "),n("code",[t._v("if let")]),t._v("，另一个简洁方便处理代码中枚举的结构。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("枚举是一个很多语言都有的功能，不过不同语言中其功能各不相同。Rust 的枚举与 F#、OCaml 和 Haskell 这样的函数式编程语言中的 "),e("strong",[this._v("代数数据类型")]),this._v("（"),e("em",[this._v("algebraic data types")]),this._v("）最为相似。")])}],!1,null,null,null);r.options.__file="ch06-00-enums.md";e.default=r.exports}}]);