(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{216:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch10-03-lifetime-syntax.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch10-03-lifetime-syntax.md"),n("OutboundLink")],1),t._v(" "),n("br"),t._v("\ncommit 1fedfc4b96c2017f64ecfcf41a0a07e2e815f24f")])]),t._v(" "),t._m(1),t._v(" "),n("p",[t._v("生命周期的概念某种程度上说不同于其他语言中类似的工具，毫无疑问这是 Rust 最与众不同的功能。虽然本章不可能涉及到它全部的内容，我们会讲到一些通常你可能会遇到的生命周期语法以便你熟悉这个概念。查看第十九章 “高级生命周期” 部分了解更多的细节。")]),t._v(" "),t._m(2),t._v(" "),n("p",[t._v("生命周期的主要目标是避免悬垂引用，它会导致程序引用了非预期引用的数据。考虑一下示例 10-17 中的程序，它有一个外部作用域和一个内部作用域.")]),t._v(" "),t._m(3),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._m(12),t._v(" "),t._m(13),t._v(" "),n("p",[t._v("让我们看看示例 10-19 中这个并没有产生悬垂引用且可以正确编译的例子：")]),t._v(" "),t._m(14),t._m(15),t._v(" "),t._m(16),t._v(" "),n("p",[t._v("现在我们已经在一个具体的例子中展示了引用的生命周期位于何处，并讨论了 Rust 如何分析生命周期来保证引用总是有效的，接下来让我们聊聊在函数的上下文中参数和返回值的泛型生命周期。")]),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._m(21),t._v(" "),n("p",[t._v("参考之前第四章中的 “字符串 slice 作为参数” 部分中更多关于为什么上面例子中的参数正符合我们期望的讨论。")]),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._m(25),t._v(" "),n("p",[t._v("相应地会出现如下有关生命周期的错误：")]),t._v(" "),t._m(26),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),n("p",[t._v("生命周期注解并不改变任何引用的生命周期的长短。与当函数签名中指定了泛型类型参数后就可以接受任何类型一样，当指定了泛型生命周期后函数也能接受任何生命周期的引用。生命周期注解描述了多个引用生命周期相互的关系，而不影响其生命周期。")]),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),n("p",[t._v("当在函数中使用生命周期注解时，这些注解出现在函数签名中，而不存在于函数体中的任何代码中。这是因为 Rust 能够分析函数中代码而不需要任何协助，不过当函数引用或被函数之外的代码引用时，让 Rust 自身分析出参数或返回值的生命周期几乎是不可能的。这些生命周期在每次函数被调用时都可能不同。这也就是为什么我们需要手动标记生命周期。")]),t._v(" "),t._m(41),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44),t._m(45),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),t._m(48),t._v(" "),t._m(49),t._m(50),t._v(" "),n("p",[t._v("如果尝试编译会出现如下错误：")]),t._v(" "),t._m(51),t._m(52),t._v(" "),t._m(53),t._v(" "),t._m(54),t._v(" "),t._m(55),t._v(" "),t._m(56),t._v(" "),t._m(57),t._v(" "),t._m(58),t._m(59),t._v(" "),t._m(60),t._v(" "),t._m(61),t._v(" "),t._m(62),t._m(63),t._v(" "),t._m(64),t._m(65),t._v(" "),n("p",[t._v("从结果上看，生命周期语法是关于如何联系函数不同参数和返回值的生命周期的。一旦他们形成了某种联系，Rust 就有了足够的信息来允许内存安全的操作并阻止会产生悬垂指针亦或是违反内存安全的行为。")]),t._v(" "),t._m(66),t._v(" "),t._m(67),t._v(" "),t._m(68),t._v(" "),t._m(69),t._m(70),t._v(" "),t._m(71),t._v(" "),t._m(72),t._v(" "),t._m(73),t._v(" "),n("p",[t._v("在这一部分，我们知道了每一个引用都有一个生命周期，而且需要为使用了引用的函数或结构体指定生命周期。然而，第四章的示例 4-9 中有一个函数，我们在示例 10-26 中再次展示出来，它没有生命周期注解却能成功编译：")]),t._v(" "),t._m(74),t._v(" "),t._m(75),t._m(76),t._v(" "),n("p",[t._v("这个函数没有生命周期注解却能编译是由于一些历史原因：在早期版本（pre-1.0）的 Rust 中，这的确是不能编译的。每一个引用都必须有明确的生命周期。那时的函数签名将会写成这样：")]),t._v(" "),t._m(77),n("p",[t._v("在编写了很多 Rust 代码后，Rust 团队发现在特定情况下 Rust 程序员们总是重复地编写一模一样的生命周期注解。这些场景是可预测的并且遵循几个明确的模式。接着 Rust 团队就把这些模式编码进了 Rust 编译器中，如此借用检查器在这些情况下就能推断出生命周期而不再强制程序员显式的增加注解。")]),t._v(" "),n("p",[t._v("这里我们提到一些 Rust 的历史是因为更多的明确的模式被合并和添加到编译器中是完全可能的。未来只会需要更少的生命周期注解。")]),t._v(" "),t._m(78),t._v(" "),n("p",[t._v("省略规则并不提供完整的推断：如果 Rust 在明确遵守这些规则的前提下变量的生命周期仍然是模棱两可的话，它不会猜测剩余引用的生命周期应该是什么。在这种情况，编译器会给出一个错误，这可以通过增加对应引用之间相联系的生命周期注解来解决。")]),t._v(" "),t._m(79),t._v(" "),n("p",[t._v("编译器采用三条规则来判断引用何时不需要明确的注解。第一条规则适用于输入生命周期，后两条规则适用于输出生命周期。如果编译器检查完这三条规则后仍然存在没有计算出生命周期的引用，编译器将会停止并生成错误。")]),t._v(" "),t._m(80),t._v(" "),t._m(81),t._v(" "),t._m(82),t._v(" "),t._m(83),t._v(" "),t._m(84),t._v(" "),t._m(85),t._m(86),t._v(" "),t._m(87),n("p",[t._v("对于第二条规则，因为这里正好只有一个输入生命周期参数所以是适用的。第二条规则表明输入参数的生命周期将被赋予输出生命周期参数，所以现在签名看起来像这样：")]),t._v(" "),t._m(88),n("p",[t._v("现在这个函数签名中的所有引用都有了生命周期，如此编译器可以继续它的分析而无须程序员标记这个函数签名中的生命周期。")]),t._v(" "),t._m(89),t._v(" "),t._m(90),n("p",[t._v("再次假设我们自己就是编译器并应用第一条规则：每个引用参数都有其自己的生命周期。这次有两个参数，所以就有两个（不同的）生命周期：")]),t._v(" "),t._m(91),t._m(92),t._v(" "),n("p",[t._v("因为第三条规则真正能够适用的就只有方法签名，现在就让我们看看那种情况中的生命周期，并看看为什么这条规则意味着我们经常不需要在方法签名中标注生命周期。")]),t._v(" "),t._m(93),t._v(" "),n("p",[t._v("当为带有生命周期的结构体实现方法时，其语法依然类似示例 10-11 中展示的泛型类型参数的语法。声明和使用生命周期参数的位置依赖于生命周期参数是否同结构体字段或方法参数和返回值相关。")]),t._v(" "),t._m(94),t._v(" "),t._m(95),t._v(" "),t._m(96),t._v(" "),t._m(97),t._m(98),t._v(" "),n("p",[t._v("这里是一个适用于第三条生命周期省略规则的例子：")]),t._v(" "),t._m(99),t._m(100),t._v(" "),t._m(101),t._v(" "),t._m(102),t._v(" "),t._m(103),t._m(104),t._v(" "),t._m(105),t._v(" "),t._m(106),t._v(" "),n("p",[t._v("让我们简要的看一下在同一函数中指定泛型类型参数、trait bounds 和生命周期的语法！")]),t._v(" "),t._m(107),t._m(108),t._v(" "),t._m(109),t._v(" "),n("p",[t._v("这一章介绍了很多的内容！现在你知道了泛型类型参数、trait 和 trait bounds 以及泛型生命周期类型，你已经准备好编写既不重复又能适用于多种场景的代码了。泛型类型参数意味着代码可以适用于不同的类型。trait 和 trait bounds 保证了即使类型是泛型的，这些类型也会拥有所需要的行为。由生命周期注解所指定的引用生命周期之间的关系保证了这些灵活多变的代码不会出现悬垂引用。而所有的这一切发生在编译时所以不会影响运行时效率！")]),t._v(" "),n("p",[t._v("你可能不会相信，这个领域还有更多需要学习的内容：第十七章会讨论 trait 对象，这是另一种使用 trait 的方式。第十九章会涉及到生命周期注解更复杂的场景。第二十章讲解一些高级的类型系统功能。不过接下来，让我们聊聊如何在 Rust 中编写测试，来确保代码的所有功能能像我们希望的那样工作！")])])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"生命周期与引用有效性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生命周期与引用有效性","aria-hidden":"true"}},[this._v("#")]),this._v(" 生命周期与引用有效性")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当在第四章讨论 “引用和借用” 部分时，我们遗漏了一个重要的细节：Rust 中的每一个引用都有其 "),s("strong",[this._v("生命周期")]),this._v("（"),s("em",[this._v("lifetime")]),this._v("），也就是引用保持有效的作用域。大部分时候生命周期是隐含并可以推断的，正如大部分时候类型也是可以推断的一样。类似于当因为有多种可能类型的时候必须注明类型，也会出现引用的生命周期以一些不同方式相关联的情况，所以 Rust 需要我们使用泛型生命周期参数来注明他们的关系，这样就能确保运行时实际使用的引用绝对是有效的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"生命周期避免了悬垂引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生命周期避免了悬垂引用","aria-hidden":"true"}},[this._v("#")]),this._v(" 生命周期避免了悬垂引用")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore,does_not_compile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('{\n    let r;\n\n    {\n        let x = 5;\n        r = &x;\n    }\n\n    println!("r: {}", r);\n}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 10-17：尝试使用离开作用域的值的引用")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("注意：示例 10-17、10-18 和 10-24 中声明了没有初始值的变量，所以这些变量存在于外部作用域。这乍看之下好像和 Rust 不允许存在空值相冲突。然而如果尝试在给它一个值之前使用这个变量，会出现一个编译时错误，这就说明了 Rust 确实不允许空值。")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("外部作用域声明了一个没有初值的变量 "),n("code",[t._v("r")]),t._v("，而内部作用域声明了一个初值为 5 的变量"),n("code",[t._v("x")]),t._v("。在内部作用域中，我们尝试将 "),n("code",[t._v("r")]),t._v(" 的值设置为一个 "),n("code",[t._v("x")]),t._v(" 的引用。接着在内部作用域结束后，尝试打印出 "),n("code",[t._v("r")]),t._v(" 的值。这段代码不能编译因为 "),n("code",[t._v("r")]),t._v(" 引用的值在尝试使用之前就离开了作用域。如下是错误信息：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("error[E0597]: `x` does not live long enough\n  --\x3e src/main.rs:7:5\n   |\n6  |         r = &x;\n   |              - borrow occurs here\n7  |     }\n   |     ^ `x` dropped here while still borrowed\n...\n10 | }\n   | - borrowed value needs to live until here\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("变量 "),n("code",[t._v("x")]),t._v(" 并没有 “存在的足够久”。其原因是 "),n("code",[t._v("x")]),t._v(" 在到达第 7 行内部作用域结束时就离开了作用域。不过 "),n("code",[t._v("r")]),t._v(" 在外部作用域仍是有效的；作用域越大我们就说它 “存在的越久”。如果 Rust 允许这段代码工作，"),n("code",[t._v("r")]),t._v(" 将会引用在 "),n("code",[t._v("x")]),t._v(" 离开作用域时被释放的内存，这时尝试对 "),n("code",[t._v("r")]),t._v(" 做任何操作都不能正常工作。那么 Rust 是如何决定这段代码是不被允许的呢？这得益于借用检查器。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"借用检查器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#借用检查器","aria-hidden":"true"}},[this._v("#")]),this._v(" 借用检查器")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Rust 编译器有一个 "),s("strong",[this._v("借用检查器")]),this._v("（"),s("em",[this._v("borrow checker")]),this._v("），它比较作用域来确保所有的借用都是有效的。示例 10-18 展示了与示例 10-17 相同的例子不过带有变量生命周期的注释：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore,does_not_compile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("{\n    let r;                // ---------+-- 'a\n                          //          |\n    {                     //          |\n        let x = 5;        // -+-- 'b  |\n        r = &x;           //  |       |\n    }                     // -+       |\n                          //          |\n    println!(\"r: {}\", r); //          |\n}                         // ---------+\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("span",{staticClass:"caption"},[t._v("示例 10-18："),n("code",[t._v("r")]),t._v(" 和 "),n("code",[t._v("x")]),t._v(" 的生命周期注解，分别叫做 "),n("code",[t._v("'a")]),t._v(" 和 "),n("code",[t._v("'b")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这里将 "),n("code",[t._v("r")]),t._v(" 的生命周期标记为 "),n("code",[t._v("'a")]),t._v(" 并将 "),n("code",[t._v("x")]),t._v(" 的生命周期标记为 "),n("code",[t._v("'b")]),t._v("。如你所见，内部的 "),n("code",[t._v("'b")]),t._v(" 块要比外部的生命周期 "),n("code",[t._v("'a")]),t._v(" 小得多。在编译时，Rust 比较这两个生命周期的大小，并发现 "),n("code",[t._v("r")]),t._v(" 拥有生命周期 "),n("code",[t._v("'a")]),t._v("，不过它引用了一个拥有生命周期 "),n("code",[t._v("'b")]),t._v(" 的对象。程序被拒绝编译，因为生命周期 "),n("code",[t._v("'b")]),t._v(" 比生命周期 "),n("code",[t._v("'a")]),t._v(" 要小：被引用的对象比它的引用者存在的时间更短。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("5")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            "),n("span",{attrs:{class:"token comment"}},[t._v("// ----------+-- 'b")]),t._v("\n                          "),n("span",{attrs:{class:"token comment"}},[t._v("//           |")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" r "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("x"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),n("span",{attrs:{class:"token comment"}},[t._v("// --+-- 'a  |")]),t._v("\n                          "),n("span",{attrs:{class:"token comment"}},[t._v("//   |       |")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"r: {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("//   |       |")]),t._v("\n                          "),n("span",{attrs:{class:"token comment"}},[t._v("// --+       |")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("                         "),n("span",{attrs:{class:"token comment"}},[t._v("// ----------+")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 10-19：一个有效的引用，因为数据比引用有着更长的生命周期")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这里 "),n("code",[t._v("x")]),t._v(" 拥有生命周期 "),n("code",[t._v("'b")]),t._v("，比 "),n("code",[t._v("'a")]),t._v(" 要大。这就意味着 "),n("code",[t._v("r")]),t._v(" 可以引用 "),n("code",[t._v("x")]),t._v("：Rust 知道 "),n("code",[t._v("r")]),t._v(" 中的引用在 "),n("code",[t._v("x")]),t._v(" 有效的时候也总是有效的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"函数中的泛型生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数中的泛型生命周期","aria-hidden":"true"}},[this._v("#")]),this._v(" 函数中的泛型生命周期")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("让我们来编写一个返回两个字符串 slice 中较长者的函数。这个函数获取两个字符串 slice 并返回一个字符串 slice。一旦我们实现了 "),s("code",[this._v("longest")]),this._v(" 函数，示例 10-20 中的代码应该会打印出 "),s("code",[this._v("The longest string is abcd")]),this._v("：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('fn main() {\n    let string1 = String::from("abcd");\n    let string2 = "xyz";\n\n    let result = longest(string1.as_str(), string2);\n    println!("The longest string is {}", result);\n}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 10-20："),s("code",[this._v("main")]),this._v(" 函数调用 "),s("code",[this._v("longest")]),this._v(" 函数来寻找两个字符串 slice 中较长的一个")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果尝试像示例 10-21 中那样实现 "),s("code",[this._v("longest")]),this._v(" 函数，它并不能编译：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore,does_not_compile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("fn longest(x: &str, y: &str) -> &str {\n    if x.len() > y.len() {\n        x\n    } else {\n        y\n    }\n}\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 10-21：一个 "),s("code",[this._v("longest")]),this._v(" 函数的实现，它返回两个字符串 slice 中较长者，现在还不能编译")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("error[E0106]: missing lifetime specifier\n --\x3e src/main.rs:1:33\n  |\n1 | fn longest(x: &str, y: &str) -> &str {\n  |                                 ^ expected lifetime parameter\n  |\n  = help: this function's return type contains a borrowed value, but the\nsignature does not say whether it is borrowed from `x` or `y`\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("提示文本揭示了返回值需要一个泛型生命周期参数，因为 Rust 并不知道将要返回的引用是指向 "),n("code",[t._v("x")]),t._v(" 或 "),n("code",[t._v("y")]),t._v("。事实上我们也不知道，因为函数体中 "),n("code",[t._v("if")]),t._v(" 块返回一个 "),n("code",[t._v("x")]),t._v(" 的引用而 "),n("code",[t._v("else")]),t._v(" 块返回一个 "),n("code",[t._v("y")]),t._v(" 的引用！")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("当我们定义这个函数的时候，并不知道传递给函数的具体值，所以也不知道到底是 "),n("code",[t._v("if")]),t._v(" 还是 "),n("code",[t._v("else")]),t._v(" 会被执行。我们也不知道传入的引用的具体生命周期，所以也就不能像示例 10-18 和 10-19 那样通过观察作用域来确定返回的引用是否总是有效。借用检查器自身同样也无法确定，因为它不知道 "),n("code",[t._v("x")]),t._v(" 和 "),n("code",[t._v("y")]),t._v(" 的生命周期是如何与返回值的生命周期相关联的。为了修复这个错误，我们将增加泛型生命周期参数来定义引用间的关系以便借用检查器可以进行分析。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"生命周期注解语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生命周期注解语法","aria-hidden":"true"}},[this._v("#")]),this._v(" 生命周期注解语法")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("生命周期注解有着一个不太常见的语法：生命周期参数名称必须以撇号（"),s("code",[this._v("'")]),this._v("）开头，其名称通常全是小写，类似于泛型其名称非常短。"),s("code",[this._v("'a")]),this._v(" 是大多数人默认使用的名称。生命周期参数注解位于引用的 "),s("code",[this._v("&")]),this._v(" 之后，并有一个空格来将引用类型与生命周期注解分隔开。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这里有一些例子：我们有一个没有生命周期参数的 "),n("code",[t._v("i32")]),t._v(" 的引用，一个有叫做 "),n("code",[t._v("'a")]),t._v(" 的生命周期参数的 "),n("code",[t._v("i32")]),t._v(" 的引用，和一个生命周期也是 "),n("code",[t._v("'a")]),t._v(" 的 "),n("code",[t._v("i32")]),t._v(" 的可变引用：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("&i32        // 引用\n&'a i32     // 带有显式生命周期的引用\n&'a mut i32 // 带有显式生命周期的可变引用\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("单个的生命周期注解本身没有多少意义，因为生命周期注解告诉 Rust 多个引用的泛型生命周期参数如何相互联系的。例如如果函数有一个生命周期 "),n("code",[t._v("'a")]),t._v(" 的 "),n("code",[t._v("i32")]),t._v(" 的引用的参数 "),n("code",[t._v("first")]),t._v("。还有另一个同样是生命周期 "),n("code",[t._v("'a")]),t._v(" 的 "),n("code",[t._v("i32")]),t._v(" 的引用的参数 "),n("code",[t._v("second")]),t._v("。这两个生命周期注解意味着引用 "),n("code",[t._v("first")]),t._v(" 和 "),n("code",[t._v("second")]),t._v(" 必须与这泛型生命周期存在得一样久。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"函数签名中的生命周期注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数签名中的生命周期注解","aria-hidden":"true"}},[this._v("#")]),this._v(" 函数签名中的生命周期注解")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在来看看 "),s("code",[this._v("longest")]),this._v(" 函数的上下文中的生命周期。就像泛型类型参数，泛型生命周期参数需要声明在函数名和参数列表间的尖括号中。这里我们想要告诉 Rust 关于参数中的引用和返回值之间的限制是他们都必须拥有相同的生命周期，就像示例 10-22 中在每个引用中都加上了 "),s("code",[this._v("'a")]),this._v(" 那样：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" longest"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),t._v(" str"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),t._v(" str"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),t._v(" str "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("len")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("len")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        x\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        y\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 10-22："),s("code",[this._v("longest")]),this._v(" 函数定义指定了签名中所有的引用必须有相同的生命周期 "),s("code",[this._v("'a")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这段代码能够编译并会产生我们希望得到的示例 10-20 中的 "),s("code",[this._v("main")]),this._v(" 函数的结果。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("现在函数签名表明对于某些生命周期 "),n("code",[t._v("'a")]),t._v("，函数会获取两个参数，他们都是与生命周期 "),n("code",[t._v("'a")]),t._v(" 存在的一样长的字符串 slice。函数会返回一个同样也与生命周期 "),n("code",[t._v("'a")]),t._v(" 存在的一样长的字符串 slice。这就是我们告诉 Rust 需要其保证的契约。记住通过在函数签名中指定生命周期参数时，我们并没有改变任何传入后返回的值的生命周期。而是指出任何不遵守这个协议的传入值都将被借用检查器拒绝。注意 "),n("code",[t._v("longest")]),t._v(" 函数并不需要知道 "),n("code",[t._v("x")]),t._v(" 和 "),n("code",[t._v("y")]),t._v(" 具体会存在多久，而只需要知道有某个可以被 "),n("code",[t._v("'a")]),t._v(" 替代的作用域将会满足这个签名。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("当具体的引用被传递给 "),n("code",[t._v("longest")]),t._v(" 时，被 "),n("code",[t._v("'a")]),t._v(" 所替代的具体生命周期是 "),n("code",[t._v("x")]),t._v(" 的作用域与 "),n("code",[t._v("y")]),t._v(" 的作用域相重叠的那一部分。换一种说法就是泛型生命周期 "),n("code",[t._v("'a")]),t._v(" 的具体生命周期等同于 "),n("code",[t._v("x")]),t._v(" 和 "),n("code",[t._v("y")]),t._v(" 的生命周期中较小的那一个。因为我们用相同的生命周期参数 "),n("code",[t._v("'a")]),t._v(" 标注了返回的引用值，所以返回的引用值就能保证在 "),n("code",[t._v("x")]),t._v(" 和 "),n("code",[t._v("y")]),t._v(" 中较短的那个生命周期结束之前保持有效。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("让我们看看如何通过传递拥有不同具体生命周期的引用来限制 "),s("code",[this._v("longest")]),this._v(" 函数的使用。示例 10-23 是一个很直观的例子。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" longest"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),t._v(" str"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),t._v(" str"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),t._v(" str "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("len")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("len")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#         x\n#     "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#         y\n#     "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" string1 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"long string is long"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" string2 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"xyz"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("longest")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string1"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("as_str")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" string2"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("as_str")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"The longest string is {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 10-23：通过拥有不同的具体生命周期的 "),s("code",[this._v("String")]),this._v(" 值调用 "),s("code",[this._v("longest")]),this._v(" 函数")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("在这个例子中，"),n("code",[t._v("string1")]),t._v(" 直到外部作用域结束都是有效的，"),n("code",[t._v("string2")]),t._v(" 则在内部作用域中是有效的，而 "),n("code",[t._v("result")]),t._v(" 则引用了一些直到内部作用域结束都是有效的值。借用检查器认可这些代码；它能够编译和运行，并打印出 "),n("code",[t._v("The longest string is long string is long")]),t._v("。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("接下来，让我们尝试一个 "),n("code",[t._v("result")]),t._v(" 的引用的生命周期肯定比两个参数的要短的例子。将 "),n("code",[t._v("result")]),t._v(" 变量的声明从内部作用域中移动出来，但是将 "),n("code",[t._v("result")]),t._v(" 和 "),n("code",[t._v("string2")]),t._v(" 变量的赋值语句一同留在内部作用域里。接下来，我们将使用 "),n("code",[t._v("result")]),t._v(" 的 "),n("code",[t._v("println!")]),t._v(" 移动到内部作用域之外，就在其结束之后。注意示例 10-24 中的代码不能编译：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore,does_not_compile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('fn main() {\n    let string1 = String::from("long string is long");\n    let result;\n    {\n        let string2 = String::from("xyz");\n        result = longest(string1.as_str(), string2.as_str());\n    }\n    println!("The longest string is {}", result);\n}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 10-24：在 "),s("code",[this._v("string2")]),this._v(" 离开作用域之后使用 "),s("code",[this._v("result")]),this._v(" 的尝试不能编译")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('error[E0597]: `string2` does not live long enough\n  --\x3e src/main.rs:15:5\n   |\n14 |         result = longest(string1.as_str(), string2.as_str());\n   |                                            ------- borrow occurs here\n15 |     }\n   |     ^ `string2` dropped here while still borrowed\n16 |     println!("The longest string is {}", result);\n17 | }\n   | - borrowed value needs to live until here\n')])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("错误表明为了保证 "),n("code",[t._v("println!")]),t._v(" 中的 "),n("code",[t._v("result")]),t._v(" 是有效的，"),n("code",[t._v("string2")]),t._v(" 需要直到外部作用域结束都是有效的。Rust 知道这些是因为（"),n("code",[t._v("longest")]),t._v("）函数的参数和返回值都使用了相同的生命周期参数 "),n("code",[t._v("'a")]),t._v("。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("以人类的理解 "),n("code",[t._v("string1")]),t._v(" 更长，因此 "),n("code",[t._v("result")]),t._v(" 会包含指向 "),n("code",[t._v("string1")]),t._v(" 的引用。因为 "),n("code",[t._v("string1")]),t._v(" 尚未离开作用域，对于 "),n("code",[t._v("println!")]),t._v(" 来说 "),n("code",[t._v("string1")]),t._v(" 的引用仍然是有效的。然而，我们通过生命周期参数告诉 Rust 的是 "),n("code",[t._v("longest")]),t._v(" 函数返回的引用的生命周期应该与传入参数的生命周期中较短那个保持一致。因此，借用检查器不允许示例 10-24 中的代码，因为它可能会存在无效的引用。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("请尝试更多采用不同的值和不同生命周期的引用作为 "),s("code",[this._v("longest")]),this._v(" 函数的参数和返回值的实验。并在开始编译前猜想你的实验能否通过借用检查器，接着编译一下看看你的理解是否正确！")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"深入理解生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深入理解生命周期","aria-hidden":"true"}},[this._v("#")]),this._v(" 深入理解生命周期")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("指定生命周期参数的正确方式依赖函数具体的功能。例如，如果将 "),s("code",[this._v("longest")]),this._v(" 函数的实现修改为总是返回第一个参数而不是最长的字符串 slice，就不需要为参数 "),s("code",[this._v("y")]),this._v(" 指定一个生命周期。如下代码将能够编译：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" longest"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),t._v(" str"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("str"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),t._v(" str "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("在这个例子中，我们为参数 "),n("code",[t._v("x")]),t._v(" 和返回值指定了生命周期参数 "),n("code",[t._v("'a")]),t._v("，不过没有为参数 "),n("code",[t._v("y")]),t._v(" 指定，因为 "),n("code",[t._v("y")]),t._v(" 的生命周期与参数 "),n("code",[t._v("x")]),t._v(" 和返回值的生命周期没有任何关系。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当从函数返回一个引用，返回值的生命周期参数需要与一个参数的生命周期参数相匹配。如果返回的引用 "),s("strong",[this._v("没有")]),this._v(" 指向任何一个参数，那么唯一的可能就是它指向一个函数内部创建的值，它将会是一个悬垂引用，因为它将会在函数结束时离开作用域。尝试考虑这个并不能编译的 "),s("code",[this._v("longest")]),this._v(" 函数实现：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore,does_not_compile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("fn longest<'a>(x: &str, y: &str) -> &'a str {\n    let result = String::from(\"really long string\");\n    result.as_str()\n}\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("即便我们为返回值指定了生命周期参数 "),s("code",[this._v("'a")]),this._v("，这个实现却编译失败了，因为返回值的生命周期与参数完全没有关联。这里是会出现的错误信息：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("error[E0597]: `result` does not live long enough\n --\x3e src/main.rs:3:5\n  |\n3 |     result.as_str()\n  |     ^^^^^^ does not live long enough\n4 | }\n  | - borrowed value only lives until here\n  |\nnote: borrowed value must be valid for the lifetime 'a as defined on the\nfunction body at 1:1...\n --\x3e src/main.rs:1:1\n  |\n1 | / fn longest<'a>(x: &str, y: &str) -> &'a str {\n2 | |     let result = String::from(\"really long string\");\n3 | |     result.as_str()\n4 | | }\n  | |_^\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("出现的问题是 "),s("code",[this._v("result")]),this._v(" 在 "),s("code",[this._v("longest")]),this._v(" 函数的结尾将离开作用域并被清理，而我们尝试从函数返回一个 "),s("code",[this._v("result")]),this._v(" 的引用。无法指定生命周期参数来改变悬垂引用，而且 Rust 也不允许我们创建一个悬垂引用。在这种情况，最好的解决方案是返回一个有所有权的数据类型而不是一个引用，这样函数调用者就需要负责清理这个值了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"结构体定义中的生命周期注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结构体定义中的生命周期注解","aria-hidden":"true"}},[this._v("#")]),this._v(" 结构体定义中的生命周期注解")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("目前为止，我们只定义过有所有权类型的结构体。也可以定义存放引用的结构体，不过需要为结构体定义中的每一个引用添加生命周期注解。示例 10-25 中有一个存放了一个字符串 slice 的结构体 "),s("code",[this._v("ImportantExcerpt")]),this._v("：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" ImportantExcerpt"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    part"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),t._v(" str"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" novel "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Call me Ishmael. Some years ago..."')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" first_sentence "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" novel"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("split")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token char string"}},[t._v("'.'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("next")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("expect")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("\"Could not find a '.'\"")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ImportantExcerpt "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" part"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" first_sentence "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 10-25：一个存放引用的结构体，所以其定义需要生命周期注解")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这个结构体有一个字段，"),s("code",[this._v("part")]),this._v("，它存放了一个字符串 slice，这是一个引用。类似于泛型参数类型，必须在结构体名称后面的尖括号中声明泛型生命周期参数，以便在结构体定义中使用生命周期参数。这个注解意味着 "),s("code",[this._v("ImportantExcerpt")]),this._v(" 的示例不能比其 "),s("code",[this._v("part")]),this._v(" 字段中的引用存在的更久。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这里的 "),n("code",[t._v("main")]),t._v(" 函数创建了一个 "),n("code",[t._v("ImportantExcerpt")]),t._v(" 的实例，它存放了变量 "),n("code",[t._v("novel")]),t._v(" 所拥有的 "),n("code",[t._v("String")]),t._v(" 的第一个句子的引用。"),n("code",[t._v("novel")]),t._v(" 的数据在 "),n("code",[t._v("ImportantExcerpt")]),t._v(" 实例创建之前就存在。另外，直到 "),n("code",[t._v("ImportantExcerpt")]),t._v(" 离开作用域之后 "),n("code",[t._v("novel")]),t._v(" 都不会离开作用域，所以 "),n("code",[t._v("ImportantExcerpt")]),t._v(" 实例中的引用是有效的")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"生命周期省略（lifetime-elision）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生命周期省略（lifetime-elision）","aria-hidden":"true"}},[this._v("#")]),this._v(" 生命周期省略（Lifetime Elision）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("first_word")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("str"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("str "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" bytes "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("as_bytes")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("item"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" bytes"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("iter")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("enumerate")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" item "),n("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{attrs:{class:"token char string"}},[t._v("b' '")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v("i"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("..")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 10-27：示例 4-9 定义了一个没有使用生命周期注解的函数，即便其参数和返回值都是引用")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("fn first_word<'a>(s: &'a str) -> &'a str {\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("被编码进 Rust 引用分析的模式被称为 "),s("strong",[this._v("生命周期省略规则")]),this._v("（"),s("em",[this._v("lifetime elision rules")]),this._v("）。这并不是需要程序员遵守的规则；这些规则是一系列特定的场景，此时编译器会考虑，如果代码符合这些场景，就无需明确指定生命周期。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("函数或方法的参数的生命周期被称为 "),n("strong",[t._v("输入生命周期")]),t._v("（"),n("em",[t._v("input lifetimes")]),t._v("），而返回值的生命周期被称为 "),n("strong",[t._v("输出生命周期")]),t._v("（"),n("em",[t._v("output lifetimes")]),t._v("）。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这些规则适用于 "),s("code",[this._v("fn")]),this._v(" 定义，以及 "),s("code",[this._v("impl")]),this._v(" 块。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("第一条规则是每一个是引用的参数都有它自己的生命周期参数。换句话说就是，有一个引用参数的函数有一个生命周期参数："),s("code",[this._v("fn foo<'a>(x: &'a i32)")]),this._v("，有两个引用参数的函数有两个不同的生命周期参数，"),s("code",[this._v("fn foo<'a, 'b>(x: &'a i32, y: &'b i32)")]),this._v("，依此类推。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("第二条规则是如果只有一个输入生命周期参数，那么它被赋予所有输出生命周期参数："),s("code",[this._v("fn foo<'a>(x: &'a i32) -> &'a i32")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("第三条规则是如果方法有多个输入生命周期参数，不过其中之一因为方法的缘故为 "),s("code",[this._v("&self")]),this._v(" 或 "),s("code",[this._v("&mut self")]),this._v("，那么 "),s("code",[this._v("self")]),this._v(" 的生命周期被赋给所有输出生命周期参数。这使得方法更容易读写，因为只需更少的符号。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("假设我们自己就是编译器。并应用这些规则来计算示例 10-26 中 "),s("code",[this._v("first_word")]),this._v(" 函数签名中的引用的生命周期。开始时签名中的引用并没有关联任何生命周期：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("fn first_word(s: &str) -> &str {\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接着编译器应用第一条规则，也就是每个引用参数都有其自己的生命周期。我们像往常一样称之为 "),s("code",[this._v("'a")]),this._v("，所以现在签名看起来像这样：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("fn first_word<'a>(s: &'a str) -> &str {\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("fn first_word<'a>(s: &'a str) -> &'a str {\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("让我们再看看另一个例子，这次我们从示例 10-21 中没有生命周期参数的 "),s("code",[this._v("longest")]),this._v(" 函数开始：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("fn longest(x: &str, y: &str) -> &str {\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("fn longest<'a, 'b>(x: &'a str, y: &'b str) -> &str {\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("再来应用第二条规则，它并不适用因为存在多于一个输入生命周期。再来看第三条规则，它同样也不适用因为没有 "),s("code",[this._v("self")]),this._v(" 参数。然后我们就没有更多规则了，不过还没有计算出返回值的类型的生命周期。这就是为什么在编译示例 10-21 的代码时会出现错误的原因：编译器使用所有已知的生命周期省略规则，不过仍不能计算出签名中所有引用的生命周期。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"方法定义中的生命周期注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法定义中的生命周期注解","aria-hidden":"true"}},[this._v("#")]),this._v(" 方法定义中的生命周期注解")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("（实现方法时）结构体字段的生命周期必须总是在 "),s("code",[this._v("impl")]),this._v(" 关键字之后声明并在结构体名称之后被使用，因为这些生命周期是结构体类型的一部分。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("impl")]),this._v(" 块里的方法签名中，引用可能与结构体字段中的引用相关联，也可能是独立的。另外，生命周期省略规则也经常让我们无需在方法签名中使用生命周期注解。让我们看看一些使用示例 10-25 中定义的结构体 "),s("code",[this._v("ImportantExcerpt")]),this._v(" 的例子。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("首先，这里有一个方法 "),s("code",[this._v("level")]),this._v("。其唯一的参数是 "),s("code",[this._v("self")]),this._v(" 的引用，而且返回值只是一个 "),s("code",[this._v("i32")]),this._v("，并不引用任何值：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" ImportantExcerpt"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     part"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),t._v(" str"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),n("span",{attrs:{class:"token operator"}},[t._v("<")]),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" ImportantExcerpt"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("level")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" i32 "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token number"}},[t._v("3")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("impl")]),this._v(" 之后和类型名称之后的生命周期参数是必要的，不过因为第一条生命周期规则我们并不必须标注 "),s("code",[this._v("self")]),this._v(" 引用的生命周期。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" ImportantExcerpt"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     part"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),t._v(" str"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),n("span",{attrs:{class:"token operator"}},[t._v("<")]),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" ImportantExcerpt"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("announce_and_return_part")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" announcement"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("str"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("str "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Attention please: {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" announcement"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("part\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这里有两个输入生命周期，所以 Rust 应用第一条生命周期省略规则并给予 "),n("code",[t._v("&self")]),t._v(" 和 "),n("code",[t._v("announcement")]),t._v(" 他们各自的生命周期。接着，因为其中一个参数是 "),n("code",[t._v("&self")]),t._v("，返回值类型被赋予了 "),n("code",[t._v("&self")]),t._v(" 的生命周期，这样所有的生命周期都被计算出来了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"静态生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态生命周期","aria-hidden":"true"}},[this._v("#")]),this._v(" 静态生命周期")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里有一种特殊的生命周期值得讨论："),s("code",[this._v("'static")]),this._v("，其生命周期存活于整个程序期间。所有的字符串字面值都拥有 "),s("code",[this._v("'static")]),this._v(" 生命周期，我们也可以选择像下面这样标注出来：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'static")]),t._v(" str "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"I have a static lifetime."')]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这个字符串的文本被直接储存在程序的二进制文件中而这个文件总是可用的。因此所有的字符串字面值都是 "),s("code",[this._v("'static")]),this._v(" 的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("你可能在错误信息的帮助文本中见过使用 "),s("code",[this._v("'static")]),this._v(" 生命周期的建议，不过将引用指定为 "),s("code",[this._v("'static")]),this._v(" 之前，思考一下这个引用是否真的在整个程序的生命周期里都有效。你可能会考虑希望它一直有效，如果可能的话。大部分情况，代码中的问题是尝试创建一个悬垂引用或者可用的生命周期不匹配，请解决这些问题而不是指定一个 "),s("code",[this._v("'static")]),this._v(" 的生命周期。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"结合泛型类型参数、trait-bounds-和生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结合泛型类型参数、trait-bounds-和生命周期","aria-hidden":"true"}},[this._v("#")]),this._v(" 结合泛型类型参数、trait bounds 和生命周期")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("fmt"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Display"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" longest_with_an_announcement"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a,")]),t._v(" T"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),t._v(" str"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),t._v(" str"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ann"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),t._v(" str\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("where")]),t._v(" T"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Display\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Announcement! {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ann"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("len")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("len")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        x\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        y\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这个是示例 10-22 中那个返回两个字符串 slice 中较长者的 "),n("code",[t._v("longest")]),t._v(" 函数，不过带有一个额外的参数 "),n("code",[t._v("ann")]),t._v("。"),n("code",[t._v("ann")]),t._v(" 的类型是泛型 "),n("code",[t._v("T")]),t._v("，它可以被放入任何实现了 "),n("code",[t._v("where")]),t._v(" 从句中指定的 "),n("code",[t._v("Display")]),t._v(" trait 的类型。这个额外的参数会在函数比较字符串 slice 的长度之前被打印出来，这也就是为什么 "),n("code",[t._v("Display")]),t._v(" trait bound 是必须的。因为生命周期也是泛型，所以生命周期参数 "),n("code",[t._v("'a")]),t._v(" 和泛型类型参数 "),n("code",[t._v("T")]),t._v(" 都位于函数名后的同一尖括号列表中。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结")])}],!1,null,null,null);e.options.__file="ch10-03-lifetime-syntax.md";s.default=e.exports}}]);