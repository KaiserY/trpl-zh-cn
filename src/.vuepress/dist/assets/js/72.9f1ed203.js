(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{198:function(e,t,r){"use strict";r.r(t);var s=r(0),_=Object(s.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"content"},[e._m(0),e._v(" "),r("blockquote",[r("p",[r("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/second-edition/src/ch14-01-release-profiles.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("ch14-01-release-profiles.md"),r("OutboundLink")],1),e._v(" "),r("br"),e._v("\ncommit ff93f82ff63ade5a352d9ccc430945d4ec804cdf")])]),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),r("p",[e._v("我们应该很熟悉这些配置名称因为他们出现在构建的输出中，这会展示构建所使用的配置：")]),e._v(" "),e._m(3),e._m(4),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),e._m(7),e._m(8),e._v(" "),e._m(9),e._v(" "),e._m(10),e._v(" "),e._m(11),e._m(12),e._v(" "),r("p",[e._v("对于每个配置的设置和其默认值的完整列表，请查看 "),r("a",{attrs:{href:"https://doc.rust-lang.org/cargo/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Cargo 的文档"),r("OutboundLink")],1),e._v("。")])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"采用发布配置自定义构建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#采用发布配置自定义构建","aria-hidden":"true"}},[this._v("#")]),this._v(" 采用发布配置自定义构建")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在 Rust 中 "),t("strong",[this._v("发布配置")]),this._v("（"),t("em",[this._v("release profiles")]),this._v("）是预定义的、可定制的带有不同选项的配置，他们允许程序员更多的控制代码编译的多种选项。每一个配置都彼此相互独立。")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("p",[e._v("Cargo 有两个主要的配置：运行 "),r("code",[e._v("cargo build")]),e._v(" 时采用的 "),r("code",[e._v("dev")]),e._v(" 配置和运行 "),r("code",[e._v("cargo build --release")]),e._v(" 的 "),r("code",[e._v("release")]),e._v(" 配置。"),r("code",[e._v("dev")]),e._v(" 配置被定义为开发时的好的默认配置，"),r("code",[e._v("release")]),e._v(" 配置则有着良好的发布构建的默认配置。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("$ cargo build\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs\n$ cargo build --release\n    Finished release [optimized] target(s) in 0.0 secs\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("构建输出中的 "),t("code",[this._v("dev")]),this._v(" 和 "),t("code",[this._v("release")]),this._v(" 表明编译器在使用不同的配置。")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("p",[e._v("Cargo 对每一个配置都有默认设置，当项目的 "),r("em",[e._v("Cargo.toml")]),e._v(" 文件中没有任何 "),r("code",[e._v("[profile.*]")]),e._v(" 部分的时候。通过增加任何希望定制的配置对应的 "),r("code",[e._v("[profile.*]")]),e._v(" 部分，我们可以选择覆盖任意默认设置的子集。例如，如下是 "),r("code",[e._v("dev")]),e._v(" 和 "),r("code",[e._v("release")]),e._v(" 配置的 "),r("code",[e._v("opt-level")]),e._v(" 设置的默认值：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("span",{staticClass:"filename"},[this._v("文件名: Cargo.toml")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-toml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("[profile.dev]\nopt-level = 0\n\n[profile.release]\nopt-level = 3\n")])])])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("p",[r("code",[e._v("opt-level")]),e._v(" 设置控制 Rust 会对代码进行何种程度的优化。这个配置的值从 0 到 3。越高的优化级别需要更多的时间编译，所以如果你在进行开发并经常编译，可能会希望在牺牲一些代码性能的情况下编译得快一些。这就是为什么 "),r("code",[e._v("dev")]),e._v(" 的 "),r("code",[e._v("opt-level")]),e._v(" 默认为 "),r("code",[e._v("0")]),e._v("。当你准备发布时，花费更多时间在编译上则更好。只需要在发布模式编译一次，而编译出来的程序则会运行很多次，所以发布模式用更长的编译时间换取运行更快的代码。这正是为什么 "),r("code",[e._v("release")]),e._v(" 配置的 "),r("code",[e._v("opt-level")]),e._v(" 默认为 "),r("code",[e._v("3")]),e._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们可以选择通过在 "),t("em",[this._v("Cargo.toml")]),this._v(" 增加不同的值来覆盖任何默认设置。比如，如果我们想要在开发配置中使用级别 1 的优化，则可以在 "),t("em",[this._v("Cargo.toml")]),this._v(" 中增加这两行：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("span",{staticClass:"filename"},[this._v("文件名: Cargo.toml")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-toml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("[profile.dev]\nopt-level = 1\n")])])])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("p",[e._v("这会覆盖默认的设置 "),r("code",[e._v("0")]),e._v("。现在运行 "),r("code",[e._v("cargo build")]),e._v(" 时，Cargo 将会使用 "),r("code",[e._v("dev")]),e._v(" 的默认配置加上定制的 "),r("code",[e._v("opt-level")]),e._v("。因为 "),r("code",[e._v("opt-level")]),e._v(" 设置为 "),r("code",[e._v("1")]),e._v("，Cargo 会比默认进行更多的优化，但是没有发布构建那么多。")])}],!1,null,null,null);_.options.__file="ch14-01-release-profiles.md";t.default=_.exports}}]);