(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{245:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/second-edition/src/ch20-01-single-threaded.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch20-01-single-threaded.md"),n("OutboundLink")],1),t._v(" "),n("br"),t._v("\ncommit 90e6737d534cb66102674d183d2ef1966b190c2c")])]),t._v(" "),n("p",[t._v("首先让我们创建一个可运行的单线程 web server，不过在开始之前，我们将快速了解一下构建 web server 所涉及到的协议。这些协议的细节超出了本书的范畴，不过一个简单的概括会提供你所需的信息。")]),t._v(" "),t._m(1),t._v(" "),n("p",[t._v("TCP 是一个底层协议，它描述了信息如何从一个 server 到另一个的细节，不过其并不指定信息是什么。HTTP 构建于 TCP 之上，它定义了请求和响应的内容。为此，技术上讲可将 HTTP 用于其他协议之上，不过对于绝大部分情况，HTTP 通过 TCP 传输。我们将要做的就是处理 TCP 和 HTTP 请求与响应的原始字节数据。")]),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),n("p",[t._v("让我们试一试！启动程序并再次在浏览器中发起请求。注意浏览器中仍然会出现错误页面，不过终端中程序的输出现在看起来像这样：")]),t._v(" "),t._m(29),t._m(30),t._v(" "),n("p",[t._v("拆开请求数据来理解浏览器向程序请求了什么。")]),t._v(" "),t._m(31),t._v(" "),n("p",[t._v("HTTP 是一个基于文本的协议，同时一个请求有如下格式：")]),t._v(" "),t._m(32),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),t._m(38),t._v(" "),n("p",[t._v("现在我们知道了浏览器请求了什么。让我们返回一些数据！")]),t._v(" "),t._m(39),t._v(" "),n("p",[t._v("我们将实现在客户端请求的响应中发送数据的功能。响应有如下格式：")]),t._v(" "),t._m(40),t._m(41),t._v(" "),t._m(42),t._v(" "),t._m(43),n("p",[t._v("状态码 200 是一个标准的成功响应。这些文本是一个微型的成功 HTTP 响应。让我们将这些文本写入流作为成功请求的响应！")]),t._v(" "),t._m(44),t._v(" "),t._m(45),t._v(" "),t._m(46),t._m(47),t._v(" "),t._m(48),t._v(" "),t._m(49),t._v(" "),t._m(50),t._v(" "),t._m(51),t._v(" "),t._m(52),t._v(" "),t._m(53),t._v(" "),t._m(54),t._m(55),t._v(" "),t._m(56),t._v(" "),t._m(57),t._v(" "),t._m(58),t._m(59),t._v(" "),t._m(60),t._v(" "),t._m(61),t._v(" "),t._m(62),t._v(" "),t._m(63),t._v(" "),t._m(64),t._v(" "),t._m(65),t._v(" "),t._m(66),t._v(" "),t._m(67),t._m(68),t._v(" "),t._m(69),t._v(" "),t._m(70),t._v(" "),t._m(71),t._v(" "),t._m(72),t._v(" "),t._m(73),t._v(" "),t._m(74),t._m(75),t._v(" "),t._m(76),t._v(" "),t._m(77),t._v(" "),t._m(78),t._m(79),t._v(" "),t._m(80),t._v(" "),t._m(81),t._v(" "),t._m(82),t._v(" "),t._m(83),t._v(" "),t._m(84),t._m(85),t._v(" "),t._m(86),t._v(" "),t._m(87),t._v(" "),t._m(88),t._v(" "),n("p",[t._v("目前 server 运行于单线程中，它一次只能处理一个请求。让我们模拟一些慢请求来看看这如何会成为一个问题，并进行修复以便 server 可以一次处理多个请求。")])])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"构建单线程-web-server"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构建单线程-web-server","aria-hidden":"true"}},[this._v("#")]),this._v(" 构建单线程 web server")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("web server 中涉及到的两个主要协议是 "),n("strong",[t._v("超文本传输协议")]),t._v("（"),n("em",[t._v("Hypertext Transfer Protocol")]),t._v("，"),n("em",[t._v("HTTP")]),t._v("）和 "),n("strong",[t._v("传输控制协议")]),t._v("（"),n("em",[t._v("Transmission Control Protocol")]),t._v("，"),n("em",[t._v("TCP")]),t._v("）。这两者都是 "),n("strong",[t._v("请求-响应")]),t._v("（"),n("em",[t._v("request-response")]),t._v("）协议，也就是说，有 "),n("strong",[t._v("客户端")]),t._v("（"),n("em",[t._v("client")]),t._v("）来初始化请求，并有 "),n("strong",[t._v("服务端")]),t._v("（"),n("em",[t._v("server")]),t._v("）监听请求并向客户端提供响应。请求与响应的内容由协议本身定义。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"监听-tcp-连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#监听-tcp-连接","aria-hidden":"true"}},[this._v("#")]),this._v(" 监听 TCP 连接")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所以我们的 web server 所需做的第一件事便是能够监听 TCP 连接。标准库提供了 "),s("code",[this._v("std::net")]),this._v(" 模块处理这些功能。让我们一如既往新建一个项目：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("$ cargo new hello --bin\n     Created binary (application) `hello` project\n$ cd hello\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("并在 "),s("code",[this._v("src/main.rs")]),this._v(" 输入示例 20-1 中的代码作为开始。这段代码会在地址 "),s("code",[this._v("127.0.0.1:7878")]),this._v(" 上监听传入的 TCP 流。当获取到传入的流，它会打印出 "),s("code",[this._v("Connection established!")]),this._v("：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,no_run extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('use std::net::TcpListener;\n\nfn main() {\n    let listener = TcpListener::bind("127.0.0.1:7878").unwrap();\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        println!("Connection established!");\n    }\n}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 20-1: 监听传入的流并在接收到流时打印信息")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("TcpListener")]),this._v(" 用于监听 TCP 连接。我们选择监听地址 "),s("code",[this._v("127.0.0.1:7878")]),this._v("。将这个地址拆开，冒号之前的部分是一个代表本机的 IP 地址（这个地址在每台计算机上都相同，并不特指作者的计算机），而 "),s("code",[this._v("7878")]),this._v(' 是端口。选择这个端口出于两个原因：通常 HTTP 接受这个端口而且 7878 在电话上打出来就是 "rust"（译者注：九宫格键盘上的英文）。注意连接 80 端口需要管理员权限；非管理员用户只能监听大于 1024 的端口。')])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("在这个场景中 "),n("code",[t._v("bind")]),t._v(" 函数类似于 "),n("code",[t._v("new")]),t._v(" 函数，在这里它返回一个新的 "),n("code",[t._v("TcpListener")]),t._v(" 实例。这个函数叫做 "),n("code",[t._v("bind")]),t._v(" 是因为，在网络领域，连接到监听端口被称为 “绑定到一个端口”（“binding to a port”）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("bind")]),this._v(" 函数返回 "),s("code",[this._v("Result<T, E>")]),this._v("，这表明绑定可能会失败，例如，如果不是管理员尝试连接 80 端口，或是如果运行两个此程序的实例这样会有两个程序监听相同的端口，绑定会失败。因为我们是出于学习目的来编写一个基础的 server，将不用关心处理这类错误，使用 "),s("code",[this._v("unwrap")]),this._v(" 在出现这些情况时直接停止程序。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("TcpListener")]),t._v(" 的 "),n("code",[t._v("incoming")]),t._v(" 方法返回一个迭代器，它提供了一系列的流（更准确的说是 "),n("code",[t._v("TcpStream")]),t._v(" 类型的流）。"),n("strong",[t._v("流")]),t._v("（"),n("em",[t._v("stream")]),t._v("）代表一个客户端和服务端之间打开的连接。"),n("strong",[t._v("连接")]),t._v("（"),n("em",[t._v("connection")]),t._v("）代表客户端连接服务端、服务端生成响应以及服务端关闭连接的全部请求 / 响应过程。为此，"),n("code",[t._v("TcpStream")]),t._v(" 允许我们读取它来查看客户端发送了什么，并可以编写响应。总体来说，这个 "),n("code",[t._v("for")]),t._v(" 循环会依次处理每个连接并产生一系列的流供我们处理。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("目前为止，处理流的过程包含 "),n("code",[t._v("unwrap")]),t._v(" 调用，如果出现任何错误会终止程序，如果没有任何错误，则打印出信息。下一个示例我们将为成功的情况增加更多功能。当客户端连接到服务端时 "),n("code",[t._v("incoming")]),t._v(" 方法返回错误是可能的，因为我们实际上没有遍历连接，而是遍历 "),n("strong",[t._v("连接尝试")]),t._v("（"),n("em",[t._v("connection attempts")]),t._v("）。连接可能会因为很多原因不能成功，大部分是操作系统相关的。例如，很多系统限制同时打开的连接数；新连接尝试产生错误，直到一些打开的连接关闭为止。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("让我们试试这段代码！首先在终端执行 "),s("code",[this._v("cargo run")]),this._v("，接着在浏览器中加载 "),s("code",[this._v("127.0.0.1:7878")]),this._v("。浏览器会显示出看起来类似于“连接重置”（“Connection reset”）的错误信息，因为 server 目前并没响应任何数据。但是如果我们观察终端，会发现当浏览器连接 server 时会打印出一系列的信息！")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("     Running `target/debug/hello`\nConnection established!\nConnection established!\nConnection established!\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("有时会看到对于一次浏览器请求会打印出多条信息；这可能是因为浏览器在请求页面的同时还请求了其他资源，比如出现在浏览器 tab 标签中的 "),s("code",[this._v("favicon.ico")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这也可能是因为浏览器尝试多次连接 server，因为 server 没有响应任何数据。当 "),s("code",[this._v("stream")]),this._v(" 在循环的结尾离开作用域并被丢弃，其连接将被关闭，作为 "),s("code",[this._v("drop")]),this._v(" 实现的一部分。浏览器有时通过重连来处理关闭的连接，因为这些问题可能是暂时的。现在重要的是我们成功的处理了 TCP 连接！")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("记得当运行完特定版本的代码后使用 "),s("span",{staticClass:"keystroke"},[this._v("ctrl-C")]),this._v(" 来停止程序，并在做出最新的代码修改之后执行 "),s("code",[this._v("cargo run")]),this._v(" 重启服务。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"读取请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#读取请求","aria-hidden":"true"}},[this._v("#")]),this._v(" 读取请求")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("让我们实现读取来自浏览器请求的功能！为了分离获取连接和接下来对连接的操作的相关内容，我们将开始一个新函数来处理连接。在这个新的 "),s("code",[this._v("handle_connection")]),this._v(" 函数中，我们从 TCP 流中读取数据并打印出来以便观察浏览器发送过来的数据。将代码修改为如示例 20-2 所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,no_run extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('use std::io::prelude::*;\nuse std::net::TcpListener;\nuse std::net::TcpStream;\n\nfn main() {\n    let listener = TcpListener::bind("127.0.0.1:7878").unwrap();\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        handle_connection(stream);\n    }\n}\n\nfn handle_connection(mut stream: TcpStream) {\n    let mut buffer = [0; 512];\n\n    stream.read(&mut buffer).unwrap();\n\n    println!("Request: {}", String::from_utf8_lossy(&buffer[..]));\n}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 20-2: 读取 "),s("code",[this._v("TcpStream")]),this._v(" 并打印数据")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这里将 "),n("code",[t._v("std::io::prelude")]),t._v(" 引入作用域来获取读写流所需的特定 trait。在 "),n("code",[t._v("main")]),t._v(" 函数的 "),n("code",[t._v("for")]),t._v(" 循环中，相比获取到连接时打印信息，现在调用新的 "),n("code",[t._v("handle_connection")]),t._v(" 函数并向其传递 "),n("code",[t._v("stream")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 "),s("code",[this._v("handle_connection")]),this._v(" 中，"),s("code",[this._v("stream")]),this._v(" 参数是可变的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们将从流中读取数据，所以它需要是可修改的。这是因为 "),s("code",[this._v("TcpStream")]),this._v(" 实例在内部记录了所返回的数据。它可能读取了多于我们请求的数据并保存它们以备下一次请求数据。因此它需要是 "),s("code",[this._v("mut")]),this._v(" 的因为其内部状态可能会改变；通常我们认为 “读取” 不需要可变性，不过在这个例子中则需要 "),s("code",[this._v("mut")]),this._v(" 关键字。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接下来，需要实际读取流。这里分两步进行：首先，在栈上声明一个 "),s("code",[this._v("buffer")]),this._v(" 来存放读取到的数据。这里创建了一个 512 字节的缓冲区，它足以存放基本请求的数据并满足本章的目的需要。如果希望处理任意大小的请求，缓冲区管理将更为复杂，不过现在一切从简。接着将缓冲区传递给 "),s("code",[this._v("stream.read")]),this._v(" ，它会从 "),s("code",[this._v("TcpStream")]),this._v(" 中读取字节并放入缓冲区中。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("接下来将缓冲区中的字节转换为字符串并打印出来。"),n("code",[t._v("String::from_utf8_lossy")]),t._v(" 函数获取一个 "),n("code",[t._v("&[u8]")]),t._v(" 并产生一个 "),n("code",[t._v("String")]),t._v("。函数名的 “lossy” 部分来源于当其遇到无效的 UTF-8 序列时的行为：它使用  �，"),n("code",[t._v("U+FFFD REPLACEMENT CHARACTER")]),t._v("，来代替无效序列。你可能会在缓冲区的剩余部分看到这些替代字符，因为他们没有被请求数据填满。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("$ cargo run\n   Compiling hello v0.1.0 (file:///projects/hello)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.42 secs\n     Running `target/debug/hello`\nRequest: GET / HTTP/1.1\nHost: 127.0.0.1:7878\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101\nFirefox/52.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nUpgrade-Insecure-Requests: 1\n������������������������������������\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("根据使用的浏览器不同可能会出现稍微不同的数据。现在我们打印出了请求数据，可以通过观察 "),s("code",[this._v("Request: GET")]),this._v(" 之后的路径来解释为何会从浏览器得到多个连接。如果重复的连接都是请求 "),s("code",[this._v("/")]),this._v("，就知道了浏览器尝试重复获取 "),s("code",[this._v("/")]),this._v(" 因为它没有从程序得到响应。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"仔细观察-http-请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#仔细观察-http-请求","aria-hidden":"true"}},[this._v("#")]),this._v(" 仔细观察 hTTP 请求")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("Method Request-URI HTTP-Version CRLF\nheaders CRLF\nmessage-body\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("第一行叫做 "),n("strong",[t._v("请求行")]),t._v("（"),n("em",[t._v("request line")]),t._v("），它存放了客户端请求了什么的信息。请求行的第一部分是所使用的 "),n("em",[t._v("method")]),t._v("，比如 "),n("code",[t._v("GET")]),t._v(" 或 "),n("code",[t._v("POST")]),t._v("，这描述了客户端如何进行请求。这里客户端使用了 "),n("code",[t._v("GET")]),t._v(" 请求。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("Request")]),t._v(" 行接下来的部分是 "),n("code",[t._v("/")]),t._v("，它代表客户端请求的 "),n("strong",[t._v("统一资源标识符")]),t._v("（"),n("em",[t._v("Uniform Resource Identifier")]),t._v("，"),n("em",[t._v("URI")]),t._v("） —— URI 大体上类似，但也不完全类似于 URL（"),n("strong",[t._v("统一资源定位符")]),t._v("，"),n("em",[t._v("Uniform Resource Locators")]),t._v("）。URI 和 URL 之间的区别对于本章的目的来说并不重要，不过 HTTP 规范使用术语 URI，所以这里可以简单的将 URL 理解为 URI。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("最后，是客户端使用的 HTTP 版本，接着请求行以一个 CRLF 序列结尾。CRLF 序列也可以写作 "),n("code",[t._v("\\r\\n")]),t._v("："),n("code",[t._v("\\r")]),t._v(" 是 "),n("strong",[t._v("回车")]),t._v("（"),n("em",[t._v("carriage return")]),t._v("）而 "),n("code",[t._v("\\n")]),t._v(" 是 "),n("strong",[t._v("换行")]),t._v("（"),n("em",[t._v("line feed")]),t._v("）（这些术语来自打字机时代！）。注意当 CRLF 被打印时，会看到开始了一个新行而不是 "),n("code",[t._v("\\r\\n")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("观察目前运行程序所接收到的数据的请求行，可以看到 "),s("code",[this._v("GET")]),this._v(" 是 method，"),s("code",[this._v("/")]),this._v(" 是请求 URI，而 "),s("code",[this._v("HTTP/1.1")]),this._v(" 是版本。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("从 "),s("code",[this._v("Host:")]),this._v(" 开始的其余的行是 headers；"),s("code",[this._v("GET")]),this._v(" 请求没有 body。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果你希望的话，尝试用不同的浏览器发送请求，或请求不同的地址，比如 "),s("code",[this._v("127.0.0.1:7878/test")]),this._v("，来观察请求数据如何变化。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"编写响应"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编写响应","aria-hidden":"true"}},[this._v("#")]),this._v(" 编写响应")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("HTTP-Version Status-Code Reason-Phrase CRLF\nheaders CRLF\nmessage-body\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("第一行叫做 "),s("strong",[this._v("状态行")]),this._v("（"),s("em",[this._v("status line")]),this._v("），它包含响应的 HTTP 版本、一个数字状态码用以总结请求的结果和一个描述之前状态码的文本原因短语。CRLF 序列之后是任意 header，另一个 CRLF 序列，和响应的 body。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里是一个使用 HTTP 1.1 版本的响应例子，其状态码为 "),s("code",[this._v("200")]),this._v("，原因短语为 "),s("code",[this._v("OK")]),this._v("，没有 header，也没有 body：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("HTTP/1.1 200 OK\\r\\n\\r\\n\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 "),s("code",[this._v("handle_connection")]),this._v(" 函数中，我们需要去掉打印请求数据的 "),s("code",[this._v("println!")]),this._v("，并替换为示例 20-3 中的代码：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("io"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("prelude"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token operator"}},[t._v("*")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("net"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("TcpStream"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("handle_connection")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" stream"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" TcpStream"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" buffer "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("512")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    stream"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("read")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" buffer"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" response "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"HTTP/1.1 200 OK\\r\\n\\r\\n"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    stream"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("write")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("response"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("as_bytes")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    stream"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("flush")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 20-3: 将一个微型成功 HTTP 响应写入流")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("新代码中的第一行定义了变量 "),n("code",[t._v("response")]),t._v(" 来存放将要返回的成功响应的数据。接着，在 "),n("code",[t._v("response")]),t._v(" 上调用 "),n("code",[t._v("as_bytes")]),t._v("，因为 "),n("code",[t._v("stream")]),t._v(" 的 "),n("code",[t._v("write")]),t._v(" 方法获取一个 "),n("code",[t._v("&[u8]")]),t._v(" 并直接将这些字节发送给连接。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("因为 "),n("code",[t._v("write")]),t._v(" 操作可能会失败，所以像之前那样对任何错误结果使用 "),n("code",[t._v("unwrap")]),t._v("。同理，在真实世界的应用中这里需要添加错误处理。最后，"),n("code",[t._v("flush")]),t._v(" 会等待并阻塞程序执行直到所有字节都被写入连接中；"),n("code",[t._v("TcpStream")]),t._v(" 包含一个内部缓冲区来最小化对底层操作系统的调用。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("有了这些修改，运行我们的代码并进行请求！我们不再向终端打印任何数据，所以不会再看到除了 Cargo 以外的任何输出。不过当在浏览器中加载 "),s("code",[this._v("127.0.0.1:7878")]),this._v(" 时，会得到一个空页面而不是错误。太棒了！我们刚刚手写了一个 HTTP 请求与响应。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"返回真正的-html"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#返回真正的-html","aria-hidden":"true"}},[this._v("#")]),this._v(" 返回真正的 HTML")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("让我们实现不只是返回空页面的功能。在项目根目录创建一个新文件，"),s("em",[this._v("hello.html")]),this._v(" —— 也就是说，不是在 "),s("code",[this._v("src")]),this._v(" 目录。在此可以放入任何你期望的 HTML；列表 20-4 展示了一个可能的文本：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: hello.html")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-html extra-class"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{attrs:{class:"token doctype"}},[t._v("<!DOCTYPE html>")]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("html")]),t._v(" "),n("span",{attrs:{class:"token attr-name"}},[t._v("lang")]),n("span",{attrs:{class:"token attr-value"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("en"),n("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("head")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),n("span",{attrs:{class:"token attr-name"}},[t._v("charset")]),n("span",{attrs:{class:"token attr-value"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("utf-8"),n("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("title")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Hello!"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("title")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("head")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("body")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("h1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Hello!"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("h1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Hi from Rust"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("body")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("html")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 20-4: 一个简单的 HTML 文件用来作为响应")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这是一个极小化的 HTML 5 文档，它有一个标题和一小段文本。为了在 server 接受请求时返回它，需要如示例 20-5 所示修改 "),s("code",[this._v("handle_connection")]),this._v(" 来读取 HTML 文件，将其加入到响应的 body 中，并发送：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("io"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("prelude"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token operator"}},[t._v("*")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("net"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("TcpStream"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("fs"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("File"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("handle_connection")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" stream"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" TcpStream"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" buffer "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("512")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    stream"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("read")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" buffer"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" file "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" File"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("open")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"hello.html"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" contents "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    file"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("read_to_string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" contents"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" response "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("format!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"HTTP/1.1 200 OK\\r\\n\\r\\n{}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" contents"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    stream"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("write")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("response"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("as_bytes")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    stream"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("flush")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 20-5: 将 "),s("em",[this._v("hello.html")]),this._v(" 的内容作为响应 body 发送")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在开头增加了一行来将标准库中的 "),s("code",[this._v("File")]),this._v(" 引入作用域。打开和读取文件的代码应该看起来很熟悉，因为第十二章 I/O 项目的示例 12-4 中读取文件内容时出现过类似的代码。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接下来，使用 "),s("code",[this._v("format!")]),this._v(" 将文件内容加入到将要写入流的成功响应的 body 中。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("使用 "),s("code",[this._v("cargo run")]),this._v(" 运行程序，在浏览器加载 "),s("code",[this._v("127.0.0.1:7878")]),this._v("，你应该会看到渲染出来的 HTML 文件！")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("目前忽略了 "),s("code",[this._v("buffer")]),this._v(" 中的请求数据并无条件的发送了 HTML 文件的内容。这意味着如果尝试在浏览器中请求 "),s("code",[this._v("127.0.0.1:7878/something-else")]),this._v(" 也会得到同样的 HTML 响应。如此其作用是非常有限的，也不是大部分 server 所做的；让我们检查请求并只对格式良好（well-formed）的请求 "),s("code",[this._v("/")]),this._v(" 发送 HTML 文件。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"验证请求并有选择的进行响应"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#验证请求并有选择的进行响应","aria-hidden":"true"}},[this._v("#")]),this._v(" 验证请求并有选择的进行响应")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("目前我们的 web server 不管客户端请求什么都会返回相同的 HTML 文件。让我们增加在返回 HTML 文件前检查浏览器是否请求 "),n("code",[t._v("/")]),t._v("，并在其请求任何其他内容时返回错误的功能。为此需要如示例 20-6 那样修改 "),n("code",[t._v("handle_connection")]),t._v("。新代码接收到的请求的内容与已知的 "),n("code",[t._v("/")]),t._v(" 请求的一部分做比较，并增加了 "),n("code",[t._v("if")]),t._v(" 和 "),n("code",[t._v("else")]),t._v(" 块来区别处理请求：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("io"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("prelude"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token operator"}},[t._v("*")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("net"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("TcpStream"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("fs"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("File"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("handle_connection")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" stream"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" TcpStream"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" buffer "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("512")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    stream"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("read")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" buffer"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" get "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('b"GET / HTTP/1.1\\r\\n"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" buffer"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("starts_with")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("get"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" file "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" File"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("open")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"hello.html"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" contents "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        file"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("read_to_string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" contents"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" response "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("format!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"HTTP/1.1 200 OK\\r\\n\\r\\n{}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" contents"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        stream"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("write")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("response"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("as_bytes")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        stream"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("flush")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token comment"}},[t._v("// some other request")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 20-6: 匹配请求并区别处理 "),s("code",[this._v("/")]),this._v(" 请求与其他请求")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("首先，将与 "),n("code",[t._v("/")]),t._v(" 请求相关的数据硬编码进变量 "),n("code",[t._v("get")]),t._v("。因为我们将原始字节读取进了缓冲区，所以在 "),n("code",[t._v("get")]),t._v(" 的数据开头增加 "),n("code",[t._v('b""')]),t._v(" 字节字符串语法将其转换为字节字符串。接着检查 "),n("code",[t._v("buffer")]),t._v(" 是否以 "),n("code",[t._v("get")]),t._v(" 中的字节开头。如果是，这就是一个格式良好的 "),n("code",[t._v("/")]),t._v(" 请求，也就是 "),n("code",[t._v("if")]),t._v(" 块中期望处理的成功情况，并会返回 HTML 文件内容的代码。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("如果 "),n("code",[t._v("buffer")]),t._v(" "),n("strong",[t._v("不")]),t._v(" 以 "),n("code",[t._v("get")]),t._v(" 中的字节开头，就说明接收的是其他请求。之后会在  "),n("code",[t._v("else")]),t._v(" 块中增加代码来响应所有其他请求。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在如果运行代码并请求 "),s("code",[this._v("127.0.0.1:7878")]),this._v("，就会得到 "),s("em",[this._v("hello.html")]),this._v(" 中的 HTML。如果进行任何其他请求，比如 "),s("code",[this._v("127.0.0.1:7878/something-else")]),this._v("，则会得到像运行示例 20-1 和 20-2 中代码那样的连接错误。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在向示例 20-7 的 "),s("code",[this._v("else")]),this._v(" 块增加代码来返回一个带有 "),s("code",[this._v("404")]),this._v(" 状态码的响应，这代表了所请求的内容没有找到。接着也会返回一个 HTML 向浏览器终端用户表明此意：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("io"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("prelude"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token operator"}},[t._v("*")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("net"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("TcpStream"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("fs"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("File"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("handle_connection")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" stream"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" TcpStream"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("true")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" status_line "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\n"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" file "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" File"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("open")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"404.html"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" contents "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    file"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("read_to_string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" contents"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" response "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("format!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"{}{}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" status_line"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" contents"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    stream"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("write")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("response"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("as_bytes")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    stream"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("flush")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 20-7: 对于任何不是 "),s("code",[this._v("/")]),this._v(" 的请求返回 "),s("code",[this._v("404")]),this._v(" 状态码的响应和错误页面")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这里，响应的状态行有状态码 "),n("code",[t._v("404")]),t._v(" 和原因短语 "),n("code",[t._v("NOT FOUND")]),t._v("。仍然没有返回任何 header，而其 body 将是 "),n("em",[t._v("404.html")]),t._v(" 文件中的 HTML。需要在 "),n("em",[t._v("hello.html")]),t._v(" 同级目录创建 "),n("em",[t._v("404.html")]),t._v(" 文件作为错误页面；这一次也可以随意使用任何 HTML 或使用示例 20-8 中的示例 HTML：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: 404.html")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-html extra-class"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{attrs:{class:"token doctype"}},[t._v("<!DOCTYPE html>")]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("html")]),t._v(" "),n("span",{attrs:{class:"token attr-name"}},[t._v("lang")]),n("span",{attrs:{class:"token attr-value"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("en"),n("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("head")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),n("span",{attrs:{class:"token attr-name"}},[t._v("charset")]),n("span",{attrs:{class:"token attr-value"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("utf-8"),n("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("title")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Hello!"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("title")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("head")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("body")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("h1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Oops!"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("h1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Sorry, I don't know what you're asking for."),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("body")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("html")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 20-8: 任何 "),s("code",[this._v("404")]),this._v(" 响应所返回错误页面内容样例")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("有了这些修改，再次运行 server。请求 "),n("code",[t._v("127.0.0.1:7878")]),t._v(" 应该会返回 "),n("em",[t._v("hello.html")]),t._v(" 的内容，而对于任何其他请求，比如 "),n("code",[t._v("127.0.0.1:7878/foo")]),t._v("，应该会返回 "),n("em",[t._v("404.html")]),t._v(" 中的错误 HTML！")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"少量代码重构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#少量代码重构","aria-hidden":"true"}},[this._v("#")]),this._v(" 少量代码重构")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("目前 "),n("code",[t._v("if")]),t._v(" 和 "),n("code",[t._v("else")]),t._v(" 块中的代码有很多的重复：他们都读取文件并将其内容写入流。唯一的区别是状态行和文件名。为了使代码更为简明，将这些区别分别提取到一行 "),n("code",[t._v("if")]),t._v(" 和 "),n("code",[t._v("else")]),t._v(" 中，对状态行和文件名变量赋值；然后在读取文件和写入响应的代码中无条件的使用这些变量。重构后取代了大段 "),n("code",[t._v("if")]),t._v(" 和 "),n("code",[t._v("else")]),t._v(" 块代码后的结果如示例 20-9 所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("io"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("prelude"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token operator"}},[t._v("*")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("net"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("TcpStream"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("fs"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("File"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("handle_connection")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" stream"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" TcpStream"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" buffer "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("512")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#     stream"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("read")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" buffer"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n#     "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" get "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('b"GET / HTTP/1.1\\r\\n"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("status_line"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filename"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" buffer"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("starts_with")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("get"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"HTTP/1.1 200 OK\\r\\n\\r\\n"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"hello.html"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\n"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"404.html"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" file "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" File"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("open")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" contents "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    file"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("read_to_string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" contents"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" response "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("format!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"{}{}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" status_line"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" contents"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    stream"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("write")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("response"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("as_bytes")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    stream"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("flush")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 20-9: 重构使得 "),s("code",[this._v("if")]),this._v(" 和 "),s("code",[this._v("else")]),this._v(" 块中只包含两个情况所不同的代码")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("现在 "),n("code",[t._v("if")]),t._v(" 和 "),n("code",[t._v("else")]),t._v(" 块所做的唯一的事就是在一个元组中返回合适的状态行和文件名的值；接着使用第十八章讲到的使用模式的 "),n("code",[t._v("let")]),t._v(" 语句通过解构元组的两部分为 "),n("code",[t._v("filename")]),t._v(" 和 "),n("code",[t._v("header")]),t._v(" 赋值。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("之前读取文件和写入响应的冗余代码现在位于 "),n("code",[t._v("if")]),t._v(" 和 "),n("code",[t._v("else")]),t._v(" 块之外，并会使用变量 "),n("code",[t._v("status_line")]),t._v(" 和 "),n("code",[t._v("filename")]),t._v("。这样更易于观察这两种情况真正有何不同，还意味着如果需要改变如何读取文件或写入响应时只需要更新一处的代码。示例 20-9 中代码的行为与示例 20-8 完全一样。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("好极了！我们有了一个 40 行左右 Rust 代码的小而简单的 server，它对一个请求返回页面内容而对所有其他请求返回 "),s("code",[this._v("404")]),this._v(" 响应。")])}],!1,null,null,null);e.options.__file="ch20-01-single-threaded.md";s.default=e.exports}}]);