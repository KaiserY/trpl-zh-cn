(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{227:function(t,e,n){"use strict";n.r(e);var r=n(0),o=Object(r.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch08-00-common-collections.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch08-00-common-collections.md"),n("OutboundLink")],1),t._v(" "),n("br"),t._v("\ncommit 820ac357f6cf0e866e5a8e7a9c57dd3e17e9f8ca")])]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),n("p",[t._v("对于标准库提供的其他类型的集合，请查看"),n("a",{attrs:{href:"https://doc.rust-lang.org/std/collections",target:"_blank",rel:"noopener noreferrer"}},[t._v("文档"),n("OutboundLink")],1),t._v("。")]),t._v(" "),n("p",[t._v("我们将讨论如何创建和更新 vector、字符串和哈希 map，以及它们有什么特别之处。")])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"通用集合类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通用集合类型","aria-hidden":"true"}},[this._v("#")]),this._v(" 通用集合类型")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Rust 标准库中包含一系列被称为 "),e("strong",[this._v("集合")]),this._v("（"),e("em",[this._v("collections")]),this._v("）的非常有用的数据结构。大部分其他数据类型都代表一个特定的值，不过集合可以包含多个值。不同于内建的数组和元组类型，这些集合指向的数据是储存在堆上的，这意味着数据的数量不必在编译时就已知并且可以随着程序的运行增长或缩小。每种集合都有着不同能力和代价，而为所处的场景选择合适的集合则是你将要始终成长的技能。在这一章里，我们将详细的了解三个在 Rust 程序中被广泛使用的集合：")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[n("em",[t._v("vector")]),t._v(" 允许我们一个挨着一个地储存一系列数量可变的值")]),t._v(" "),n("li",[n("strong",[t._v("字符串")]),t._v("（"),n("em",[t._v("string")]),t._v("）是一个字符的集合。我们之前见过 "),n("code",[t._v("String")]),t._v(" 类型，不过在本章我们将深入了解。")]),t._v(" "),n("li",[n("strong",[t._v("哈希 map")]),t._v("（"),n("em",[t._v("hash map")]),t._v("）允许我们将值与一个特定的键（key）相关联。这是一个叫做 "),n("em",[t._v("map")]),t._v(" 的更通用的数据结构的特定实现。")])])}],!1,null,null,null);o.options.__file="ch08-00-common-collections.md";e.default=o.exports}}]);