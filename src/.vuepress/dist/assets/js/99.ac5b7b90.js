(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{171:function(t,s,e){"use strict";e.r(s);var a=e(0),n=Object(a.a)({},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"content"},[t._m(0),t._v(" "),e("blockquote",[e("p",[e("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/second-edition/src/ch19-02-advanced-lifetimes.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch19-02-advanced-lifetimes.md"),e("OutboundLink")],1),t._v(" "),e("br"),t._v("\ncommit f7f5e4835c1c4f8ddb502a1dd09a1584ed6f4b6f")])]),t._v(" "),e("p",[t._v("回顾第十章 “生命周期与引用有效性” 部分，我们学习了怎样使用生命周期参数注解引用来帮助 Rust 理解不同引用的生命周期如何相互联系。我们理解了每一个引用都有生命周期，不过大部分情况 Rust 允许我们省略生命周期。这里我们会看到三个还未涉及到的生命周期高级特征：")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),e("p",[t._v("为了保持代码简单，我们不准备实际编写任何解析逻辑。解析逻辑的某处非常有可能通过返回引用输入中无效部分的错误来处理无效输入，而考虑到生命周期，这个引用是使得这个例子有趣的地方。所以我们将假设解析器的逻辑为输入的第一个字节之后是无效的。注意如果第一个字节并不位于一个有效的字符范围内（比如 Unicode）代码将会 panic；这里又一次简化了例子以专注于涉及到的生命周期。")]),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),e("p",[t._v("还记得（生命周期）省略规则吗？如果标注了引用生命周期而不加以省略，签名看起来应该是这样：")]),t._v(" "),t._m(25),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._m(34),t._v(" "),t._m(35),t._v(" "),e("p",[t._v("这里是现在尝试编译时得到的错误：")]),t._v(" "),t._m(36),t._m(37),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),t._m(41),t._m(42),t._v(" "),e("p",[t._v("这是一个非常冗长的例子，不过正如本章的开头所提到的，这类功能是很小众的。你并不会经常需要这个语法，不过当出现类似这样的情形时，却还是有地方可以参考的。")]),t._v(" "),t._m(43),t._v(" "),t._m(44),t._v(" "),t._m(45),t._v(" "),t._m(46),t._v(" "),t._m(47),t._m(48),t._v(" "),t._m(49),t._v(" "),t._m(50),t._m(51),t._v(" "),e("p",[t._v("幸运的是，Rust 提供了这个情况下如何指定生命周期 bound 的有用建议：")]),t._v(" "),t._m(52),t._m(53),t._v(" "),t._m(54),t._v(" "),t._m(55),t._m(56),t._v(" "),t._m(57),t._v(" "),t._m(58),t._v(" "),t._m(59),t._m(60),t._v(" "),t._m(61),t._v(" "),t._m(62),t._v(" "),t._m(63),t._v(" "),t._m(64),t._v(" "),t._m(65),t._m(66),t._v(" "),t._m(67),t._v(" "),t._m(68),t._v(" "),t._m(69),t._v(" "),e("p",[t._v("接下来，让我们看看一些其他处理 trait 的高级功能吧！")])])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"高级生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高级生命周期","aria-hidden":"true"}},[this._v("#")]),this._v(" 高级生命周期")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("生命周期子类型（lifetime subtyping），一个确保某个生命周期长于另一个生命周期的方式")]),this._v(" "),s("li",[this._v("生命周期 bound（lifetime bounds），用于指定泛型引用的生命周期")]),this._v(" "),s("li",[this._v("trait 对象生命周期（trait object lifetimes），以及他们是如何推断的，以及何时需要指定")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"生命周期子类型确保某个生命周期长于另一个生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生命周期子类型确保某个生命周期长于另一个生命周期","aria-hidden":"true"}},[this._v("#")]),this._v(" 生命周期子类型确保某个生命周期长于另一个生命周期")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("生命周期子类型是一个指定某个生命周期应该长于另一个生命周期的方式。为了探索生命周期子类型，想象一下我们想要编写一个解析器。为此会有一个储存了需要解析的字符串的引用的结构体 "),s("code",[this._v("Context")]),this._v("。解析器将会解析字符串并返回成功或失败。其实现看起来像示例 19-12 中的代码，除了缺少了必须的生命周期注解，所以这还不能编译：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("struct Context(&str);\n\nstruct Parser {\n    context: &Context,\n}\n\nimpl Parser {\n    fn parse(&self) -> Result<(), &str> {\n        Err(&self.context.0[1..])\n    }\n}\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 19-12: 定义一个不带生命周期注解的解析器")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("编译代码会导致一个表明 Rust 期望 "),s("code",[this._v("Context")]),this._v(" 中字符串 slice 和 "),s("code",[this._v("Parser")]),this._v(" 中 "),s("code",[this._v("Context")]),this._v(" 的引用的生命周期的错误。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("为了简单起见，"),s("code",[this._v("parse")]),this._v(" 方法返回 "),s("code",[this._v("Result<(), &str>")]),this._v("。也就是说，成功时不做任何操作，失败时则返回字符串 slice 没有正确解析的部分。真实的实现将会包含比这更多的错误信息，并将会在解析成功时返回实际结果，不过我们将去掉这些部分的实现，因为他们与这个例子的生命周期部分并不相关。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("为了使代码能够编译，我们需要放入 "),s("code",[this._v("Context")]),this._v(" 中字符串 slice 和 "),s("code",[this._v("Parser")]),this._v(" 中 "),s("code",[this._v("Context")]),this._v(" 引用的生命周期参数。最直接的方法是在每处都使用相同的生命周期，如示例 19-13 所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么我们如何为 "),s("code",[this._v("Context")]),this._v(" 中的字符串 slice 和 "),s("code",[this._v("Parser")]),this._v(" 中 "),s("code",[this._v("Context")]),this._v(" 的引用放入生命周期参数呢？最直接的方法是在每处都使用相同的生命周期，如列表 19-13 所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-rust extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Context"),e("span",{attrs:{class:"token operator"}},[t._v("<")]),e("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),e("span",{attrs:{class:"token operator"}},[t._v(">")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token operator"}},[t._v("&")]),e("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),t._v(" str"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Parser"),e("span",{attrs:{class:"token operator"}},[t._v("<")]),e("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),e("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    context"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token operator"}},[t._v("&")]),e("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),t._v(" Context"),e("span",{attrs:{class:"token operator"}},[t._v("<")]),e("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),e("span",{attrs:{class:"token operator"}},[t._v(">")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{attrs:{class:"token keyword"}},[t._v("impl")]),e("span",{attrs:{class:"token operator"}},[t._v("<")]),e("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),e("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" Parser"),e("span",{attrs:{class:"token operator"}},[t._v("<")]),e("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),e("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("parse")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token operator"}},[t._v("&")]),e("span",{attrs:{class:"token keyword"}},[t._v("self")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Result"),e("span",{attrs:{class:"token operator"}},[t._v("<")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("str"),e("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{attrs:{class:"token function"}},[t._v("Err")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token operator"}},[t._v("&")]),e("span",{attrs:{class:"token keyword"}},[t._v("self")]),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("context"),e("span",{attrs:{class:"token number"}},[t._v(".0")]),e("span",{attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{attrs:{class:"token number"}},[t._v("1")]),e("span",{attrs:{class:"token punctuation"}},[t._v("..")]),e("span",{attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 19-13: 将所有 "),s("code",[this._v("Context")]),this._v(" 和 "),s("code",[this._v("Parser")]),this._v(" 中的引用标注为相同的生命周期参数")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("这次可以编译了，并告诉了 Rust "),e("code",[t._v("Parser")]),t._v(" 存放了一个 "),e("code",[t._v("Context")]),t._v(" 的引用，拥有生命周期 "),e("code",[t._v("'a")]),t._v("，且 "),e("code",[t._v("Context")]),t._v(" 存放了一个字符串 slice，它也与 "),e("code",[t._v("Parser")]),t._v(" 中 "),e("code",[t._v("Context")]),t._v(" 的引用存在的一样久。Rust 编译器的错误信息表明这些引用需要生命周期参数，现在我们增加了这些生命周期参数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接下来，在示例 19-14 中，让我们编写一个获取 "),s("code",[this._v("Context")]),this._v(" 的实例，使用 "),s("code",[this._v("Parser")]),this._v(" 来解析其内容，并返回 "),s("code",[this._v("parse")]),this._v(" 的返回值的函数。这还不能运行：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("fn parse_context(context: Context) -> Result<(), &str> {\n    Parser { context: &context }.parse()\n}\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 19-14: 一个增加获取 "),s("code",[this._v("Context")]),this._v(" 并使用 "),s("code",[this._v("Parser")]),this._v(" 的函数 "),s("code",[this._v("parse_context")]),this._v(" 的尝试")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当尝试编译这段额外带有 "),s("code",[this._v("parse_context")]),this._v(" 函数的代码时会得到两个相当冗长的错误：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("error[E0597]: borrowed value does not live long enough\n  --\x3e src/lib.rs:14:5\n   |\n14 |     Parser { context: &context }.parse()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ does not live long enough\n15 | }\n   | - temporary value only lives until here\n   |\nnote: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 13:1...\n  --\x3e src/lib.rs:13:1\n   |\n13 | / fn parse_context(context: Context) -> Result<(), &str> {\n14 | |     Parser { context: &context }.parse()\n15 | | }\n   | |_^\n\nerror[E0597]: `context` does not live long enough\n  --\x3e src/lib.rs:14:24\n   |\n14 |     Parser { context: &context }.parse()\n   |                        ^^^^^^^ does not live long enough\n15 | }\n   | - borrowed value only lives until here\n   |\nnote: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 13:1...\n  --\x3e src/lib.rs:13:1\n   |\n13 | / fn parse_context(context: Context) -> Result<(), &str> {\n14 | |     Parser { context: &context }.parse()\n15 | | }\n   | |_^\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("这些错误表明我们创建的两个 "),e("code",[t._v("Parser")]),t._v(" 实例和 "),e("code",[t._v("context")]),t._v(" 参数从 "),e("code",[t._v("Parser")]),t._v(" 被创建开始一直存活到 "),e("code",[t._v("parse_context")]),t._v(" 函数结束，不过他们都需要在整个函数的生命周期中都有效。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("换句话说，"),e("code",[t._v("Parser")]),t._v(" 和 "),e("code",[t._v("context")]),t._v(" 需要比整个函数 "),e("strong",[t._v("长寿")]),t._v("（"),e("em",[t._v("outlive")]),t._v("）并在函数开始之前和结束之后都有效以确保代码中的所有引用始终是有效的。虽然我们创建的两个 "),e("code",[t._v("Parser")]),t._v(" 和 "),e("code",[t._v("context")]),t._v(" 参数在函数的结尾就离开了作用域（因为 "),e("code",[t._v("parse_context")]),t._v(" 获取了 "),e("code",[t._v("context")]),t._v(" 的所有权）。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("为了理解为什么会得到这些错误，让我们再次看看示例 19-13 中的定义，特别是 "),s("code",[this._v("parse")]),this._v(" 方法的签名中的引用：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("    fn parse(&self) -> Result<(), &str> {\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("    fn parse<'a>(&'a self) -> Result<(), &'a str> {\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("正是如此，"),e("code",[t._v("parse")]),t._v(" 返回值的错误部分的生命周期与 "),e("code",[t._v("Parser")]),t._v(" 实例的生命周期（"),e("code",[t._v("parse")]),t._v(" 方法签名中的 "),e("code",[t._v("&self")]),t._v("）相绑定。这就可以理解了：因为返回的字符串 slice 引用了 "),e("code",[t._v("Parser")]),t._v(" 存放的 "),e("code",[t._v("Context")]),t._v(" 实例中的字符串 slice，同时在 "),e("code",[t._v("Parser")]),t._v(" 结构体的定义中指定了 "),e("code",[t._v("Parser")]),t._v(" 中存放的 "),e("code",[t._v("Context")]),t._v(" 引用的生命周期和 "),e("code",[t._v("Context")]),t._v(" 中存放的字符串 slice 的生命周期应该一致。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("问题是 "),e("code",[t._v("parse_context")]),t._v(" 函数返回 "),e("code",[t._v("parse")]),t._v(" 的返回值，所以 "),e("code",[t._v("parse_context")]),t._v(" 返回值的生命周期也与 "),e("code",[t._v("Parser")]),t._v(" 的生命周期相联系。不过 "),e("code",[t._v("parse_context")]),t._v(" 函数中创建的 "),e("code",[t._v("Parser")]),t._v(" 实例并不能存活到函数结束之后（它是临时的），同时 "),e("code",[t._v("context")]),t._v(" 将会在函数的结尾离开作用域（"),e("code",[t._v("parse_context")]),t._v(" 获取了它的所有权）。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Rust 认为我们尝试返回一个在函数结尾离开作用域的值，因为我们将所有的生命周期都标注为相同的生命周期参数。这告诉了 Rust "),s("code",[this._v("Context")]),this._v(" 中存放的字符串 slice 的生命周期与 "),s("code",[this._v("Parser")]),this._v(" 中存放的 "),s("code",[this._v("Context")]),this._v(" 引用的生命周期一致。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[e("code",[t._v("parse_context")]),t._v(" 函数并不知道 "),e("code",[t._v("parse")]),t._v(" 函数里面是什么，返回的字符串 slice 将比 "),e("code",[t._v("Context")]),t._v(" 和 "),e("code",[t._v("Parser")]),t._v(" 都存活的更久，同时 "),e("code",[t._v("parse_context")]),t._v(" 返回的引用指向字符串 slice，而不是 "),e("code",[t._v("Context")]),t._v(" 或 "),e("code",[t._v("Parser")]),t._v("。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("通过了解 "),e("code",[t._v("parse")]),t._v(" 实现所做的工作，可以知道 "),e("code",[t._v("parse")]),t._v(" 的返回值（的生命周期）与 "),e("code",[t._v("Parser")]),t._v(" 相联系的唯一理由是它引用了 "),e("code",[t._v("Parser")]),t._v(" 的 "),e("code",[t._v("Context")]),t._v("，也就是引用了这个字符串 slice，这正是 "),e("code",[t._v("parse_context")]),t._v(" 所需要关心的生命周期。需要一个方法来告诉 Rust "),e("code",[t._v("Context")]),t._v(" 中的字符串 slice 与 "),e("code",[t._v("Parser")]),t._v(" 中 "),e("code",[t._v("Context")]),t._v(" 的引用有着不同的生命周期，而且 "),e("code",[t._v("parse_context")]),t._v(" 返回值与 "),e("code",[t._v("Context")]),t._v(" 中字符串 slice 的生命周期相联系。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("首先尝试像示例 19-15 那样给予 "),e("code",[t._v("Parser")]),t._v(" 和 "),e("code",[t._v("Context")]),t._v(" 不同的生命周期参数。这里选择了生命周期参数名 "),e("code",[t._v("'s")]),t._v(" 和 "),e("code",[t._v("'c")]),t._v(" 是为了使得 "),e("code",[t._v("Context")]),t._v(" 中字符串 slice 与 "),e("code",[t._v("Parser")]),t._v(" 中 "),e("code",[t._v("Context")]),t._v(" 引用的生命周期显得更明了（英文首字母）。注意这并不能完全解决问题，不过这是一个开始，我们将看看为什么这还不足以能够编译代码。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("struct Context<'s>(&'s str);\n\nstruct Parser<'c, 's> {\n    context: &'c Context<'s>,\n}\n\nimpl<'c, 's> Parser<'c, 's> {\n    fn parse(&self) -> Result<(), &'s str> {\n        Err(&self.context.0[1..])\n    }\n}\n\nfn parse_context(context: Context) -> Result<(), &str> {\n    Parser { context: &context }.parse()\n}\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 19-15: 为字符串 slice 和 "),s("code",[this._v("Context")]),this._v(" 的引用指定不同的生命周期参数")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里在与示例 19-13 完全相同的地方标注了引用的生命周期，不过根据引用是字符串 slice 或 "),s("code",[this._v("Context")]),this._v(" 与否使用了不同的参数。另外还在 "),s("code",[this._v("parse")]),this._v(" 返回值的字符串 slice 部分增加了注解来表明它与 "),s("code",[this._v("Context")]),this._v(" 中字符串 slice 的生命周期相关联。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("error[E0491]: in type `&'c Context<'s>`, reference has a longer lifetime than the data it references\n --\x3e src/lib.rs:4:5\n  |\n4 |     context: &'c Context<'s>,\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n  |\nnote: the pointer is valid for the lifetime 'c as defined on the struct at 3:1\n --\x3e src/lib.rs:3:1\n  |\n3 | / struct Parser<'c, 's> {\n4 | |     context: &'c Context<'s>,\n5 | | }\n  | |_^\nnote: but the referenced data is only valid for the lifetime 's as defined on the struct at 3:1\n --\x3e src/lib.rs:3:1\n  |\n3 | / struct Parser<'c, 's> {\n4 | |     context: &'c Context<'s>,\n5 | | }\n  | |_^\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("Rust 并不知道 "),e("code",[t._v("'c")]),t._v(" 与 "),e("code",[t._v("'s")]),t._v(" 之间的任何联系。为了保证有效性，"),e("code",[t._v("Context")]),t._v(" 中引用的带有生命周期 "),e("code",[t._v("'s")]),t._v(" 的数据需要遵守它比带有生命周期 "),e("code",[t._v("'c")]),t._v(" 的 "),e("code",[t._v("Context")]),t._v(" 的引用存活得更久的保证。如果 "),e("code",[t._v("'s")]),t._v(" 不比 "),e("code",[t._v("'c")]),t._v(" 更长久，那么 "),e("code",[t._v("Context")]),t._v(" 的引用可能不再有效。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("这就引出了本部分的要点：Rust 的 "),e("strong",[t._v("生命周期子类型")]),t._v("（"),e("em",[t._v("lifetime subtyping")]),t._v("）功能，这是一个指定一个生命周期不会短于另一个的方法。在声明生命周期参数的尖括号中，可以照常声明一个生命周期 "),e("code",[t._v("'a")]),t._v("，并通过语法 "),e("code",[t._v("'b: 'a")]),t._v(" 声明一个不短于 "),e("code",[t._v("'a")]),t._v(" 的生命周期 "),e("code",[t._v("'b")]),t._v("。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("在 "),e("code",[t._v("Parser")]),t._v(" 的定义中，为了表明 "),e("code",[t._v("'s")]),t._v("（字符串 slice 的生命周期）保证至少与 "),e("code",[t._v("'c")]),t._v("（"),e("code",[t._v("Context")]),t._v(" 引用的生命周期）一样长，需将生命周期声明改为如此：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-rust extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[t._v("# "),e("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Context"),e("span",{attrs:{class:"token operator"}},[t._v("<")]),e("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),e("span",{attrs:{class:"token operator"}},[t._v(">")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token operator"}},[t._v("&")]),e("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),t._v(" str"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n"),e("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Parser"),e("span",{attrs:{class:"token operator"}},[t._v("<")]),e("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'c,")]),t._v(" "),e("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'s:")]),t._v(" "),e("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'c")]),e("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    context"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token operator"}},[t._v("&")]),e("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'c")]),t._v(" Context"),e("span",{attrs:{class:"token operator"}},[t._v("<")]),e("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'s")]),e("span",{attrs:{class:"token operator"}},[t._v(">")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("现在 "),e("code",[t._v("Parser")]),t._v(" 中 "),e("code",[t._v("Context")]),t._v(" 的引用与 "),e("code",[t._v("Context")]),t._v(" 中字符串 slice 就有了不同的生命周期，并且保证了字符串 slice 的生命周期比 "),e("code",[t._v("Context")]),t._v(" 引用的要长。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"生命周期-bound-用于泛型的引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生命周期-bound-用于泛型的引用","aria-hidden":"true"}},[this._v("#")]),this._v(" 生命周期 bound 用于泛型的引用")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在第十章 “trait bound” 部分，我们讨论了如何在泛型类型上使用 trait bound。也可以像泛型那样为生命周期参数增加限制，这被称为 "),s("strong",[this._v("生命周期 bound")]),this._v("（"),s("em",[this._v("lifetime bounds")]),this._v("）。生命周期 bound 帮助 Rust 验证泛型的引用不会存在的比其引用的数据更久。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("例如，考虑一下一个封装了引用的类型。回忆一下第十五章 “"),e("code",[t._v("RefCell<T>")]),t._v(" 和内部可变性模式” 部分的 "),e("code",[t._v("RefCell<T>")]),t._v(" 类型：其 "),e("code",[t._v("borrow")]),t._v(" 和 "),e("code",[t._v("borrow_mut")]),t._v(" 方法分别返回 "),e("code",[t._v("Ref")]),t._v(" 和 "),e("code",[t._v("RefMut")]),t._v(" 类型。这些类型是引用的封装，他们在运行时记录检查借用规则。"),e("code",[t._v("Ref")]),t._v(" 结构体的定义如示例 19-16 所示，目前还不带有生命周期 bound：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("struct Ref<'a, T>(&'a T);\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 19-16: 定义结构体来封装泛型的引用；开始时没有生命周期约束")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("若不显式限制生命周期 "),s("code",[this._v("'a")]),this._v(" 为与泛型参数 "),s("code",[this._v("T")]),this._v(" 有关，会得到一个错误因为 Rust 不知道泛型 "),s("code",[this._v("T")]),this._v(" 会存活多久：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("error[E0309]: the parameter type `T` may not live long enough\n --\x3e src/lib.rs:1:19\n  |\n1 | struct Ref<'a, T>(&'a T);\n  |                   ^^^^^^\n  |\n  = help: consider adding an explicit lifetime bound `T: 'a`...\nnote: ...so that the reference type `&'a T` does not outlive the data it points at\n --\x3e src/lib.rs:1:19\n  |\n1 | struct Ref<'a, T>(&'a T);\n  |                   ^^^^^^\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("因为 "),e("code",[t._v("T")]),t._v(" 可以是任意类型，"),e("code",[t._v("T")]),t._v(" 自身也可能是一个引用，或者是一个存放了一个或多个引用的类型，而他们各自可能有着不同的生命周期。Rust 不能确认 "),e("code",[t._v("T")]),t._v(" 会与 "),e("code",[t._v("'a")]),t._v(" 存活的一样久。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("consider adding an explicit lifetime bound `T: 'a` so that the reference type\n`&'a T` does not outlive the data it points at\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("示例 19-17 展示了如何按照这个建议，在声明泛型 "),s("code",[this._v("T")]),this._v(" 时指定生命周期 bound。。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("列表 19-17 展示了按照这个建议，在声明泛型 "),s("code",[this._v("T")]),this._v(" 时指定生命周期约束。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-rust extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Ref"),e("span",{attrs:{class:"token operator"}},[t._v("<")]),e("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a,")]),t._v(" T"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),e("span",{attrs:{class:"token operator"}},[t._v(">")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token operator"}},[t._v("&")]),e("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),t._v(" T"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 19-17: 为 "),s("code",[this._v("T")]),this._v(" 增加生命周期 bound 来指定 "),s("code",[this._v("T")]),this._v(" 中的任何引用需至少与 "),s("code",[this._v("'a")]),this._v(" 存活的一样久")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在代码可以编译了，因为 "),s("code",[this._v("T: 'a")]),this._v(" 语法指定了 "),s("code",[this._v("T")]),this._v(" 可以为任意类型，不过如果它包含任何引用的话，其生命周期必须至少与 "),s("code",[this._v("'a")]),this._v(" 一样长。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("我们可以选择不同的方法来解决这个问题，如示例 19-18 中 "),e("code",[t._v("StaticRef")]),t._v(" 的结构体定义所示，通过在 "),e("code",[t._v("T")]),t._v(" 上增加 "),e("code",[t._v("'static")]),t._v(" 生命周期约束。这意味着如果 "),e("code",[t._v("T")]),t._v(" 包含任何引用，他们必须有 "),e("code",[t._v("'static")]),t._v(" 生命周期：")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-rust extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" StaticRef"),e("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'static")]),e("span",{attrs:{class:"token operator"}},[t._v(">")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token operator"}},[t._v("&")]),e("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'static")]),t._v(" T"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[e("span",{staticClass:"caption"},[t._v("示例 19-18: 在 "),e("code",[t._v("T")]),t._v(" 上增加 "),e("code",[t._v("'static")]),t._v(" 生命周期 bound，来限制 "),e("code",[t._v("T")]),t._v(" 为只拥有 "),e("code",[t._v("'static")]),t._v(" 生命周期的引用或没有引用的类型")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("因为 "),s("code",[this._v("'static")]),this._v(" 意味着引用必须同整个程序存活的一样长，一个不包含引用的类型满足所有引用都与整个程序存活的一样长的标准（因为他们没有引用）。对于借用检查器来说它关心的是引用是否存活的足够久，没有引用的类型与有永远存在的引用的类型并没有真正的区别；对于确定引用是否比其所引用的值存活得较短的目的来说两者是一样的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"trait-对象生命周期的推断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#trait-对象生命周期的推断","aria-hidden":"true"}},[this._v("#")]),this._v(" trait 对象生命周期的推断")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("在第十七章的 “为使用不同类型的值而设计的 trait 对象” 部分，我们讨论了 trait 对象，它包含一个位于引用之后的 trait，这允许我们进行动态分发。我们所没有讨论的是如果 trait 对象中实现 trait 的类型带有生命周期时会发生什么。考虑一下示例 19-19，其中有 trait "),e("code",[t._v("Red")]),t._v(" 和结构体 "),e("code",[t._v("Ball")]),t._v("。"),e("code",[t._v("Ball")]),t._v(" 存放了一个引用（因此有一个生命周期参数）并实现了 trait "),e("code",[t._v("Red")]),t._v("。我们希望使用一个作为 trait 对象 "),e("code",[t._v("Box<Red>")]),t._v(" 的 "),e("code",[t._v("Ball")]),t._v(" 实例：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-rust extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" Red "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Ball"),e("span",{attrs:{class:"token operator"}},[t._v("<")]),e("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),e("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    diameter"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token operator"}},[t._v("&")]),e("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),t._v(" i32"),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{attrs:{class:"token keyword"}},[t._v("impl")]),e("span",{attrs:{class:"token operator"}},[t._v("<")]),e("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),e("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" Red "),e("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" Ball"),e("span",{attrs:{class:"token operator"}},[t._v("<")]),e("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'a")]),e("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("main")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{attrs:{class:"token number"}},[t._v("5")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Box"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{attrs:{class:"token function"}},[t._v("new")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Ball "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" diameter"),e("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("num "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{attrs:{class:"token keyword"}},[t._v("as")]),t._v(" Box"),e("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Red"),e("span",{attrs:{class:"token operator"}},[t._v(">")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 19-19: 使用一个带有生命周期的类型用于 trait 对象")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这段代码能没有任何错误的编译，即便并没有明确指出 "),s("code",[this._v("obj")]),this._v(" 中涉及的任何生命周期。这是因为有如下生命周期与 trait 对象必须遵守的规则：")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[t._v("trait 对象的默认生命周期是 "),e("code",[t._v("'static")]),t._v("。")]),t._v(" "),e("li",[t._v("如果有 "),e("code",[t._v("&'a X")]),t._v(" 或 "),e("code",[t._v("&'a mut X")]),t._v("，则默认生命周期是 "),e("code",[t._v("'a")]),t._v("。")]),t._v(" "),e("li",[t._v("如果只有 "),e("code",[t._v("T: 'a")]),t._v(" 从句， 则默认生命周期是 "),e("code",[t._v("'a")]),t._v("。")]),t._v(" "),e("li",[t._v("如果有多个类似 "),e("code",[t._v("T: 'a")]),t._v(" 的从句，则没有默认生命周期；必须明确指定。")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("当必须明确指定时，可以为像 "),e("code",[t._v("Box<Red>")]),t._v(" 这样的 trait 对象增加生命周期 bound，根据需要使用语法 "),e("code",[t._v("Box<Foo + 'a>")]),t._v(" 或 "),e("code",[t._v("Box<Foo + 'static>")]),t._v("。正如其他的 bound，这意味着任何 "),e("code",[t._v("Red")]),t._v(" trait 的实现如果在内部包含有引用, 这些引用就必须拥有与 trait 对象 bound 中所指定的相同的生命周期。")])}],!1,null,null,null);n.options.__file="ch19-02-advanced-lifetimes.md";s.default=n.exports}}]);