(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{193:function(t,e,_){"use strict";_.r(e);var r=_(0),v=Object(r.a)({},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("div",{staticClass:"content"},[t._m(0),t._v(" "),_("blockquote",[_("p",[_("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/second-edition/src/ch15-00-smart-pointers.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch15-00-smart-pointers.md"),_("OutboundLink")],1),t._v(" "),_("br"),t._v("\ncommit 68267b982a226fa252e9afa1a5029396ccf5fa03")])]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),_("p",[t._v("考虑到智能指针是一个在 Rust 经常被使用的通用设计模式，本章并不会覆盖所有现存的智能指针。很多库都有自己的智能指针而你也可以编写属于你自己的智能指针。这里将会讲到的是来自标准库中最常用的一些：")]),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),_("p",[t._v("让我们开始吧！")])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"智能指针"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#智能指针","aria-hidden":"true"}},[this._v("#")]),this._v(" 智能指针")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("p",[_("strong",[t._v("指针")]),t._v(" （"),_("em",[t._v("pointer")]),t._v("）是一个包含内存地址的变量的通用概念。这个地址引用，或 “指向”（points at）一些其他数据。Rust 中最常见的指针是第四章介绍的 "),_("strong",[t._v("引用")]),t._v("（"),_("em",[t._v("reference")]),t._v("）。引用以 "),_("code",[t._v("&")]),t._v(" 符号为标志并借用了他们所指向的值。除了引用数据它们没有任何其他特殊功能。它们也没有任何额外开销，所以应用的最多。")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("p",[t._v("另一方面，"),_("strong",[t._v("智能指针")]),t._v("（"),_("em",[t._v("smart pointers")]),t._v("）是一类数据结构，他们的表现类似指针，但是也拥有额外的元数据和功能。智能指针的概念并不为 Rust 所独有；其起源于 C++ 并存在于其他语言中。Rust 标准库中不同的智能指针提供了多于引用的额外功能。本章将会探索的一个例子便是 "),_("strong",[t._v("引用计数")]),t._v(" （"),_("em",[t._v("reference counting")]),t._v("）智能指针类型，其允许数据有多个所有者。引用计数智能指针记录总共有多少个所有者，并当没有任何所有者时负责清理数据。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在 Rust 中，普通引用和智能指针的一个额外的区别是引用是一类只借用数据的指针；相反大部分情况，智能指针 "),e("strong",[this._v("拥有")]),this._v(" 他们指向的数据。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("实际上本书中已经出现过一些智能指针，比如第八章的 "),e("code",[this._v("String")]),this._v(" 和 "),e("code",[this._v("Vec<T>")]),this._v("，虽然当时我们并不这么称呼它们。这些类型都属于智能指针因为它们拥有一些数据并允许你修改它们。它们也带有元数据（比如他们的容量）和额外的功能或保证（"),e("code",[this._v("String")]),this._v(" 的数据总是有效的 UTF-8 编码）。")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("p",[t._v("智能指针通常使用结构体实现。智能指针区别于常规结构体的显著特性在于其实现了 "),_("code",[t._v("Deref")]),t._v(" 和 "),_("code",[t._v("Drop")]),t._v(" trait。"),_("code",[t._v("Deref")]),t._v(" trait 允许智能指针结构体实例表现的像引用一样，这样就可以编写既用于引用又用于智能指针的代码。"),_("code",[t._v("Drop")]),t._v(" trait 允许我们自定义当智能指针离开作用域时运行的代码。本章会讨论这些 trait 以及为什么对于智能指针来说他们很重要。")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ul",[_("li",[_("code",[t._v("Box<T>")]),t._v("，用于在堆上分配值")]),t._v(" "),_("li",[_("code",[t._v("Rc<T>")]),t._v("，一个引用计数类型，其数据可以有多个所有者")]),t._v(" "),_("li",[_("code",[t._v("Ref<T>")]),t._v(" 和 "),_("code",[t._v("RefMut<T>")]),t._v("，通过 "),_("code",[t._v("RefCell<T>")]),t._v(" 访问，一个在运行时而不是在编译时执行借用规则的类型。")])])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("p",[t._v("同时我们会涉及 "),_("strong",[t._v("内部可变性")]),t._v("（"),_("em",[t._v("interior mutability")]),t._v("）模式，这时不可变类型暴露出改变其内部值的 API。我们也会讨论 "),_("strong",[t._v("引用循环")]),t._v("（"),_("em",[t._v("reference cycles")]),t._v("）会如何泄露内存，以及如何避免。")])}],!1,null,null,null);v.options.__file="ch15-00-smart-pointers.md";e.default=v.exports}}]);