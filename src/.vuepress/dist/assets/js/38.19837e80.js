(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{232:function(t,s,e){"use strict";e.r(s);var n=e(0),a=Object(n.a)({},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"content"},[t._m(0),t._v(" "),e("blockquote",[e("p",[e("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/second-edition/src/ch07-01-mod-and-the-filesystem.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch07-01-mod-and-the-filesystem.md"),e("OutboundLink")],1),t._v(" "),e("br"),t._v("\ncommit a120c730714e07f8f32d905e9374a50b2e0ffdf5")])]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._m(7),t._v(" "),t._m(8),t._v(" "),e("p",[t._v("我们将学习根据编写代码的意图来以不同方法组织库项目代码以适应多种情况。")]),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),e("p",[t._v("而这是示例 7-2 中例子的层次结构：")]),t._v(" "),t._m(26),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),t._m(38),t._m(39),t._v(" "),t._m(40),t._v(" "),t._m(41),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44),t._m(45),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),t._m(48),t._m(49),t._v(" "),t._m(50),t._v(" "),t._m(51),t._v(" "),t._m(52),t._m(53),t._v(" "),t._m(54),t._v(" "),t._m(55),t._m(56),t._v(" "),t._m(57),t._v(" "),t._m(58),t._v(" "),t._m(59),t._m(60),t._v(" "),t._m(61),t._v(" "),t._m(62),t._m(63),t._v(" "),t._m(64),t._m(65),t._v(" "),t._m(66),t._v(" "),e("p",[t._v("示例 7-5 中间的 note 事实上是非常有帮助的，因为它指出了一些我们还未讲到的操作：")]),t._v(" "),t._m(67),e("p",[t._v("我们可以按照记录所建议的去操作，而不是继续使用之前的与模块同名文件的模式：")]),t._v(" "),t._m(68),t._v(" "),e("p",[t._v("如下是执行这些步骤的命令：")]),t._v(" "),t._m(69),t._m(70),t._v(" "),t._m(71),e("p",[t._v("对应的文件布局现在看起来像这样：")]),t._v(" "),t._m(72),t._m(73),t._v(" "),t._m(74),t._m(75),t._v(" "),t._m(76),t._v(" "),t._m(77),t._v(" "),e("p",[t._v("让我们总结一下与文件有关的模块规则：")]),t._v(" "),t._m(78),t._v(" "),t._m(79),t._v(" "),t._m(80),t._m(81),t._v(" "),t._m(82)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"mod-和文件系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mod-和文件系统","aria-hidden":"true"}},[this._v("#")]),this._v(" "),s("code",[this._v("mod")]),this._v(" 和文件系统")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们将通过使用 Cargo 创建一个新项目来开始我们的模块之旅，不过这次不再创建一个二进制 crate，而是创建一个库 crate：一个其他人可以作为依赖导入的项目。第二章猜猜看游戏中作为依赖使用的 "),s("code",[this._v("rand")]),this._v(" 就是这样的 crate。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们将创建一个库的框架，提供一些通用的网络功能；我们将专注于模块和函数的组织，而不必担心函数体中的具体代码。这个项目叫做 "),s("code",[this._v("communicator")]),this._v("。若要创建一个库，应当使用 "),s("code",[this._v("--lib")]),this._v(" 参数而不是之前所用的 "),s("code",[this._v("--bin")]),this._v(" 参数：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("$ cargo new communicator --lib\n$ cd communicator\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("注意 Cargo 生成了 "),s("em",[this._v("src/lib.rs")]),this._v(" 而不是 "),s("em",[this._v("src/main.rs")]),this._v("。在 "),s("em",[this._v("src/lib.rs")]),this._v(" 中我们会找到这些：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-rust extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[e("span",{attrs:{class:"token attribute attr-name"}},[t._v("#[cfg(test)]")]),t._v("\n"),e("span",{attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" tests "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{attrs:{class:"token attribute attr-name"}},[t._v("#[test]")]),t._v("\n    "),e("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("it_works")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{attrs:{class:"token function"}},[t._v("assert_eq!")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{attrs:{class:"token number"}},[t._v("2")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token number"}},[t._v("4")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("Cargo 创建了一个空的测试来帮助我们开始库项目，不像使用 "),e("code",[t._v("--bin")]),t._v(" 参数那样创建一个 “Hello, world!” 二进制项目。在本章之后的 “使用 "),e("code",[t._v("super")]),t._v(" 访问父模块” 部分会介绍 "),e("code",[t._v("#[]")]),t._v(" 和 "),e("code",[t._v("mod tests")]),t._v(" 语法，目前只需确保它们位于 "),e("em",[t._v("src/lib.rs")]),t._v(" 底部即可。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("因为没有 "),s("em",[this._v("src/main.rs")]),this._v(" 文件，所以没有可供 Cargo 的 "),s("code",[this._v("cargo run")]),this._v(" 执行的东西。因此，我们将只使用 "),s("code",[this._v("cargo build")]),this._v(" 命令编译库 crate 的代码。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"模块定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模块定义","aria-hidden":"true"}},[this._v("#")]),this._v(" 模块定义")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("对于 "),e("code",[t._v("communicator")]),t._v(" 网络库，首先要定义一个叫做 "),e("code",[t._v("network")]),t._v(" 的模块，它包含一个叫做 "),e("code",[t._v("connect")]),t._v(" 的函数定义。Rust 中所有模块的定义都以关键字 "),e("code",[t._v("mod")]),t._v(" 开始。在 "),e("em",[t._v("src/lib.rs")]),t._v(" 文件的开头在测试代码的上面增加这些代码：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-rust extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" network "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("connect")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[e("code",[t._v("mod")]),t._v(" 关键字的后面是模块的名字，"),e("code",[t._v("network")]),t._v("，接着是位于大括号中的代码块。代码块中的一切都位于 "),e("code",[t._v("network")]),t._v(" 命名空间中。在这个例子中，只有一个函数，"),e("code",[t._v("connect")]),t._v("。如果想要在 "),e("code",[t._v("network")]),t._v(" 模块外面的代码中调用这个函数，需要指定模块名并使用命名空间语法 "),e("code",[t._v("::")]),t._v("，像这样："),e("code",[t._v("network::connect()")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("也可以在 "),s("em",[this._v("src/lib.rs")]),this._v(" 文件中同时存在多个模块。例如，再拥有一个 "),s("code",[this._v("client")]),this._v(" 模块，它也有一个叫做 "),s("code",[this._v("connect")]),this._v(" 的函数，如示例 7-1 中所示那样增加这个模块：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-rust extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" network "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("connect")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" client "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("connect")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 7-1："),s("code",[this._v("network")]),this._v(" 模块和 "),s("code",[this._v("client")]),this._v(" 一同定义于 "),s("em",[this._v("src/lib.rs")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在我们有了 "),s("code",[this._v("network::connect")]),this._v(" 函数和 "),s("code",[this._v("client::connect")]),this._v(" 函数。它们可能有着完全不同的功能，同时它们也不会彼此冲突，因为它们位于不同的模块。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("在这个例子中，因为我们构建的是一个库，作为库入口点的文件是 "),e("em",[t._v("src/lib.rs")]),t._v("。然而，对于创建模块来说，"),e("em",[t._v("src/lib.rs")]),t._v(" 并没有什么特殊意义。也可以在二进制 crate 的 "),e("em",[t._v("src/main.rs")]),t._v(" 中创建模块，正如在库 crate 的 "),e("em",[t._v("src/lib.rs")]),t._v(" 创建模块一样。事实上，也可以将模块放入其他模块中。这有助于随着模块的增长，将相关的功能组织在一起并又保持各自独立。选择组织代码的方式取决于如何考虑代码各部分之间的关系。例如，对于库的用户来说，"),e("code",[t._v("client")]),t._v(" 模块和它的函数 "),e("code",[t._v("connect")]),t._v(" 可能放在 "),e("code",[t._v("network")]),t._v(" 命名空间里显得更有道理，如示例 7-2 所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-rust extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" network "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("connect")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),e("span",{attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" client "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("connect")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 7-2：将 "),s("code",[this._v("client")]),this._v(" 模块移动到 "),s("code",[this._v("network")]),this._v(" 模块中")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("在 "),e("em",[t._v("src/lib.rs")]),t._v(" 文件中，将现有的 "),e("code",[t._v("mod network")]),t._v(" 和 "),e("code",[t._v("mod client")]),t._v(" 的定义替换为示例 7-2 中的定义，这里将 "),e("code",[t._v("client")]),t._v(" 模块作为 "),e("code",[t._v("network")]),t._v(" 的一个内部模块。现在我们有了 "),e("code",[t._v("network::connect")]),t._v(" 和 "),e("code",[t._v("network::client::connect")]),t._v(" 函数：它们都叫 "),e("code",[t._v("connect")]),t._v(" ，但它们并不互相冲突，因为它们在不同的命名空间中。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这样，模块之间形成了一个层次结构。"),s("em",[this._v("src/lib.rs")]),this._v(" 的内容位于最顶层，而其子模块位于较低的层次。如下是示例 7-1 中的例子以层次的方式考虑的结构：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("communicator\n ├── network\n └── client\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("communicator\n └── network\n     └── client\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以看到示例 7-2 中，"),s("code",[this._v("client")]),this._v(" 是 "),s("code",[this._v("network")]),this._v(" 的子模块，而不是它的同级模块。更为复杂的项目可以有很多的模块，所以它们需要符合逻辑地组合在一起以便记录它们。在项目中 “符合逻辑” 的意义全凭你的理解和库的用户对你项目领域的认识。利用我们这里讲到的技术来创建同级模块和嵌套的模块，总有一个会是你会喜欢的结构。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"将模块移动到其他文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#将模块移动到其他文件","aria-hidden":"true"}},[this._v("#")]),this._v(" 将模块移动到其他文件")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("位于层级结构中的模块，非常类似计算机领域的另一个我们非常熟悉的结构：文件系统！我们可以利用 Rust 的模块系统连同多个文件一起分解 Rust 项目，这样就不会是所有的内容都落到 "),s("em",[this._v("src/lib.rs")]),this._v(" 或 "),s("em",[this._v("src/main.rs")]),this._v(" 中了。为了举例，我们将从示例 7-3 中的代码开始：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-rust extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" client "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("connect")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" network "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("connect")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),e("span",{attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" server "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("connect")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[e("span",{staticClass:"caption"},[t._v("示例 7-3：三个模块，"),e("code",[t._v("client")]),t._v("、"),e("code",[t._v("network")]),t._v(" 和 "),e("code",[t._v("network::server")]),t._v("，它们都定义于 "),e("em",[t._v("src/lib.rs")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("em",[this._v("src/lib.rs")]),this._v(" 文件有如下层次结构：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("communicator\n ├── client\n └── network\n     └── server\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("如果这些模块有很多函数，而这些函数又很长，将难以在文件中寻找我们需要的代码。因为这些函数被嵌套进一个或多个 "),e("code",[t._v("mod")]),t._v(" 块中，同时函数中的代码也会开始变长。这就有充分的理由将 "),e("code",[t._v("client")]),t._v("、"),e("code",[t._v("network")]),t._v(" 和 "),e("code",[t._v("server")]),t._v(" 每一个模块从 "),e("em",[t._v("src/lib.rs")]),t._v(" 抽出并放入它们自己的文件中。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("首先，将 "),s("code",[this._v("client")]),this._v(" 模块的代码替换为只有 "),s("code",[this._v("client")]),this._v(" 模块声明，这样 "),s("em",[this._v("src/lib.rs")]),this._v(" 看起来应该像如示例 7-4 所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("mod client;\n\nmod network {\n    fn connect() {\n    }\n\n    mod server {\n        fn connect() {\n        }\n    }\n}\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 7-4：提取出 "),s("code",[this._v("client")]),this._v(" 模块的内容但仍将其声明留在 "),s("em",[this._v("src/lib.rs")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("这里我们仍然 "),e("strong",[t._v("声明")]),t._v(" 了 "),e("code",[t._v("client")]),t._v(" 模块，不过将代码块替换为了分号，这告诉了 Rust 在 "),e("code",[t._v("client")]),t._v(" 模块的作用域中寻找另一个定义代码的位置。换句话说，"),e("code",[t._v("mod client;")]),t._v(" 行意味着：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("mod client {\n    // contents of client.rs\n}\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("那么现在需要创建对应模块名的外部文件。在 "),e("em",[t._v("src/")]),t._v(" 目录创建一个 "),e("em",[t._v("client.rs")]),t._v(" 文件，接着打开它并输入如下内容，它是上一步被去掉的 "),e("code",[t._v("client")]),t._v(" 模块中的 "),e("code",[t._v("connect")]),t._v(" 函数：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/client.rs")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-rust extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("connect")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("注意这个文件中并不需要一个 "),e("code",[t._v("mod")]),t._v(" 声明；因为已经在 "),e("em",[t._v("src/lib.rs")]),t._v(" 中已经使用 "),e("code",[t._v("mod")]),t._v(" 声明了 "),e("code",[t._v("client")]),t._v(" 模块。这个文件仅仅提供 "),e("code",[t._v("client")]),t._v(" 模块的 "),e("strong",[t._v("内容")]),t._v("。如果在这里加上一个 "),e("code",[t._v("mod client")]),t._v("，那么就等于给 "),e("code",[t._v("client")]),t._v(" 模块增加了一个叫做 "),e("code",[t._v("client")]),t._v(" 的子模块了！")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("Rust 默认只知道 "),e("em",[t._v("src/lib.rs")]),t._v(" 中的内容。如果想要对项目加入更多文件，我们需要在 "),e("em",[t._v("src/lib.rs")]),t._v(" 中告诉 Rust 去寻找其他文件；这就是为什么 "),e("code",[t._v("mod client")]),t._v(" 需要被定义在 "),e("em",[t._v("src/lib.rs")]),t._v(" 而不能在 "),e("em",[t._v("src/client.rs")]),t._v(" 的原因。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在，一切应该能成功编译，虽然会有一些警告。记住使用 "),s("code",[this._v("cargo build")]),this._v(" 而不是 "),s("code",[this._v("cargo run")]),this._v("， 因为这是一个库 crate 而不是二进制 crate：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("$ cargo build\n   Compiling communicator v0.1.0 (file:///projects/communicator)\nwarning: function is never used: `connect`\n --\x3e src/client.rs:1:1\n  |\n1 | / fn connect() {\n2 | | }\n  | |_^\n  |\n  = note: #[warn(dead_code)] on by default\n\nwarning: function is never used: `connect`\n --\x3e src/lib.rs:4:5\n  |\n4 | /     fn connect() {\n5 | |     }\n  | |_____^\n\nwarning: function is never used: `connect`\n --\x3e src/lib.rs:8:9\n  |\n8 | /         fn connect() {\n9 | |         }\n  | |_________^\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这些警告提醒我们有从未被使用的函数。目前不用担心这些警告，在本章后面的 “使用 "),s("code",[this._v("pub")]),this._v(" 控制可见性” 部分会解决它们。好消息是，它们仅仅是警告，我们的项目能够成功编译。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("下面使用相同的模式将 "),s("code",[this._v("network")]),this._v(" 模块提取到自己的文件中。删除 "),s("em",[this._v("src/lib.rs")]),this._v(" 中 "),s("code",[this._v("network")]),this._v(" 模块的内容并在声明后加上一个分号，像这样：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("mod client;\n\nmod network;\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接着新建 "),s("em",[this._v("src/network.rs")]),this._v(" 文件并输入如下内容：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/network.rs")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-rust extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("connect")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" server "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("connect")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("注意这个模块文件中我们也使用了一个 "),s("code",[this._v("mod")]),this._v(" 声明；这是因为我们希望 "),s("code",[this._v("server")]),this._v(" 成为 "),s("code",[this._v("network")]),this._v(" 的一个子模块。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("现在再次运行 "),e("code",[t._v("cargo build")]),t._v("。成功！不过我们还需要再提取出另一个模块："),e("code",[t._v("server")]),t._v("。因为这是一个子模块——也就是模块中的模块——目前的将模块提取到对应名字的文件中的策略就不管用了。如果我们仍这么尝试则会出现错误。对 "),e("em",[t._v("src/network.rs")]),t._v(" 的第一个修改是用 "),e("code",[t._v("mod server;")]),t._v(" 替换 "),e("code",[t._v("server")]),t._v(" 模块的内容：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/network.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("fn connect() {\n}\n\nmod server;\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接着创建 "),s("em",[this._v("src/server.rs")]),this._v(" 文件并输入需要提取的 "),s("code",[this._v("server")]),this._v(" 模块的内容：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/server.rs")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-rust extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("connect")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当尝试运行 "),s("code",[this._v("cargo build")]),this._v(" 时，会出现如示例 7-5 中所示的错误：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("$ cargo build\n   Compiling communicator v0.1.0 (file:///projects/communicator)\nerror: cannot declare a new module at this location\n --\x3e src/network.rs:4:5\n  |\n4 | mod server;\n  |     ^^^^^^\n  |\nnote: maybe move this module `src/network.rs` to its own directory via `src/network/mod.rs`\n --\x3e src/network.rs:4:5\n  |\n4 | mod server;\n  |     ^^^^^^\nnote: ... or maybe `use` the module `server` instead of possibly redeclaring it\n --\x3e src/network.rs:4:5\n  |\n4 | mod server;\n  |     ^^^^^^\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 7-5：尝试将 "),s("code",[this._v("server")]),this._v(" 子模块提取到 "),s("em",[this._v("src/server.rs")]),this._v(" 时出现的错误")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("这个错误说明 “不能在这个位置新声明一个模块” 并指出 "),e("em",[t._v("src/network.rs")]),t._v(" 中的 "),e("code",[t._v("mod server;")]),t._v(" 这一行。看来 "),e("em",[t._v("src/network.rs")]),t._v(" 与 "),e("em",[t._v("src/lib.rs")]),t._v(" 在某些方面是不同的；继续阅读以理解这是为什么。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("note: maybe move this module `network` to its own directory via\n`network/mod.rs`\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ol",[e("li",[t._v("新建一个叫做 "),e("em",[t._v("network")]),t._v(" 的 "),e("strong",[t._v("目录")]),t._v("，这是父模块的名字")]),t._v(" "),e("li",[t._v("将 "),e("em",[t._v("src/network.rs")]),t._v(" 移动到新建的 "),e("em",[t._v("network")]),t._v(" 目录中并重命名为 "),e("em",[t._v("src/network/mod.rs")])]),t._v(" "),e("li",[t._v("将子模块文件 "),e("em",[t._v("src/server.rs")]),t._v(" 移动到 "),e("em",[t._v("network")]),t._v(" 目录中")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("$ mkdir src/network\n$ mv src/network.rs src/network/mod.rs\n$ mv src/server.rs src/network\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在如果运行 "),s("code",[this._v("cargo build")]),this._v(" 的话将顺利编译（虽然仍有警告）。现在模块的布局看起来仍然与示例 7-3 中所有代码都在 "),s("em",[this._v("src/lib.rs")]),this._v(" 中时完全一样：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("communicator\n ├── client\n └── network\n     └── server\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("└── src\n    ├── client.rs\n    ├── lib.rs\n    └── network\n        ├── mod.rs\n        └── server.rs\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("那么，当我们想要提取 "),e("code",[t._v("network::server")]),t._v(" 模块时，为什么也必须将 "),e("em",[t._v("src/network.rs")]),t._v(" 文件改名成 "),e("em",[t._v("src/network/mod.rs")]),t._v(" 文件呢，还有为什么要将 "),e("code",[t._v("network::server")]),t._v(" 的代码放入 "),e("em",[t._v("network")]),t._v(" 目录的 "),e("em",[t._v("src/network/server.rs")]),t._v(" 文件中呢？原因是如果 "),e("em",[t._v("server.rs")]),t._v(" 文件在 "),e("em",[t._v("src")]),t._v(" 目录中那么 Rust 就不能知道 "),e("code",[t._v("server")]),t._v(" 应当是 "),e("code",[t._v("network")]),t._v(" 的子模块。为了阐明这里 Rust 的行为，让我们考虑一下有着如下层级的另一个例子，其所有定义都位于 "),e("em",[t._v("src/lib.rs")]),t._v(" 中：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("communicator\n ├── client\n └── network\n     └── client\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("在这个例子中，仍然有这三个模块，"),e("code",[t._v("client")]),t._v("、"),e("code",[t._v("network")]),t._v(" 和 "),e("code",[t._v("network::client")]),t._v("。如果按照与上面最开始将模块提取到文件中相同的步骤来操作，对于 "),e("code",[t._v("client")]),t._v(" 模块会创建 "),e("em",[t._v("src/client.rs")]),t._v("。对于 "),e("code",[t._v("network")]),t._v(" 模块，会创建 "),e("em",[t._v("src/network.rs")]),t._v("。但是接下来不能将 "),e("code",[t._v("network::client")]),t._v(" 模块提取到 "),e("em",[t._v("src/client.rs")]),t._v(" 文件中，因为它已经存在了，对应顶层的 "),e("code",[t._v("client")]),t._v(" 模块！如果将 "),e("code",[t._v("client")]),t._v(" 和 "),e("code",[t._v("network::client")]),t._v(" 的代码都放入 "),e("em",[t._v("src/client.rs")]),t._v(" 文件，Rust 将无从可知这些代码是属于 "),e("code",[t._v("client")]),t._v(" 还是 "),e("code",[t._v("network::client")]),t._v(" 的。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("因此，为了将 "),e("code",[t._v("network")]),t._v(" 模块的子模块 "),e("code",[t._v("network::client")]),t._v(" 提取到一个文件中，需要为 "),e("code",[t._v("network")]),t._v(" 模块新建一个目录替代 "),e("em",[t._v("src/network.rs")]),t._v(" 文件。接着 "),e("code",[t._v("network")]),t._v(" 模块的代码将进入 "),e("em",[t._v("src/network/mod.rs")]),t._v(" 文件，而子模块 "),e("code",[t._v("network::client")]),t._v(" 将拥有其自己的文件 "),e("em",[t._v("src/network/client.rs")]),t._v("。现在顶层的 "),e("em",[t._v("src/client.rs")]),t._v(" 中的代码毫无疑问的都属于 "),e("code",[t._v("client")]),t._v(" 模块。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"模块文件系统的规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模块文件系统的规则","aria-hidden":"true"}},[this._v("#")]),this._v(" 模块文件系统的规则")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[t._v("如果一个叫做 "),e("code",[t._v("foo")]),t._v(" 的模块没有子模块，应该将 "),e("code",[t._v("foo")]),t._v(" 的声明放入叫做 "),e("em",[t._v("foo.rs")]),t._v(" 的文件中。")]),t._v(" "),e("li",[t._v("如果一个叫做 "),e("code",[t._v("foo")]),t._v(" 的模块有子模块，应该将 "),e("code",[t._v("foo")]),t._v(" 的声明放入叫做 "),e("em",[t._v("foo/mod.rs")]),t._v(" 的文件中。")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("这些规则适用于递归（嵌套），所以如果 "),e("code",[t._v("foo")]),t._v(" 模块有一个子模块 "),e("code",[t._v("bar")]),t._v(" 而 "),e("code",[t._v("bar")]),t._v(" 没有子模块，则 "),e("em",[t._v("src")]),t._v(" 目录中应该有如下文件：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("└── foo\n    ├── bar.rs (contains the declarations in `foo::bar`)\n    └── mod.rs (contains the declarations in `foo`, including `mod bar`)\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("模块自身则应该使用 "),s("code",[this._v("mod")]),this._v(" 关键字定义于父模块的文件中。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接下来，我们讨论一下 "),s("code",[this._v("pub")]),this._v(" 关键字，并除掉那些警告！")])}],!1,null,null,null);a.options.__file="ch07-01-mod-and-the-filesystem.md";s.default=a.exports}}]);