(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{234:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch06-03-if-let.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch06-03-if-let.md"),a("OutboundLink")],1),t._v(" "),a("br"),t._v("\ncommit a86c1d315789b3ca13b20d50ad5005c62bdd9e37")])]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._m(12),t._v(" "),t._m(13),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),a("p",[t._v("你的 Rust 程序现在能够使用结构体和枚举在自己的作用域内表现其内容了。在你的 API 中使用自定义类型保证了类型安全：编译器会确保你的函数只会得到它期望的类型的值。")]),t._v(" "),a("p",[t._v("为了向你的用户提供一个组织良好的 API，它使用起来很直观并且只向用户暴露他们确实需要的部分，那么现在就让我们转向 Rust 的模块系统吧。")])])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"if-let-简单控制流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#if-let-简单控制流","aria-hidden":"true"}},[this._v("#")]),this._v(" "),s("code",[this._v("if let")]),this._v(" 简单控制流")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("if let")]),t._v(" 语法让我们以一种不那么冗长的方式结合 "),a("code",[t._v("if")]),t._v(" 和 "),a("code",[t._v("let")]),t._v("，来处理只匹配一个模式的值而忽略其他模式的情况。考虑示例 6-6 中的程序，它匹配一个 "),a("code",[t._v("Option<u8>")]),t._v(" 值并只希望当值为 3 时执行代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" some_u8_value "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("Some")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("0u8")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("match")]),t._v(" some_u8_value "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("Some")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"three"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    _ "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 6-6："),s("code",[this._v("match")]),this._v(" 只关心当值为 "),s("code",[this._v("Some(3)")]),this._v(" 时执行代码")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们想要对 "),a("code",[t._v("Some(3)")]),t._v(" 匹配进行操作但是不想处理任何其他 "),a("code",[t._v("Some<u8>")]),t._v(" 值或 "),a("code",[t._v("None")]),t._v(" 值。为了满足 "),a("code",[t._v("match")]),t._v(" 表达式（穷尽性）的要求，必须在处理完这唯一的成员后加上 "),a("code",[t._v("_ => ()")]),t._v("，这样也要增加很多样板代码。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("不过我们可以使用 "),s("code",[this._v("if let")]),this._v(" 这种更短的方式编写。如下代码与示例 6-6 中的 "),s("code",[this._v("match")]),this._v(" 行为一致：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[t._v("# "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" some_u8_value "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("Some")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("0u8")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("Some")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" some_u8_value "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"three"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("if let")]),this._v(" 获取通过等号分隔的一个模式和一个表达式。它的工作方式与 "),s("code",[this._v("match")]),this._v(" 相同，这里的表达式对应 "),s("code",[this._v("match")]),this._v(" 而模式则对应第一个分支。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("使用 "),a("code",[t._v("if let")]),t._v(" 意味着编写更少代码，更少的缩进和更少的样板代码。然而，这样会失去 "),a("code",[t._v("match")]),t._v(" 强制要求的穷尽性检查。"),a("code",[t._v("match")]),t._v(" 和 "),a("code",[t._v("if let")]),t._v(" 之间的选择依赖特定的环境以及增加简洁度和失去穷尽性检查的权衡取舍。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("换句话说，可以认为 "),s("code",[this._v("if let")]),this._v(" 是 "),s("code",[this._v("match")]),this._v(" 的一个语法糖，它当值匹配某一模式时执行代码而忽略所有其他值。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以在 "),a("code",[t._v("if let")]),t._v(" 中包含一个 "),a("code",[t._v("else")]),t._v("。"),a("code",[t._v("else")]),t._v(" 块中的代码与 "),a("code",[t._v("match")]),t._v(" 表达式中的 "),a("code",[t._v("_")]),t._v(" 分支块中的代码相同，这样的 "),a("code",[t._v("match")]),t._v(" 表达式就等同于 "),a("code",[t._v("if let")]),t._v(" 和 "),a("code",[t._v("else")]),t._v("。回忆一下示例 6-4 中 "),a("code",[t._v("Coin")]),t._v(" 枚举的定义，其 "),a("code",[t._v("Quarter")]),t._v(" 成员也包含一个 "),a("code",[t._v("UsState")]),t._v(" 值。如果想要计数所有不是 25 美分的硬币的同时也报告 25 美分硬币所属的州，可以使用这样一个 "),a("code",[t._v("match")]),t._v(" 表达式：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[t._v("# "),a("span",{attrs:{class:"token attribute attr-name"}},[t._v("#[derive(Debug)]")]),t._v("\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" UsState "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#    Alabama"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#    Alaska"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Coin "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#    Penny"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#    Nickel"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#    Dime"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#    "),a("span",{attrs:{class:"token function"}},[t._v("Quarter")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UsState"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" coin "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Coin"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Penny"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" count "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("match")]),t._v(" coin "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Coin"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("Quarter")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"State quarter from {:?}!"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" state"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    _ "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" count "),a("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("或者可以使用这样的 "),s("code",[this._v("if let")]),this._v(" 和 "),s("code",[this._v("else")]),this._v(" 表达式：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[t._v("# "),a("span",{attrs:{class:"token attribute attr-name"}},[t._v("#[derive(Debug)]")]),t._v("\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" UsState "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#    Alabama"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#    Alaska"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Coin "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#    Penny"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#    Nickel"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#    Dime"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#    "),a("span",{attrs:{class:"token function"}},[t._v("Quarter")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UsState"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" coin "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Coin"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Penny"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" count "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" Coin"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("Quarter")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" coin "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"State quarter from {:?}!"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" state"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    count "),a("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果你的程序遇到一个使用 "),s("code",[this._v("match")]),this._v(" 表达起来过于啰嗦的逻辑，记住 "),s("code",[this._v("if let")]),this._v(" 也在你的 Rust 工具箱中。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在我们涉及到了如何使用枚举来创建有一系列可列举值的自定义类型。我们也展示了标准库的 "),s("code",[this._v("Option<T>")]),this._v(" 类型是如何帮助你利用类型系统来避免出错的。当枚举值包含数据时，你可以根据需要处理多少情况来选择使用 "),s("code",[this._v("match")]),this._v(" 或 "),s("code",[this._v("if let")]),this._v(" 来获取并使用这些值。")])}],!1,null,null,null);e.options.__file="ch06-03-if-let.md";s.default=e.exports}}]);