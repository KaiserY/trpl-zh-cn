(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{187:function(t,n,s){"use strict";s.r(n);var a=s(0),e=Object(a.a)({},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/second-edition/src/ch15-06-reference-cycles.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch15-06-reference-cycles.md"),s("OutboundLink")],1),t._v(" "),s("br"),t._v("\ncommit cd7d9bcfb099c224439db0ba3b02956d9843864d")])]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._m(16),t._v(" "),t._m(17),t._v(" "),s("p",[t._v("为了更形象的展示，我们创建了一个如图 15-30 所示的引用循环：")]),t._v(" "),s("img",{staticClass:"center",attrs:{alt:"Reference cycle of lists",src:"img/trpl15-04.svg"}}),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),s("p",[t._v("这个特定的例子中，创建了引用循环之后程序立刻就结束了。这个循环的结果并不可怕。如果在更为复杂的程序中并在循环里分配了很多内存并占有很长时间，这个程序会使用多于它所需要的内存，并有可能压垮系统并造成没有内存可供使用。")]),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),t._m(38),t._v(" "),s("p",[t._v("现在换一种方式思考这个关系，父结点应该拥有其子结点：如果父结点被丢弃了，其子结点也应该被丢弃。然而子结点不应该拥有其父结点：如果丢弃子结点，其父结点应该依然存在。这正是弱引用的例子！")]),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),t._m(41),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44),t._m(45),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),t._m(48),t._v(" "),t._m(49),t._v(" "),t._m(50),t._v(" "),t._m(51),t._m(52),t._v(" "),t._m(53),t._v(" "),t._m(54),t._v(" "),t._m(55),t._v(" "),t._m(56),t._m(57),t._v(" "),t._m(58),t._v(" "),t._m(59),t._v(" "),t._m(60),t._v(" "),t._m(61),t._v(" "),t._m(62),t._v(" "),t._m(63),t._v(" "),t._m(64),t._v(" "),s("p",[t._v("如果本章内容引起了你的兴趣并希望现在就实现你自己的智能指针的话，请阅读 "),s("a",{attrs:{href:"https://doc.rust-lang.org/stable/nomicon/",target:"_blank",rel:"noopener noreferrer"}},[t._v("“The Nomicon”"),s("OutboundLink")],1),t._v(" 来获取更多有用的信息。")]),t._v(" "),s("p",[t._v("接下来，让我们谈谈 Rust 的并发。我们还会学习到一些新的对并发有帮助的智能指针。")])])},[function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"引用循环与内存泄漏"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#引用循环与内存泄漏","aria-hidden":"true"}},[this._v("#")]),this._v(" 引用循环与内存泄漏")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("p",[t._v("Rust 的内存安全保证使其 "),s("strong",[t._v("难以")]),t._v(" 意外的制造永远也不会被清理的内存（被称为 "),s("strong",[t._v("内存泄露")]),t._v("（"),s("em",[t._v("memory leak")]),t._v("）），但并不是不可能。完全的避免内存泄露并不是同在编译时拒绝数据竞争一样为 Rust 的保证之一，这意味着内存泄露在 Rust 被认为是内存安全的。这一点可以通过 "),s("code",[t._v("Rc<T>")]),t._v(" 和 "),s("code",[t._v("RefCell<T>")]),t._v(" 看出：有可能会创建个个项之间相互引用的引用。这会造成内存泄露，因为每一项的引用计数将永远也到不了 0，其值也永远也不会被丢弃。")])},function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"制造引用循环"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#制造引用循环","aria-hidden":"true"}},[this._v("#")]),this._v(" 制造引用循环")])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[this._v("让我们看看引用循环是如何发生的以及如何避免它。以示例 15-28 中的 "),n("code",[this._v("List")]),this._v(" 枚举和 "),n("code",[this._v("tail")]),this._v(" 方法的定义开始：")])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[n("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language-rust,ignore extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("use std::rc::Rc;\nuse std::cell::RefCell;\nuse List::{Cons, Nil};\n\n#[derive(Debug)]\nenum List {\n    Cons(i32, RefCell<Rc<List>>),\n    Nil,\n}\n\nimpl List {\n    fn tail(&self) -> Option<&RefCell<Rc<List>>> {\n        match *self {\n            Cons(_, ref item) => Some(item),\n            Nil => None,\n        }\n    }\n}\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[n("span",{staticClass:"caption"},[this._v("示例：一个存放 "),n("code",[this._v("RefCell")]),this._v(" 的 cons list 定义，这样可以修改 "),n("code",[this._v("Cons")]),this._v(" 成员所引用的数据")])])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("p",[t._v("这里采用了示例 15-6 中 "),s("code",[t._v("List")]),t._v(" 定义的另一种变体。现在 "),s("code",[t._v("Cons")]),t._v(" 成员的第二个元素是 "),s("code",[t._v("RefCell<Rc<List>>")]),t._v("，这意味着不同于像示例 15-19 那样能够修改 "),s("code",[t._v("i32")]),t._v(" 的值，我们希望能够修改 "),s("code",[t._v("Cons")]),t._v(" 成员所指向的 "),s("code",[t._v("List")]),t._v("。这里还增加了一个 "),s("code",[t._v("tail")]),t._v(" 方法来方便我们在有 "),s("code",[t._v("Cons")]),t._v(" 成员的时候访问其第二项。")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("p",[t._v("在示例 15-29 中增加了一个 "),s("code",[t._v("main")]),t._v(" 函数，其使用了示例 15-28 中的定义。这些代码在 "),s("code",[t._v("a")]),t._v(" 中创建了一个列表，一个指向 "),s("code",[t._v("a")]),t._v(" 中列表的 "),s("code",[t._v("b")]),t._v(" 列表，接着修改 "),s("code",[t._v("b")]),t._v(" 中的列表指向 "),s("code",[t._v("a")]),t._v(" 中的列表，这会创建一个引用循环。在这个过程的多个位置有 "),s("code",[t._v("println!")]),t._v(" 语句展示引用计数。")])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[n("span",{staticClass:"filename"},[this._v("Filename: src/main.rs")])])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[t._v("# "),s("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" List"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Cons"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Nil"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),s("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("rc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Rc"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),s("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("cell"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("RefCell"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),s("span",{attrs:{class:"token attribute attr-name"}},[t._v("#[derive(Debug)]")]),t._v("\n# "),s("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" List "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),s("span",{attrs:{class:"token function"}},[t._v("Cons")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i32"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" RefCell"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Rc"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("List"),s("span",{attrs:{class:"token operator"}},[t._v(">>")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     Nil"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n# "),s("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" List "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),s("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("tail")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token operator"}},[t._v("&")]),s("span",{attrs:{class:"token keyword"}},[t._v("self")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Option"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),s("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("RefCell"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Rc"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("List"),s("span",{attrs:{class:"token operator"}},[t._v(">>")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#         "),s("span",{attrs:{class:"token keyword"}},[t._v("match")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("*")]),s("span",{attrs:{class:"token keyword"}},[t._v("self")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#             "),s("span",{attrs:{class:"token function"}},[t._v("Cons")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("ref")]),t._v(" item"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("Some")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#             Nil "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" None"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#         "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#     "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),s("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("main")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Rc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("new")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token function"}},[t._v("Cons")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("5")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" RefCell"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("new")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Rc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("new")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Nil"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{attrs:{class:"token function"}},[t._v("println!")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"a initial rc count = {}"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Rc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("strong_count")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token function"}},[t._v("println!")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"a next item = {:?}"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("tail")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Rc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("new")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token function"}},[t._v("Cons")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("10")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" RefCell"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("new")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Rc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("clone")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{attrs:{class:"token function"}},[t._v("println!")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"a rc count after b creation = {}"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Rc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("strong_count")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token function"}},[t._v("println!")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"b initial rc count = {}"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Rc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("strong_count")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("b"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token function"}},[t._v("println!")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"b next item = {:?}"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("tail")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("Some")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("link"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("tail")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("link"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("borrow_mut")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Rc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("clone")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("b"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{attrs:{class:"token function"}},[t._v("println!")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"b rc count after changing a = {}"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Rc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("strong_count")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("b"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token function"}},[t._v("println!")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"a rc count after changing a = {}"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Rc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("strong_count")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{attrs:{class:"token comment"}},[t._v("// Uncomment the next line to see that we have a cycle; it will")]),t._v("\n    "),s("span",{attrs:{class:"token comment"}},[t._v("// overflow the stack")]),t._v("\n    "),s("span",{attrs:{class:"token comment"}},[t._v('// println!("a next item = {:?}", a.tail());')]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[n("span",{staticClass:"caption"},[this._v("示例 15-29：创建一个引用循环：两个"),n("code",[this._v("List")]),this._v(" 值互相指向彼此")])])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("p",[t._v("这里在变量 "),s("code",[t._v("a")]),t._v(" 中创建了一个 "),s("code",[t._v("Rc")]),t._v(" 实例来存放初值为 "),s("code",[t._v("5, Nil")]),t._v(" 的 "),s("code",[t._v("List")]),t._v(" 值。接着在变量 "),s("code",[t._v("b")]),t._v(" 中创建了存放包含值 10 和指向列表 "),s("code",[t._v("a")]),t._v(" 的 "),s("code",[t._v("List")]),t._v(" 的另一个 "),s("code",[t._v("Rc")]),t._v(" 实例。")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("p",[t._v("最后，修改 "),s("code",[t._v("a")]),t._v(" 使其指向 "),s("code",[t._v("b")]),t._v(" 而不是 "),s("code",[t._v("Nil")]),t._v("，这就创建了一个循环。为此需要使用 "),s("code",[t._v("tail")]),t._v(" 方法获取 "),s("code",[t._v("a")]),t._v(" 中 "),s("code",[t._v("RefCell")]),t._v(" 的引用，并放入变量 "),s("code",[t._v("link")]),t._v(" 中。接着使用 "),s("code",[t._v("RefCell")]),t._v(" 的 "),s("code",[t._v("borrow_mut")]),t._v(" 方法将其值从存放 "),s("code",[t._v("Nil")]),t._v(" 的 "),s("code",[t._v("Rc")]),t._v(" 修改为 "),s("code",[t._v("b")]),t._v(" 中的 "),s("code",[t._v("Rc")]),t._v("。")])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[this._v("如果保持最后的 "),n("code",[this._v("println!")]),this._v(" 行注释并运行代码，会得到如下输出：")])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language-text extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("a initial rc count = 1\na next item = Some(RefCell { value: Nil })\na rc count after b creation = 2\nb initial rc count = 1\nb next item = Some(RefCell { value: Cons(5, RefCell { value: Nil }) })\nb rc count after changing a = 2\na rc count after changing a = 2\n")])])])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("p",[t._v("可以看到将 "),s("code",[t._v("a")]),t._v(" 修改为指向 "),s("code",[t._v("b")]),t._v(" 之后，"),s("code",[t._v("a")]),t._v(" 和 "),s("code",[t._v("b")]),t._v(" 中都有的 "),s("code",[t._v("Rc")]),t._v(" 实例的引用计数为 2。在 "),s("code",[t._v("main")]),t._v(" 的结尾，Rust 会尝试首先丢弃 "),s("code",[t._v("b")]),t._v("，这会使 "),s("code",[t._v("a")]),t._v(" 和 "),s("code",[t._v("b")]),t._v(" 中 "),s("code",[t._v("Rc")]),t._v(" 实例的引用计数减一。")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("p",[t._v("然而，因为 "),s("code",[t._v("a")]),t._v(" 仍然引用 "),s("code",[t._v("b")]),t._v(" 中的 "),s("code",[t._v("Rc")]),t._v("，"),s("code",[t._v("Rc")]),t._v(" 的引用计数是 1 而不是 0，所以 "),s("code",[t._v("Rc")]),t._v(" 在堆上的内存不会被丢弃。其内存会因为引用计数为 1 而永远停留。")])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[n("span",{staticClass:"caption"},[this._v("图 15-30: 列表 "),n("code",[this._v("a")]),this._v(" 和 "),n("code",[this._v("b")]),this._v(" 彼此互相指向形成引用循环")])])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("p",[t._v("如果取消最后 "),s("code",[t._v("println!")]),t._v(" 的注释并运行程序，Rust 会尝试打印出 "),s("code",[t._v("a")]),t._v(" 指向 "),s("code",[t._v("b")]),t._v(" 指向 "),s("code",[t._v("a")]),t._v(" 这样的循环直到栈溢出。")])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[this._v("创建引用循环并不容易，但也不是不可能。如果你有包含"),n("code",[this._v("Rc<T>")]),this._v("的"),n("code",[this._v("RefCell<T>")]),this._v("值或类似的嵌套结合了内部可变性和引用计数的类型，请务必小心确保你没有形成一个引用循环；你无法指望 Rust 帮你捕获它们。创建引用循环是一个程序上的逻辑 bug，你应该使用自动化测试、代码评审和其他软件开发最佳实践来使其最小化。")])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[this._v("另一个解决方案是重新组织数据结构使得一些引用有所有权而另一些则没有。如此，循环将由一些有所有权的关系和一些没有所有权的关系，而只有所有权关系才影响值是否被丢弃。在示例 15-28 中，我们总是希望 "),n("code",[this._v("Cons")]),this._v(" 成员拥有其列表，所以重新组织数据结构是不可能的。让我们看看一个由父结点和子结点构成的图的例子，观察何时无所有权关系是一个好的避免引用循环的方法。")])},function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"避免引用循环：将-rc-t-变为-weak-t"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#避免引用循环：将-rc-t-变为-weak-t","aria-hidden":"true"}},[this._v("#")]),this._v(" 避免引用循环：将 "),n("code",[this._v("Rc<T>")]),this._v(" 变为 "),n("code",[this._v("Weak<T>")])])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("p",[t._v("到目前为止，我们已经展示了调用 "),s("code",[t._v("Rc::clone")]),t._v(" 会增加 "),s("code",[t._v("Rc")]),t._v(" 实例的 "),s("code",[t._v("strong_count")]),t._v("，和 "),s("code",[t._v("Rc")]),t._v(" 实例只在其 "),s("code",[t._v("strong_count")]),t._v(" 为 0 时才会被清理。也可以通过调用 "),s("code",[t._v("Rc::downgrade")]),t._v(" 并传递 "),s("code",[t._v("Rc")]),t._v(" 实例的引用来创建其值的 "),s("strong",[t._v("弱引用")]),t._v("（"),s("em",[t._v("weak reference")]),t._v("）。调用 "),s("code",[t._v("Rc::downgrade")]),t._v(" 时会得到 "),s("code",[t._v("Weak<T>")]),t._v(" 类型的智能指针。不同于将 "),s("code",[t._v("Rc")]),t._v(" 实例的 "),s("code",[t._v("strong_count")]),t._v(" 加一，调用 "),s("code",[t._v("Rc::downgrade")]),t._v(" 会将 "),s("code",[t._v("weak_count")]),t._v(" 加一。"),s("code",[t._v("Rc")]),t._v(" 类型使用 "),s("code",[t._v("weak_count")]),t._v(" 来记录其存在多少个 "),s("code",[t._v("Weak<T>")]),t._v(" 引用，类似于 "),s("code",[t._v("strong_count")]),t._v("。其区别在于 "),s("code",[t._v("weak_count")]),t._v(" 无需计数为 0 就能使 "),s("code",[t._v("Rc")]),t._v(" 实例被清理。")])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[this._v("强引用代表如何共享 "),n("code",[this._v("Rc")]),this._v(" 实例的引用。弱引用并不代表所有权关系。他们不会造成引用循环，因为任何引入了弱引用的循环一旦所涉及的强引用计数为 0 就会被打破。")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("p",[t._v("因为 "),s("code",[t._v("Weak<T>")]),t._v(" 引用的值可能已经被丢弃了，为了使用 "),s("code",[t._v("Weak<T>")]),t._v(" 所指向的值，我们必须确保其值仍然有效。为此可以调用 "),s("code",[t._v("Weak<T>")]),t._v(" 实例的 "),s("code",[t._v("upgrade")]),t._v(" 方法，这会返回 "),s("code",[t._v("Option<Rc<T>>")]),t._v("。如果 "),s("code",[t._v("Rc")]),t._v(" 值还未被丢弃则结果是 "),s("code",[t._v("Some")]),t._v("，如果 "),s("code",[t._v("Rc")]),t._v(" 已经被丢弃则结果是 "),s("code",[t._v("None")]),t._v("。因为 "),s("code",[t._v("upgrade")]),t._v(" 返回一个 "),s("code",[t._v("Option")]),t._v("，我们确信 Rust 会处理 "),s("code",[t._v("Some")]),t._v(" 和 "),s("code",[t._v("None")]),t._v("的情况，并且不会有一个无效的指针。")])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[this._v("作为一个例子，不同于使用一个某项只知道其下一项的列表，我们会创建一个某项知道其子项 "),n("strong",[this._v("和")]),this._v(" 父项的树形结构。")])},function(){var t=this.$createElement,n=this._self._c||t;return n("h4",{attrs:{id:"创建树形数据结构：带有子结点的-node"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建树形数据结构：带有子结点的-node","aria-hidden":"true"}},[this._v("#")]),this._v(" 创建树形数据结构：带有子结点的 "),n("code",[this._v("Node")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[this._v("让我们从一个叫做 "),n("code",[this._v("Node")]),this._v(" 的存放拥有所有权的 "),n("code",[this._v("i32")]),this._v(" 值和其子 "),n("code",[this._v("Node")]),this._v(" 值引用的结构体开始：")])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[n("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("rc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Rc"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("cell"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("RefCell"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{attrs:{class:"token attribute attr-name"}},[t._v("#[derive(Debug)]")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Node "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    value"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    children"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" RefCell"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Vec"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Rc"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Node"),s("span",{attrs:{class:"token operator"}},[t._v(">>")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("p",[t._v("我们希望能够 "),s("code",[t._v("Node")]),t._v(" 拥有其子结点，同时也希望变量可以拥有每个结点以便可以直接访问他们。为此 "),s("code",[t._v("Vec")]),t._v(" 的项的类型被定义为 "),s("code",[t._v("Rc<Node>")]),t._v("。我们还希望能改其他结点的子结点，所以 "),s("code",[t._v("children")]),t._v(" 中 "),s("code",[t._v("Vec")]),t._v(" 被放进了 "),s("code",[t._v("RefCell")]),t._v("。")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("p",[t._v("接下来，使用此结构体定义来创建一个叫做 "),s("code",[t._v("leaf")]),t._v(" 的带有值 3 且没有子结点的 "),s("code",[t._v("Node")]),t._v(" 实例，和另一个带有值 5 并以 "),s("code",[t._v("leaf")]),t._v(" 作为子结点的实例 "),s("code",[t._v("branch")]),t._v("，如示例 15-31 所示：")])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[n("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[t._v("# "),s("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("rc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Rc"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),s("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("cell"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("RefCell"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n# "),s("span",{attrs:{class:"token attribute attr-name"}},[t._v("#[derive(Debug)]")]),t._v("\n# "),s("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Node "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     value"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#    children"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" RefCell"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Vec"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Rc"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Node"),s("span",{attrs:{class:"token operator"}},[t._v(">>")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),s("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("main")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" leaf "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Rc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("new")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Node "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        value"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        children"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" RefCell"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("new")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token function"}},[t._v("vec!")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" branch "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Rc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("new")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Node "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        value"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("5")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        children"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" RefCell"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("new")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token function"}},[t._v("vec!")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Rc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("clone")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("leaf"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[n("span",{staticClass:"caption"},[this._v("示例 15-31：创建没有子结点的 "),n("code",[this._v("leaf")]),this._v(" 结点和以 "),n("code",[this._v("leaf")]),this._v(" 作为子结点的 "),n("code",[this._v("branch")]),this._v(" 结点")])])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("p",[t._v("这里克隆了 "),s("code",[t._v("leaf")]),t._v(" 中的 "),s("code",[t._v("Rc")]),t._v(" 并储存在了 "),s("code",[t._v("branch")]),t._v(" 中，这意味着 "),s("code",[t._v("leaf")]),t._v(" 中的 "),s("code",[t._v("Node")]),t._v(" 现在有两个所有者："),s("code",[t._v("leaf")]),t._v("和"),s("code",[t._v("branch")]),t._v("。可以通过 "),s("code",[t._v("branch.children")]),t._v(" 从 "),s("code",[t._v("branch")]),t._v(" 中获得 "),s("code",[t._v("leaf")]),t._v("，不过无法从 "),s("code",[t._v("leaf")]),t._v(" 到 "),s("code",[t._v("branch")]),t._v("。"),s("code",[t._v("leaf")]),t._v(" 没有到 "),s("code",[t._v("branch")]),t._v(" 的引用且并不知道他们相互关联。我们希望 "),s("code",[t._v("leaf")]),t._v(" 知道 "),s("code",[t._v("branch")]),t._v(" 是其父结点。")])},function(){var t=this.$createElement,n=this._self._c||t;return n("h4",{attrs:{id:"增加从子到父的引用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#增加从子到父的引用","aria-hidden":"true"}},[this._v("#")]),this._v(" 增加从子到父的引用")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("p",[t._v("为了使子结点知道其父结点，需要在 "),s("code",[t._v("Node")]),t._v(" 结构体定义中增加一个 "),s("code",[t._v("parent")]),t._v(" 字段。问题是 "),s("code",[t._v("parent")]),t._v(" 的类型应该是什么。我们知道其不能包含 "),s("code",[t._v("Rc<T>")]),t._v("，因为这样 "),s("code",[t._v("leaf.parent")]),t._v(" 将会指向 "),s("code",[t._v("branch")]),t._v(" 而 "),s("code",[t._v("branch.children")]),t._v(" 会包含 "),s("code",[t._v("leaf")]),t._v(" 的指针，这会形成引用循环，会造成其 "),s("code",[t._v("strong_count")]),t._v(" 永远也不会为 0.")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("p",[t._v("所以 "),s("code",[t._v("parent")]),t._v(" 使用 "),s("code",[t._v("Weak<T>")]),t._v(" 类型而不是 "),s("code",[t._v("Rc")]),t._v("，具体来说是 "),s("code",[t._v("RefCell<Weak<Node>>")]),t._v("。现在 "),s("code",[t._v("Node")]),t._v(" 结构体定义看起来像这样：")])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[n("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("rc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Rc"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Weak"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("cell"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("RefCell"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{attrs:{class:"token attribute attr-name"}},[t._v("#[derive(Debug)]")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Node "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    value"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    parent"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" RefCell"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Weak"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Node"),s("span",{attrs:{class:"token operator"}},[t._v(">>")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    children"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" RefCell"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Vec"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Rc"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Node"),s("span",{attrs:{class:"token operator"}},[t._v(">>")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[this._v("这样，一个结点就能够引用其父结点，但不拥有其父结点。在示例 15-32 中，我们更新 "),n("code",[this._v("main")]),this._v(" 来使用新定义以便 "),n("code",[this._v("leaf")]),this._v(" 结点可以引用其父结点：")])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[n("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[t._v("# "),s("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("rc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Rc"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Weak"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),s("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("cell"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("RefCell"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n# "),s("span",{attrs:{class:"token attribute attr-name"}},[t._v("#[derive(Debug)]")]),t._v("\n# "),s("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Node "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     value"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     parent"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" RefCell"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Weak"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Node"),s("span",{attrs:{class:"token operator"}},[t._v(">>")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     children"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" RefCell"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Vec"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Rc"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Node"),s("span",{attrs:{class:"token operator"}},[t._v(">>")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),s("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("main")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" leaf "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Rc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("new")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Node "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        value"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        parent"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" RefCell"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("new")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Weak"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("new")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        children"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" RefCell"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("new")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token function"}},[t._v("vec!")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{attrs:{class:"token function"}},[t._v("println!")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"leaf parent = {:?}"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" leaf"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("borrow")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("upgrade")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" branch "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Rc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("new")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Node "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        value"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("5")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        parent"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" RefCell"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("new")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Weak"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("new")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        children"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" RefCell"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("new")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token function"}},[t._v("vec!")]),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Rc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("clone")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("leaf"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("leaf"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("borrow_mut")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Rc"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token function"}},[t._v("downgrade")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("branch"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{attrs:{class:"token function"}},[t._v("println!")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"leaf parent = {:?}"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" leaf"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("borrow")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("upgrade")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[n("span",{staticClass:"caption"},[this._v("示例 15-32：一个 "),n("code",[this._v("leaf")]),this._v(" 结点，其拥有指向其父结点 "),n("code",[this._v("branch")]),this._v(" 的 "),n("code",[this._v("Weak")]),this._v(" 引用")])])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("p",[t._v("创建 "),s("code",[t._v("leaf")]),t._v(" 结点类似于示例 15-31 中如何创建 "),s("code",[t._v("leaf")]),t._v(" 结点的，除了 "),s("code",[t._v("parent")]),t._v(" 字段有所不同："),s("code",[t._v("leaf")]),t._v(" 开始时没有父结点，所以我们新建了一个空的 "),s("code",[t._v("Weak")]),t._v(" 引用实例。")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("p",[t._v("此时，当尝试使用 "),s("code",[t._v("upgrade")]),t._v(" 方法获取 "),s("code",[t._v("leaf")]),t._v(" 的父结点引用时，会得到一个 "),s("code",[t._v("None")]),t._v(" 值。如第一个 "),s("code",[t._v("println!")]),t._v(" 输出所示：")])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language-text extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("leaf parent = None\n")])])])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("p",[t._v("当创建 "),s("code",[t._v("branch")]),t._v(" 结点时，其也会新建一个 "),s("code",[t._v("Weak")]),t._v(" 引用，因为 "),s("code",[t._v("branch")]),t._v(" 并没有父结点。"),s("code",[t._v("leaf")]),t._v(" 仍然作为 "),s("code",[t._v("branch")]),t._v(" 的一个子结点。一旦在 "),s("code",[t._v("branch")]),t._v(" 中有了 "),s("code",[t._v("Node")]),t._v(" 实例，就可以修改 "),s("code",[t._v("leaf")]),t._v(" 使其拥有指向父结点的 "),s("code",[t._v("Weak")]),t._v(" 引用。这里使用了 "),s("code",[t._v("leaf")]),t._v(" 中 "),s("code",[t._v("parent")]),t._v(" 字段里的 "),s("code",[t._v("RefCell")]),t._v(" 的 "),s("code",[t._v("borrow_mut")]),t._v(" 方法，接着使用了 "),s("code",[t._v("Rc::downgrade")]),t._v(" 函数来从 "),s("code",[t._v("branch")]),t._v(" 中的 "),s("code",[t._v("Rc")]),t._v(" 值创建了一个指向 "),s("code",[t._v("branch")]),t._v(" 的 "),s("code",[t._v("Weak")]),t._v(" 引用。")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("p",[t._v("当再次打印出 "),s("code",[t._v("leaf")]),t._v(" 的父结点时，这一次将会得到存放了 "),s("code",[t._v("branch")]),t._v(" 的 "),s("code",[t._v("Some")]),t._v(" 值：现在 "),s("code",[t._v("leaf")]),t._v(" 可以访问其父结点了！当打印出 "),s("code",[t._v("leaf")]),t._v(" 时，我们也避免了如示例 15-29 中最终会导致栈溢出的循环："),s("code",[t._v("Weak")]),t._v(" 引用被打印为 "),s("code",[t._v("(Weak)")]),t._v("：")])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language-text extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("leaf parent = Some(Node { value: 5, parent: RefCell { value: (Weak) },\nchildren: RefCell { value: [Node { value: 3, parent: RefCell { value: (Weak) },\nchildren: RefCell { value: [] } }] } })\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[this._v("没有无限的输出表明这段代码并没有造成引用循环。这一点也可以从观察 "),n("code",[this._v("Rc::strong_count")]),this._v(" 和 "),n("code",[this._v("Rc::weak_count")]),this._v(" 调用的结果看出。")])},function(){var t=this.$createElement,n=this._self._c||t;return n("h4",{attrs:{id:"可视化-strong-count-和-weak-count-的改变"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#可视化-strong-count-和-weak-count-的改变","aria-hidden":"true"}},[this._v("#")]),this._v(" 可视化 "),n("code",[this._v("strong_count")]),this._v(" 和 "),n("code",[this._v("weak_count")]),this._v(" 的改变")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("p",[t._v("让我们通过创建了一个新的内部作用域并将 "),s("code",[t._v("branch")]),t._v(" 的创建放入其中，来观察 "),s("code",[t._v("Rc")]),t._v(" 实例的 "),s("code",[t._v("strong_count")]),t._v(" 和 "),s("code",[t._v("weak_count")]),t._v(" 值的变化。这会展示当 "),s("code",[t._v("branch")]),t._v(" 创建和离开作用域被丢弃时会发生什么。这些修改如示例 15-33 所示：")])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[n("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language-rust,ignore extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('fn main() {\n    let leaf = Rc::new(Node {\n        value: 3,\n        parent: RefCell::new(Weak::new()),\n        children: RefCell::new(vec![]),\n    });\n\n    println!(\n        "leaf strong = {}, weak = {}",\n        Rc::strong_count(&leaf),\n        Rc::weak_count(&leaf),\n    );\n\n    {\n        let branch = Rc::new(Node {\n            value: 5,\n            parent: RefCell::new(Weak::new()),\n            children: RefCell::new(vec![Rc::clone(&leaf)]),\n        });\n        *leaf.parent.borrow_mut() = Rc::downgrade(&branch);\n\n        println!(\n            "branch strong = {}, weak = {}",\n            Rc::strong_count(&branch),\n            Rc::weak_count(&branch),\n        );\n\n        println!(\n            "leaf strong = {}, weak = {}",\n            Rc::strong_count(&leaf),\n            Rc::weak_count(&leaf),\n        );\n    }\n\n    println!("leaf parent = {:?}", leaf.parent.borrow().upgrade());\n    println!(\n        "leaf strong = {}, weak = {}",\n        Rc::strong_count(&leaf),\n        Rc::weak_count(&leaf),\n    );\n}\n')])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[n("span",{staticClass:"caption"},[this._v("示例 15-33：在内部作用域创建 "),n("code",[this._v("branch")]),this._v(" 并检查其强弱引用计数")])])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("p",[t._v("一旦创建了 "),s("code",[t._v("leaf")]),t._v("，其 "),s("code",[t._v("Rc")]),t._v(" 的强引用计数为 1，弱引用计数为 0。在内部作用域中创建了 "),s("code",[t._v("branch")]),t._v(" 并与 "),s("code",[t._v("leaf")]),t._v(" 相关联，此时 "),s("code",[t._v("branch")]),t._v(" 中 "),s("code",[t._v("Rc")]),t._v(" 的强引用计数为 1，弱引用计数为 1（因为 "),s("code",[t._v("leaf.parent")]),t._v(" 通过 "),s("code",[t._v("Weak<T>")]),t._v(" 指向 "),s("code",[t._v("branch")]),t._v("）。这里 "),s("code",[t._v("leaf")]),t._v(" 的强引用计数为 2，因为现在 "),s("code",[t._v("branch")]),t._v(" 的 "),s("code",[t._v("branch.children")]),t._v(" 中储存了 "),s("code",[t._v("leaf")]),t._v(" 的 "),s("code",[t._v("Rc")]),t._v(" 的拷贝，不过弱引用计数仍然为 0。")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("p",[t._v("当内部作用域结束时，"),s("code",[t._v("branch")]),t._v(" 离开作用域，其强引用计数减少为 0，所以其 "),s("code",[t._v("Node")]),t._v(" 被丢弃。来自 "),s("code",[t._v("leaf.parent")]),t._v(" 的弱引用计数 1 与 "),s("code",[t._v("Node")]),t._v(" 是否被丢弃无关，所以并没有产生任何内存泄露！")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("p",[t._v("如果在内部作用域结束后尝试访问 "),s("code",[t._v("leaf")]),t._v(" 的父结点，会再次得到 "),s("code",[t._v("None")]),t._v("。在程序的结尾，"),s("code",[t._v("leaf")]),t._v(" 中 "),s("code",[t._v("Rc")]),t._v(" 的强引用计数为 1，弱引用计数为 0，因为现在 "),s("code",[t._v("leaf")]),t._v(" 又是 "),s("code",[t._v("Rc")]),t._v(" 唯一的引用了。")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("p",[t._v("所有这些管理计数和值的逻辑都内建于 "),s("code",[t._v("Rc")]),t._v(" 和 "),s("code",[t._v("Weak")]),t._v(" 以及它们的 "),s("code",[t._v("Drop")]),t._v(" trait 实现中。通过在 "),s("code",[t._v("Node")]),t._v(" 定义中指定从子结点到父结点的关系为一个"),s("code",[t._v("Weak<T>")]),t._v("引用，就能够拥有父结点和子结点之间的双向引用而不会造成引用循环和内存泄露。")])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结")])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[this._v("这一章涵盖了如何使用智能指针来做出不同于 Rust 常规引用默认所提供的保证与取舍。"),n("code",[this._v("Box<T>")]),this._v(" 有一个已知的大小并指向分配在堆上的数据。"),n("code",[this._v("Rc<T>")]),this._v(" 记录了堆上数据的引用数量以便可以拥有多个所有者。"),n("code",[this._v("RefCell<T>")]),this._v(" 和其内部可变性提供了一个可以用于当需要不可变类型但是需要改变其内部值能力的类型，并在运行时而不是编译时检查借用规则。")])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[this._v("我们还介绍了提供了很多智能指针功能的 trait "),n("code",[this._v("Deref")]),this._v(" 和 "),n("code",[this._v("Drop")]),this._v("。同时探索了会造成内存泄露的引用循环，以及如何使用 "),n("code",[this._v("Weak<T>")]),this._v(" 来避免它们。")])}],!1,null,null,null);e.options.__file="ch15-06-reference-cycles.md";n.default=e.exports}}]);