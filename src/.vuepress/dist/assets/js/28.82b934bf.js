(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{253:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch04-03-slices.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch04-03-slices.md"),a("OutboundLink")],1),t._v(" "),a("br"),t._v("\ncommit a86c1d315789b3ca13b20d50ad5005c62bdd9e37")])]),t._v(" "),t._m(1),t._v(" "),a("p",[t._v("这里有一个编程小习题：编写一个函数，该函数接收一个字符串，并返回在该字符串中找到的第一个单词。如果函数在该字符串中并未找到空格，则整个字符串就是一个单词，所以应该返回整个字符串。")]),t._v(" "),a("p",[t._v("让我们考虑一下这个函数的签名：")]),t._v(" "),t._m(2),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._m(9),t._v(" "),t._m(10),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._m(22),t._v(" "),a("p",[t._v("幸运的是，Rust 为这个问题提供了一个解决方法：字符串 slice。")]),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._m(26),t._v(" "),t._m(27),t._m(28),t._v(" "),t._m(29),t._v(" "),a("p",[t._v("图 4-6 展示了一个图例。")]),t._v(" "),a("img",{staticClass:"center",staticStyle:{width:"50%"},attrs:{alt:"world containing a pointer to the 6th byte of String s and a length 5",src:"img/trpl04-06.svg"}}),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._m(33),t._v(" "),t._m(34),a("p",[t._v("也可以同时舍弃这两个值来获取整个字符串的 slice。所以如下亦是相同的：")]),t._v(" "),t._m(35),t._m(36),t._v(" "),t._m(37),t._v(" "),t._m(38),t._v(" "),t._m(39),a("p",[t._v("我们使用跟示例 4-7 相同的方式获取单词结尾的索引，通过寻找第一个出现的空格。当找到一个空格，我们返回一个字符串 slice，它使用字符串的开始和空格的索引作为开始和结束的索引。")]),t._v(" "),t._m(40),t._v(" "),t._m(41),t._v(" "),t._m(42),t._m(43),t._v(" "),t._m(44),t._v(" "),t._m(45),a("p",[t._v("这里是编译错误：")]),t._v(" "),t._m(46),t._m(47),t._v(" "),t._m(48),t._v(" "),a("p",[t._v("还记得我们讲到过字符串字面值被储存在二进制文件中吗。现在知道 slice 了，我们就可以正确的理解字符串字面值了：")]),t._v(" "),t._m(49),t._m(50),t._v(" "),t._m(51),t._v(" "),t._m(52),t._v(" "),t._m(53),t._m(54),t._v(" "),t._m(55),t._m(56),t._v(" "),t._m(57),t._v(" "),t._m(58),t._v(" "),t._m(59),t._m(60),t._v(" "),a("p",[t._v("字符串 slice，正如你想象的那样，是针对字符串的。不过也有更通用的 slice 类型。考虑一下这个数组：")]),t._v(" "),t._m(61),a("p",[t._v("就跟我们想要获取字符串的一部分那样，我们也会想要引用数组的一部分。我们可以这样做：")]),t._v(" "),t._m(62),t._m(63),t._v(" "),t._m(64),t._v(" "),a("p",[t._v("所有权、借用和 slice 这些概念让 Rust 程序在编译时确保内存安全。Rust 语言提供了跟其他系统编程语言相同的方式来控制你使用的内存，但拥有数据所有者在离开作用域后自动清除其数据的功能意味着你无须额外编写和调试相关的控制代码。")]),t._v(" "),t._m(65)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"slice-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#slice-类型","aria-hidden":"true"}},[this._v("#")]),this._v(" Slice 类型")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("另一个没有所有权的数据类型是 "),s("em",[this._v("slice")]),this._v("。slice 允许你引用集合中一段连续的元素序列，而不用引用整个集合。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("fn first_word(s: &String) -> ?\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("first_word")]),this._v(" 函数有一个参数 "),s("code",[this._v("&String")]),this._v("。因为我们不需要所有权，所以这没有问题。不过应该返回什么呢？我们并没有一个真正获取 "),s("strong",[this._v("部分")]),this._v(" 字符串的办法。不过，我们可以返回单词结尾的索引。试试如示例 4-7 中的代码。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("first_word")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("String"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" usize "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" bytes "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("as_bytes")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("item"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" bytes"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("iter")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("enumerate")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" item "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token char string"}},[t._v("b' '")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    s"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("len")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 4-7："),s("code",[this._v("first_word")]),this._v(" 函数返回 "),s("code",[this._v("String")]),this._v(" 参数的一个字节索引值")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("因为需要逐个元素的检查 "),s("code",[this._v("String")]),this._v(" 中的值是否为空格，需要用 "),s("code",[this._v("as_bytes")]),this._v(" 方法将 "),s("code",[this._v("String")]),this._v(" 转化为字节数组：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("let bytes = s.as_bytes();\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接下来，使用 "),s("code",[this._v("iter")]),this._v(" 方法在字节数组上创建一个迭代器：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("for (i, &item) in bytes.iter().enumerate() {\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们将在第十三章详细讨论迭代器。现在，只需知道 "),a("code",[t._v("iter")]),t._v(" 方法返回集合中的每一个元素，而 "),a("code",[t._v("enumerate")]),t._v(" 包装 "),a("code",[t._v("iter")]),t._v(" 的结果并返回一个元组，其中每一个元素是元组的一部分。"),a("code",[t._v("enumerate")]),t._v(" 返回元组的第一个元素是索引，第二个元素是集合中元素的引用。这比我们自己计算索引要方便一些。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("因为 "),a("code",[t._v("enumerate")]),t._v(" 方法返回一个元组，我们可以使用模式来解构，就像 Rust 中其他任何地方所做的一样。所以在 "),a("code",[t._v("for")]),t._v(" 循环中，我们指定了一个模式，其中元组中的 "),a("code",[t._v("i")]),t._v(" 是索引而元组中的 "),a("code",[t._v("&item")]),t._v(" 是单个字节。因为我们从 "),a("code",[t._v(".iter().enumerate()")]),t._v(" 中获取了集合元素的引用，所以模式中使用了 "),a("code",[t._v("&")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 "),s("code",[this._v("for")]),this._v(" 循环中，我们通过字节的字面值语法来寻找代表空格的字节。如果找到了一个空格，返回它的位置。否则，使用 "),s("code",[this._v("s.len()")]),this._v(" 返回字符串的长度：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("    if item == b' ' {\n        return i;\n    }\n}\n\ns.len()\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("现在有了一个找到字符串中第一个单词结尾索引的方法，不过这有一个问题。我们返回了一个独立的 "),a("code",[t._v("usize")]),t._v("，不过它只在 "),a("code",[t._v("&String")]),t._v(" 的上下文中才是一个有意义的数字。换句话说，因为它是一个与 "),a("code",[t._v("String")]),t._v(" 相分离的值，无法保证将来它仍然有效。考虑一下示例 4-8 中使用了示例 4-7 中 "),a("code",[t._v("first_word")]),t._v(" 函数的程序。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[t._v("# "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("first_word")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("String"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" usize "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" bytes "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("as_bytes")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n#     "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("item"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" bytes"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("iter")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("enumerate")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#         "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" item "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token char string"}},[t._v("b' '")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#             "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#         "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#     "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n#     s"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("len")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n# "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("main")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"hello world"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" word "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("first_word")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// word 的值为 5")]),t._v("\n\n    s"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("clear")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// 这清空了字符串，使其等于 ""')]),t._v("\n\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// word 在此处的值仍然是 5，")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 但是没有更多的字符串让我们可以有效地应用数值 5。word 的值现在完全无效！")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 4-8：存储 "),s("code",[this._v("first_word")]),this._v(" 函数调用的返回值并接着改变 "),s("code",[this._v("String")]),this._v(" 的内容")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这个程序编译时没有任何错误，而且在调用 "),a("code",[t._v("s.clear()")]),t._v(" 之后使用 "),a("code",[t._v("word")]),t._v(" 也不会出错。因为 "),a("code",[t._v("word")]),t._v(" 与 "),a("code",[t._v("s")]),t._v(" 状态完全没有联系，所以 "),a("code",[t._v("word")]),t._v(" 仍然包含值 "),a("code",[t._v("5")]),t._v("。可以尝试用值 "),a("code",[t._v("5")]),t._v(" 来提取变量 "),a("code",[t._v("s")]),t._v(" 的第一个单词，不过这是有 bug 的，因为在我们将 "),a("code",[t._v("5")]),t._v(" 保存到 "),a("code",[t._v("word")]),t._v(" 之后 "),a("code",[t._v("s")]),t._v(" 的内容已经改变。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们不得不时刻担心 "),s("code",[this._v("word")]),this._v(" 的索引与 "),s("code",[this._v("s")]),this._v(" 中的数据不再同步，这很啰嗦且易出错！如果编写这么一个 "),s("code",[this._v("second_word")]),this._v(" 函数的话，管理索引这件事将更加容易出问题。它的签名看起来像这样：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("fn second_word(s: &String) -> (usize, usize) {\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在我们要跟踪一个开始索引 "),s("strong",[this._v("和")]),this._v(" 一个结尾索引，同时有了更多从数据的某个特定状态计算而来的值，但都完全没有与这个状态相关联。现在有三个飘忽不定的不相关变量需要保持同步。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"字符串-slice"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串-slice","aria-hidden":"true"}},[this._v("#")]),this._v(" 字符串 slice")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("字符串 slice")]),this._v("（"),s("em",[this._v("string slice")]),this._v("）是 "),s("code",[this._v("String")]),this._v(" 中一部分值的引用，它看起来像这样：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"hello world"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" hello "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" world "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("6")]),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{attrs:{class:"token number"}},[t._v("11")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这类似于引用整个 "),a("code",[t._v("String")]),t._v(" 不过带有额外的 "),a("code",[t._v("[0..5]")]),t._v(" 部分。它不是对整个 "),a("code",[t._v("String")]),t._v(" 的引用，而是对部分 "),a("code",[t._v("String")]),t._v(" 的引用。"),a("code",[t._v("start..end")]),t._v(" 语法代表一个以 "),a("code",[t._v("start")]),t._v(" 开头并一直持续到但不包含 "),a("code",[t._v("end")]),t._v(" 的 range。如果需要包含 "),a("code",[t._v("end")]),t._v("，可以使用 "),a("code",[t._v("..=")]),t._v(" 而不是 "),a("code",[t._v("..")]),t._v("：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"hello world"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" hello "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" world "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("6")]),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token number"}},[t._v("10")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("=")]),this._v(" 意味着包含最后的数字，这有助于你记住 "),s("code",[this._v("..")]),this._v(" 与 "),s("code",[this._v("..=")]),this._v(" 的区别")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以使用一个由中括号中的 "),a("code",[t._v("[starting_index..ending_index]")]),t._v(" 指定的 range 创建一个 slice，其中 "),a("code",[t._v("starting_index")]),t._v(" 是 slice 的第一个位置，"),a("code",[t._v("ending_index")]),t._v(" 则是 slice 最后一个位置的后一个值。在其内部，slice 的数据结构存储了 slice 的开始位置和长度，长度对应于 "),a("code",[t._v("ending_index")]),t._v(" 减去 "),a("code",[t._v("starting_index")]),t._v(" 的值。所以对于 "),a("code",[t._v("let world = &s[6..11];")]),t._v(" 的情况，"),a("code",[t._v("world")]),t._v(" 将是一个包含指向 "),a("code",[t._v("s")]),t._v(" 第 7 个字节的指针和长度值 5 的 slice。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("图 4-6：引用了部分 "),s("code",[this._v("String")]),this._v(" 的字符串 slice")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("对于 Rust 的 "),s("code",[this._v("..")]),this._v(" range 语法，如果想要从第一个索引（0）开始，可以不写两个点号之前的值。换句话说，如下两个语句是相同的：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" slice "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" slice "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("由此类推，如果 slice 包含 "),s("code",[this._v("String")]),this._v(" 的最后一个字节，也可以舍弃尾部的数字。这意味着如下也是相同的：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" len "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("len")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" slice "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v("len"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" slice "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" len "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("len")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" slice "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v("len"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" slice "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("注意：字符串 slice range 的索引必须位于有效的 UTF-8 字符边界内，如果尝试从一个多字节字符的中间位置创建字符串 slice，则程序将会因错误而退出。出于介绍字符串 slice 的目的，本部分假设只使用 ASCII 字符集；第八章的 “使用字符串存储 UTF-8 编码的文本” 部分会更加全面的讨论 UTF-8 处理问题。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在记住所有这些知识后，让我们重写 "),s("code",[this._v("first_word")]),this._v(" 来返回一个 slice。“字符串 slice” 的类型声明写作 "),s("code",[this._v("&str")]),this._v("：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("first_word")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("String"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("str "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" bytes "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("as_bytes")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("item"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" bytes"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("iter")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("enumerate")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" item "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token char string"}},[t._v("b' '")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在当调用 "),s("code",[this._v("first_word")]),this._v(" 时，会返回与底层数据关联的单个值。这个值由一个 slice 开始位置的引用和 slice 中元素的数量组成。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("second_word")]),this._v(" 函数也可以改为返回一个 slice：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("fn second_word(s: &String) -> &str {\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在我们有了一个不易混淆且直观的 API 了，因为编译器会确保指向 "),s("code",[this._v("String")]),this._v(" 的引用持续有效。还记得示例 4-8 程序中，那个当我们获取第一个单词结尾的索引后，接着就清除了字符串导致索引就无效的 bug 吗？那些代码在逻辑上是不正确的，但却没有显示任何直接的错误。问题会在之后尝试对空字符串使用第一个单词的索引时出现。slice 就不可能出现这种 bug 并让我们更早的知道出问题了。使用 slice 版本的 "),s("code",[this._v("first_word")]),this._v(" 会抛出一个编译时错误：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore,does_not_compile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('fn main() {\n    let mut s = String::from("hello world");\n\n    let word = first_word(&s);\n\n    s.clear(); // error!\n\n    println!("the first word is: {}", word);\n}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('error[E0502]: cannot borrow `s` as mutable because it is also borrowed as immutable\n  --\x3e src/main.rs:10:5\n   |\n8  |     let word = first_word(&s);\n   |                           -- immutable borrow occurs here\n9  |\n10 |     s.clear(); // error!\n   |     ^^^^^^^^^ mutable borrow occurs here\n11 |\n12 |     println!("the first word is: {}", word);\n   |                                       ---- borrow later used here\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("回忆一下借用规则，当拥有某值的不可变引用时，就不能再获取一个可变引用。因为 "),s("code",[this._v("clear")]),this._v(" 需要清空 "),s("code",[this._v("String")]),this._v("，它尝试获取一个可变引用，它失败了。Rust 不仅使得我们的 API 简单易用，也在编译时就消除了一整类的错误！")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"字符串字面值就是-slice"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串字面值就是-slice","aria-hidden":"true"}},[this._v("#")]),this._v(" 字符串字面值就是 slice")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[this._v("let")]),this._v(" s "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{attrs:{class:"token string"}},[this._v('"Hello, world!"')]),s("span",{attrs:{class:"token punctuation"}},[this._v(";")]),this._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里 "),s("code",[this._v("s")]),this._v(" 的类型是 "),s("code",[this._v("&str")]),this._v("：它是一个指向二进制程序特定位置的 slice。这也就是为什么字符串字面值是不可变的；"),s("code",[this._v("&str")]),this._v(" 是一个不可变引用。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"字符串-slice-作为参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串-slice-作为参数","aria-hidden":"true"}},[this._v("#")]),this._v(" 字符串 slice 作为参数")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在知道了能够获取字面值和 "),s("code",[this._v("String")]),this._v(" 的 slice 后，我们对 "),s("code",[this._v("first_word")]),this._v(" 做了改进，这是它的签名：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("fn first_word(s: &String) -> &str {\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("而更有经验的 Rustacean 会编写出示例 4-9 中的签名，因为它使得可以对 "),s("code",[this._v("String")]),this._v(" 值和 "),s("code",[this._v("&str")]),this._v(" 值使用相同的函数：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("fn first_word(s: &str) -> &str {\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 4-9: 通过将 "),s("code",[this._v("s")]),this._v(" 参数的类型改为字符串 slice 来改进 "),s("code",[this._v("first_word")]),this._v(" 函数")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果有一个字符串 slice，可以直接传递它。如果有一个 "),s("code",[this._v("String")]),this._v("，则可以传递整个 "),s("code",[this._v("String")]),this._v(" 的 slice。定义一个获取字符串 slice 而不是 "),s("code",[this._v("String")]),this._v(" 引用的函数使得我们的 API 更加通用并且不会丢失任何功能：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[t._v("# "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("first_word")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("str "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" bytes "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("as_bytes")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n#     "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("item"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" bytes"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("iter")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("enumerate")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#         "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" item "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token char string"}},[t._v("b' '")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#             "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#         "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#     "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n#     "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n# "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("main")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" my_string "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"hello world"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// first_word 中传入 `String` 的 slice")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" word "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("first_word")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("my_string"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" my_string_literal "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"hello world"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// first_word 中传入字符串字面值的 slice")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" word "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("first_word")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("my_string_literal"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 因为字符串字面值 **就是** 字符串 slice，")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 这样写也可以，即不使用 slice 语法！")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" word "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("first_word")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_string_literal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"其他类型的-slice"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他类型的-slice","aria-hidden":"true"}},[this._v("#")]),this._v(" 其他类型的 slice")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" slice "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这个 slice 的类型是 "),s("code",[this._v("&[i32]")]),this._v("。它跟字符串 slice 的工作方式一样，通过存储第一个集合元素的引用和一个集合总长度。你可以对其他所有集合使用这类 slice。第八章讲到 vector 时会详细讨论这些集合。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所有权系统影响了 Rust 中很多其他部分的工作方式，所以我们还会继续讲到这些概念，这将贯穿本书的余下内容。让我们开始第五章，来看看如何将多份数据组合进一个 "),s("code",[this._v("struct")]),this._v(" 中。")])}],!1,null,null,null);e.options.__file="ch04-03-slices.md";s.default=e.exports}}]);