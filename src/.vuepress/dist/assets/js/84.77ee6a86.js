(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{186:function(t,e,r){"use strict";r.r(e);var n=r(0),_=Object(n.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[t._m(0),t._v(" "),r("blockquote",[r("p",[r("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/second-edition/src/ch16-00-concurrency.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch16-00-concurrency.md"),r("OutboundLink")],1),t._v(" "),r("br"),t._v("\ncommit 90406bd5a4cd4447b46cd7e03d33f34a651e9bb7")])]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),r("p",[t._v("很多语言所提供的处理并发问题的解决方法都非常有特色。例如，Erlang 有着优雅的消息传递并发功能，但只有模糊不清的在线程间共享状态的方法。对于高级语言来说，只实现可能解决方案的子集是一个合理的策略，因为高级语言所许诺的价值来源于牺牲一些控制来换取抽象。然而对于底层语言则期望提供在任何给定的情况下有着最高的性能且对硬件有更少的抽象。因此，Rust 提供了多种工具，以符合实际情况和需求的方式来为问题建模。")]),t._v(" "),r("p",[t._v("如下是本章将要涉及到的内容：")]),t._v(" "),t._m(4)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"无畏并发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#无畏并发","aria-hidden":"true"}},[this._v("#")]),this._v(" 无畏并发")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("p",[t._v("安全并高效的处理并发编程是 Rust 的另一个主要目标。"),r("strong",[t._v("并发编程")]),t._v("（"),r("em",[t._v("Concurrent programming")]),t._v("），代表程序的不同部分相互独立的执行，而 "),r("strong",[t._v("并行编程")]),t._v("（"),r("em",[t._v("parallel programming")]),t._v("）代表程序不同部分于同时执行，这两个概念随着计算机越来越多的利用多处理器的优势时显得愈发重要。由于历史原因，在此类上下文中编程一直是困难且容易出错的：Rust 希望能改变这一点。")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("p",[t._v("起初，Rust 团队认为确保内存安全和防止并发问题是两个分别需要不同方法应对的挑战。随着时间的推移，团队发现所有权和类型系统是一系列解决内存安全 "),r("strong",[t._v("和")]),t._v(" 并发问题的强有力的工具！通过改进所有权和类型检查，Rust 很多并发错误都是 "),r("strong",[t._v("编译时")]),t._v(" 错误，而非运行时错误。因此，相比花费大量时间尝试重现运行时并发 bug 出现的特定情况，Rust 会拒绝编译不正确的代码并提供解释问题的错误信息。因此，你可以在开发时而不是不慎部署到生产环境后修复代码。我们给 Rust 的这一部分起了一个绰号 "),r("strong",[t._v("无畏并发")]),t._v("（"),r("em",[t._v("fearless concurrency")]),t._v("）。无畏并发令你的代码免于出现诡异的 bug 并可以轻松重构且无需担心会引入新的 bug。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("注意：出于简洁的考虑，我们将很多问题归为并发，而不是更准确的区分并发和（或）并行。如果这是一本专注于并发和/或并行的书，我们肯定会更加精确的。对于本章，当我们谈到并发时，请自行脑内替换为并发和（或）并行。")])])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[t._v("如何创建线程来同时运行多段代码。")]),t._v(" "),r("li",[r("strong",[t._v("消息传递")]),t._v("（"),r("em",[t._v("Message passing")]),t._v("）并发，其中通道（channel）被用来在线程间传递消息。")]),t._v(" "),r("li",[r("strong",[t._v("共享状态")]),t._v("（"),r("em",[t._v("Shared state")]),t._v("）并发，其中多个线程可以访问同一片数据。")]),t._v(" "),r("li",[r("code",[t._v("Sync")]),t._v(" 和 "),r("code",[t._v("Send")]),t._v(" trait，他们允许 Rust 的并发保证能被扩展到用户定义的和标准库中提供的类型中。")])])}],!1,null,null,null);_.options.__file="ch16-00-concurrency.md";e.default=_.exports}}]);