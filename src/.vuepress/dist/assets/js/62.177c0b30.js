(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{208:function(e,t,n){"use strict";n.r(t);var _=n(0),s=Object(_.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[e._m(0),e._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch12-03-improving-error-handling-and-modularity.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("ch12-03-improving-error-handling-and-modularity.md"),n("OutboundLink")],1),e._v(" "),n("br"),e._v("\ncommit 1fedfc4b96c2017f64ecfcf41a0a07e2e815f24f")])]),e._v(" "),n("p",[e._v("为了改善我们的程序这里有四个问题需要修复，而且他们都与程序的组织方式和如何处理潜在错误有关。")]),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),e._m(4),e._v(" "),n("p",[e._v("让我们通过重构项目来解决这些问题。")]),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),e._m(7),e._v(" "),e._m(8),e._v(" "),e._m(9),e._v(" "),e._m(10),e._v(" "),e._m(11),e._v(" "),e._m(12),e._m(13),e._v(" "),e._m(14),e._v(" "),n("p",[e._v("这对重构我们这小程序可能有点大材小用，不过我们将采用小的、增量的步骤进行重构。在做出这些改变之后，再次运行程序并验证参数解析是否仍然正常。经常验证你的进展是一个好习惯，这样在遇到问题时能帮助你定位问题的成因。")]),e._v(" "),e._m(15),e._v(" "),n("p",[e._v("我们可以采取另一个小的步骤来进一步改善这个函数。现在函数返回一个元组，不过立刻又将元组拆成了独立的部分。这是一个我们可能没有进行正确抽象的信号。")]),e._v(" "),e._m(16),e._v(" "),e._m(17),e._v(" "),e._m(18),e._v(" "),e._m(19),e._v(" "),e._m(20),e._m(21),e._v(" "),e._m(22),e._v(" "),e._m(23),e._v(" "),e._m(24),e._v(" "),e._m(25),e._v(" "),e._m(26),e._v(" "),e._m(27),e._v(" "),e._m(28),e._v(" "),e._m(29),e._v(" "),e._m(30),e._v(" "),e._m(31),e._m(32),e._v(" "),e._m(33),e._v(" "),e._m(34),e._v(" "),e._m(35),e._v(" "),e._m(36),e._m(37),e._v(" "),e._m(38),e._v(" "),e._m(39),e._v(" "),e._m(40),e._v(" "),e._m(41),e._m(42),e._v(" "),e._m(43),e._v(" "),e._m(44),e._v(" "),e._m(45),e._m(46),e._v(" "),e._m(47),e._v(" "),e._m(48),e._v(" "),e._m(49),e._v(" "),e._m(50),e._v(" "),e._m(51),e._m(52),e._v(" "),e._m(53),e._v(" "),e._m(54),e._v(" "),e._m(55),e._v(" "),e._m(56),e._v(" "),e._m(57),e._v(" "),e._m(58),e._v(" "),e._m(59),e._m(60),e._v(" "),e._m(61),e._v(" "),e._m(62),e._v(" "),e._m(63),n("p",[e._v("非常好！现在输出对于用户来说就友好多了。")]),e._v(" "),e._m(64),e._v(" "),e._m(65),e._v(" "),e._m(66),e._v(" "),e._m(67),e._v(" "),e._m(68),e._m(69),e._v(" "),e._m(70),e._v(" "),e._m(71),e._v(" "),e._m(72),e._v(" "),e._m(73),e._v(" "),e._m(74),e._m(75),e._v(" "),e._m(76),e._v(" "),e._m(77),e._v(" "),e._m(78),e._v(" "),e._m(79),e._v(" "),n("p",[e._v("上述代码能够编译，不过会有一个警告：")]),e._v(" "),e._m(80),e._m(81),e._v(" "),e._m(82),e._v(" "),e._m(83),e._v(" "),e._m(84),e._v(" "),e._m(85),e._m(86),e._v(" "),e._m(87),e._v(" "),e._m(88),e._v(" "),e._m(89),e._v(" "),e._m(90),e._v(" "),e._m(91),e._v(" "),e._m(92),e._v(" "),e._m(93),e._v(" "),e._m(94),e._m(95),e._v(" "),e._m(96),e._v(" "),e._m(97),e._v(" "),e._m(98),e._v(" "),e._m(99),e._m(100),e._v(" "),e._m(101),e._v(" "),e._m(102),e._v(" "),n("p",[e._v("让我们利用这些新创建的模块的优势来进行一些在旧代码中难以展开的工作，他们在新代码中却很简单：编写测试！")])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"重构改进模块性和错误处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重构改进模块性和错误处理","aria-hidden":"true"}},[this._v("#")]),this._v(" 重构改进模块性和错误处理")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("第一，"),t("code",[this._v("main")]),this._v(" 现在进行了两个任务：它解析了参数并打开了文件。对于一个这样的小函数，这并不是一个大问题。然而如果 "),t("code",[this._v("main")]),this._v(" 中的功能持续增加，"),t("code",[this._v("main")]),this._v(" 函数处理的独立任务也会增加。当函数承担了更多责任，它就更难以推导，更难以测试，并且更难以在不破坏其他部分的情况下做出修改。最好能分离出功能以便每个函数就负责一个任务。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("这同时也关系到第二个问题："),n("code",[e._v("search")]),e._v(" 和 "),n("code",[e._v("filename")]),e._v(" 是程序中的配置变量，而像 "),n("code",[e._v("f")]),e._v(" 和 "),n("code",[e._v("contents")]),e._v(" 则用来执行程序逻辑。随着 "),n("code",[e._v("main")]),e._v(" 函数的增长，就需要引入更多的变量到作用域中，而当作用域中有更多的变量时，将更难以追踪每个变量的目的。最好能将配置变量组织进一个结构，这样就能使他们的目的更明确了。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("第三个问题是如果打开文件失败我们使用 "),t("code",[this._v("expect")]),this._v(" 来打印出错误信息，不过这个错误信息只是说 "),t("code",[this._v("file not found")]),this._v("。除了缺少文件之外还有很多打开文件可能失败的方式：例如，文件可能存在，不过可能没有打开它的权限。如果我们现在就出于这种情况，打印出的 "),t("code",[this._v("file not found")]),this._v(" 错误信息就给了用户错误的建议！")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("第四，我们不停的使用 "),t("code",[this._v("expect")]),this._v(" 来处理不同的错误，如果用户没有指定足够的参数来运行程序，他们会从 Rust 得到 "),t("code",[this._v("index out of bounds")]),this._v(" 错误，而这并不能明确的解释问题。如果所有的错误处理都位于一处这样将来的维护者在需要修改错误处理逻辑时就只需要考虑这一处代码。将所有的错误处理都放在一处也有助于确保我们打印的错误信息对终端用户来说是有意义的。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"二进制项目的关注分离"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二进制项目的关注分离","aria-hidden":"true"}},[this._v("#")]),this._v(" 二进制项目的关注分离")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("main")]),this._v(" 函数负责多个任务的组织问题在许多二进制项目中很常见。所以 Rust 社区开发出一类在 "),t("code",[this._v("main")]),this._v(" 函数开始变得庞大时进行二进制程序的关注分离的指导性过程。这些过程有如下步骤：")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ol",[n("li",[n("p",[e._v("将程序拆分成 "),n("em",[e._v("main.rs")]),e._v(" 和 "),n("em",[e._v("lib.rs")]),e._v(" 并将程序的逻辑放入 "),n("em",[e._v("lib.rs")]),e._v(" 中。")])]),e._v(" "),n("li",[n("p",[e._v("当命令行解析逻辑比较小时，可以保留在 "),n("em",[e._v("main.rs")]),e._v(" 中。")])]),e._v(" "),n("li",[n("p",[e._v("当命令行解析开始变得复杂时，也同样将其从 "),n("em",[e._v("main.rs")]),e._v(" 提取到 "),n("em",[e._v("lib.rs")]),e._v(" 中。")])]),e._v(" "),n("li",[n("p",[e._v("经过这些过程之后保留在 "),n("code",[e._v("main")]),e._v(" 函数中的责任应该被限制为：")]),e._v(" "),n("ul",[n("li",[e._v("使用参数值调用命令行解析逻辑")]),e._v(" "),n("li",[e._v("设置任何其他的配置")]),e._v(" "),n("li",[e._v("调用 "),n("em",[e._v("lib.rs")]),e._v(" 中的 "),n("code",[e._v("run")]),e._v(" 函数")]),e._v(" "),n("li",[e._v("如果 "),n("code",[e._v("run")]),e._v(" 返回错误，则处理这个错误")])])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("这个模式的一切就是为了关注分离："),n("em",[e._v("main.rs")]),e._v(" 处理程序运行，而 "),n("em",[e._v("lib.rs")]),e._v(" 处理所有的真正的任务逻辑。因为不能直接测试 "),n("code",[e._v("main")]),e._v(" 函数，这个结构通过将所有的程序逻辑移动到 "),n("em",[e._v("lib.rs")]),e._v(" 的函数中使得我们可以测试他们。仅仅保留在 "),n("em",[e._v("main.rs")]),e._v(" 中的代码将足够小以便阅读就可以验证其正确性。让我们遵循这些步骤来重构程序。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"提取参数解析器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提取参数解析器","aria-hidden":"true"}},[this._v("#")]),this._v(" 提取参数解析器")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("首先，我们将解析参数的功能提取到一个 "),n("code",[e._v("main")]),e._v(" 将会调用的函数中，为将命令行解析逻辑移动到 "),n("em",[e._v("src/lib.rs")]),e._v(" 中做准备。示例 12-5 中展示了新 "),n("code",[e._v("main")]),e._v(" 函数的开头，它调用了新函数 "),n("code",[e._v("parse_config")]),e._v("。目前它仍将定义在 "),n("em",[e._v("src/main.rs")]),e._v(" 中：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-rust,ignore extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("fn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let (query, filename) = parse_config(&args);\n\n    // --snip--\n}\n\nfn parse_config(args: &[String]) -> (&str, &str) {\n    let query = &args[1];\n    let filename = &args[2];\n\n    (query, filename)\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("span",{staticClass:"caption"},[this._v("示例 12-5：从 "),t("code",[this._v("main")]),this._v(" 中提取出 "),t("code",[this._v("parse_config")]),this._v(" 函数")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("我们仍然将命令行参数收集进一个 vector，不过不同于在 "),n("code",[e._v("main")]),e._v(" 函数中将索引 1 的参数值赋值给变量 "),n("code",[e._v("query")]),e._v(" 和将索引 2 的值赋值给变量 "),n("code",[e._v("filename")]),e._v("，我们将整个 vector 传递给 "),n("code",[e._v("parse_config")]),e._v(" 函数。接着 "),n("code",[e._v("parse_config")]),e._v(" 函数将包含决定哪个参数该放入哪个变量的逻辑，并将这些值返回到 "),n("code",[e._v("main")]),e._v("。仍然在 "),n("code",[e._v("main")]),e._v(" 中创建变量 "),n("code",[e._v("query")]),e._v(" 和 "),n("code",[e._v("filename")]),e._v("，不过 "),n("code",[e._v("main")]),e._v(" 不再负责处理命令行参数与变量如何对应。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"组合配置值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组合配置值","aria-hidden":"true"}},[this._v("#")]),this._v(" 组合配置值")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("另一个表明还有改进空间的迹象是 "),t("code",[this._v("parse_config")]),this._v(" 名称的 "),t("code",[this._v("config")]),this._v(" 部分，它暗示了我们返回的两个值是相关的并都是一个配置值的一部分。目前除了将这两个值组合进元组之外并没有表达这个数据结构的意义：我们可以将这两个值放入一个结构体并给每个字段一个有意义的名字。这会让未来的维护者更容易理解不同的值如何相互关联以及他们的目的。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("注意：一些同学将这种在复杂类型更为合适的场景下使用基本类型的反模式称为 "),t("strong",[this._v("基本类型偏执")]),this._v("（"),t("em",[this._v("primitive obsession")]),this._v("）。")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("示例 12-6 展示了新定义的结构体 "),n("code",[e._v("Config")]),e._v("，它有字段 "),n("code",[e._v("query")]),e._v(" 和 "),n("code",[e._v("filename")]),e._v("。我们也改变了 "),n("code",[e._v("parse_config")]),e._v(" 函数来返回一个 "),n("code",[e._v("Config")]),e._v(" 结构体的实例，并更新 "),n("code",[e._v("main")]),e._v(" 来使用结构体字段而不是单独的变量：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-rust,should_panic extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('# use std::env;\n# use std::fs;\n#\nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let config = parse_config(&args);\n\n    println!("Searching for {}", config.query);\n    println!("In file {}", config.filename);\n\n    let contents = fs::read_to_string(config.filename)\n        .expect("Something went wrong reading the file");\n\n    // --snip--\n}\n\nstruct Config {\n    query: String,\n    filename: String,\n}\n\nfn parse_config(args: &[String]) -> Config {\n    let query = args[1].clone();\n    let filename = args[2].clone();\n\n    Config { query, filename }\n}\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("span",{staticClass:"caption"},[this._v("示例 12-6：重构 "),t("code",[this._v("parse_config")]),this._v(" 返回一个 "),t("code",[this._v("Config")]),this._v(" 结构体实例")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("parse_config")]),e._v(" 的签名表明它现在返回一个 "),n("code",[e._v("Config")]),e._v(" 值。在 "),n("code",[e._v("parse_config")]),e._v(" 的函数体中，之前返回引用了 "),n("code",[e._v("args")]),e._v(" 中 "),n("code",[e._v("String")]),e._v(" 值的字符串 slice，现在我们选择定义 "),n("code",[e._v("Config")]),e._v(" 来包含拥有所有权的 "),n("code",[e._v("String")]),e._v(" 值。"),n("code",[e._v("main")]),e._v(" 中的 "),n("code",[e._v("args")]),e._v(" 变量是参数值的所有者并只允许 "),n("code",[e._v("parse_config")]),e._v(" 函数借用他们，这意味着如果 "),n("code",[e._v("Config")]),e._v(" 尝试获取 "),n("code",[e._v("args")]),e._v(" 中值的所有权将违反 Rust 的借用规则。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("还有许多不同的方式可以处理 "),t("code",[this._v("String")]),this._v(" 的数据，而最简单但有些不太高效的方式是调用这些值的 "),t("code",[this._v("clone")]),this._v(" 方法。这会生成 "),t("code",[this._v("Config")]),this._v(" 实例可以拥有的数据的完整拷贝，不过会比储存字符串数据的引用消耗更多的时间和内存。不过拷贝数据使得代码显得更加直白因为无需管理引用的生命周期，所以在这种情况下牺牲一小部分性能来换取简洁性的取舍是值得的。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("h4",{attrs:{id:"使用-clone-的权衡取舍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用-clone-的权衡取舍","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用 "),n("code",[e._v("clone")]),e._v(" 的权衡取舍")]),e._v(" "),n("p",[e._v("由于其运行时消耗，许多 Rustacean 之间有一个趋势是倾向于避免使用 "),n("code",[e._v("clone")]),e._v(" 来解决所有权问题。在关于迭代器的第十三章中，我们将会学习如何更有效率的处理这种情况，不过现在，复制一些字符串来取得进展是没有问题的，因为只会进行一次这样的拷贝，而且文件名和要搜索的字符串都比较短。在第一轮编写时拥有一个可以工作但有点低效的程序要比尝试过度优化代码更好一些。随着你对 Rust 更加熟练，将能更轻松的直奔合适的方法，不过现在调用 "),n("code",[e._v("clone")]),e._v(" 是完全可以接受的。")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("我们更新 "),n("code",[e._v("main")]),e._v(" 将 "),n("code",[e._v("parse_config")]),e._v(" 返回的 "),n("code",[e._v("Config")]),e._v(" 实例放入变量 "),n("code",[e._v("config")]),e._v(" 中，并将之前分别使用 "),n("code",[e._v("search")]),e._v(" 和 "),n("code",[e._v("filename")]),e._v(" 变量的代码更新为现在的使用 "),n("code",[e._v("Config")]),e._v(" 结构体的字段的代码。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("现在代码更明确的表现了我们的意图，"),t("code",[this._v("query")]),this._v(" 和 "),t("code",[this._v("filename")]),this._v(" 是相关联的并且他们的目的是配置程序如何工作。任何使用这些值的代码就知道在 "),t("code",[this._v("config")]),this._v(" 实例中对应目的的字段名中寻找他们。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"创建一个-config-构造函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建一个-config-构造函数","aria-hidden":"true"}},[this._v("#")]),this._v(" 创建一个 "),t("code",[this._v("Config")]),this._v(" 构造函数")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("目前为止，我们将负责解析命令行参数的逻辑从 "),n("code",[e._v("main")]),e._v(" 提取到了 "),n("code",[e._v("parse_config")]),e._v(" 函数中，这有助于我们看清值 "),n("code",[e._v("query")]),e._v(" 和 "),n("code",[e._v("filename")]),e._v(" 是相互关联的并应该在代码中表现这种关系。接着我们增加了 "),n("code",[e._v("Config")]),e._v(" 结构体来描述 "),n("code",[e._v("query")]),e._v(" 和 "),n("code",[e._v("filename")]),e._v(" 的相关性，并能够从 "),n("code",[e._v("parse_config")]),e._v(" 函数中将这些值的名称作为结构体字段名称返回。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("所以现在 "),n("code",[e._v("parse_config")]),e._v(" 函数的目的是创建一个 "),n("code",[e._v("Config")]),e._v(" 实例，我们可以将 "),n("code",[e._v("parse_config")]),e._v(" 从一个普通函数变为一个叫做 "),n("code",[e._v("new")]),e._v(" 的与结构体关联的函数。做出这个改变使得代码更符合习惯：可以像标准库中的 "),n("code",[e._v("String")]),e._v(" 调用 "),n("code",[e._v("String::new")]),e._v(" 来创建一个该类型的实例那样，将 "),n("code",[e._v("parse_config")]),e._v(" 变为一个与 "),n("code",[e._v("Config")]),e._v(" 关联的 "),n("code",[e._v("new")]),e._v(" 函数。示例 12-7 展示了需要做出的修改：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-rust,should_panic extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("# use std::env;\n#\nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let config = Config::new(&args);\n\n    // --snip--\n}\n\n# struct Config {\n#     query: String,\n#     filename: String,\n# }\n#\n// --snip--\n\nimpl Config {\n    fn new(args: &[String]) -> Config {\n        let query = args[1].clone();\n        let filename = args[2].clone();\n\n        Config { query, filename }\n    }\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("span",{staticClass:"caption"},[this._v("示例 12-7：将 "),t("code",[this._v("parse_config")]),this._v(" 变为 "),t("code",[this._v("Config::new")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("这里将 "),n("code",[e._v("main")]),e._v(" 中调用 "),n("code",[e._v("parse_config")]),e._v(" 的地方更新为调用 "),n("code",[e._v("Config::new")]),e._v("。我们将 "),n("code",[e._v("parse_config")]),e._v(" 的名字改为 "),n("code",[e._v("new")]),e._v(" 并将其移动到 "),n("code",[e._v("impl")]),e._v(" 块中，这使得 "),n("code",[e._v("new")]),e._v(" 函数与 "),n("code",[e._v("Config")]),e._v(" 相关联。再次尝试编译并确保它可以工作。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"修复错误处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修复错误处理","aria-hidden":"true"}},[this._v("#")]),this._v(" 修复错误处理")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("现在我们开始修复错误处理。回忆一下之前提到过如果 "),t("code",[this._v("args")]),this._v(" vector 包含少于 3 个项并尝试访问 vector 中索引 "),t("code",[this._v("1")]),this._v(" 或索引 "),t("code",[this._v("2")]),this._v(" 的值会造成程序 panic。尝试不带任何参数运行程序；这将看起来像这样：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("$ cargo run\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs\n     Running `target/debug/minigrep`\nthread 'main' panicked at 'index out of bounds: the len is 1\nbut the index is 1', src/main.rs:29:21\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("index out of bounds: the len is 1 but the index is 1")]),this._v(" 是一个针对程序员的错误信息，然而这并不能真正帮助终端用户理解发生了什么和他们应该做什么。现在就让我们修复它吧。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"改善错误信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#改善错误信息","aria-hidden":"true"}},[this._v("#")]),this._v(" 改善错误信息")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("在示例 12-8 中，在 "),n("code",[e._v("new")]),e._v(" 函数中增加了一个检查在访问索引 "),n("code",[e._v("1")]),e._v(" 和 "),n("code",[e._v("2")]),e._v(" 之前检查 slice 是否足够长。如果 slice 不够长，我们使用一个更好的错误信息 panic 而不是 "),n("code",[e._v("index out of bounds")]),e._v(" 信息：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-rust,ignore extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('// --snip--\nfn new(args: &[String]) -> Config {\n    if args.len() < 3 {\n        panic!("not enough arguments");\n    }\n    // --snip--\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("span",{staticClass:"caption"},[this._v("示例 12-8：增加一个参数数量检查")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("这类似于示例 9-9 中的 "),n("code",[e._v("Guess::new")]),e._v(" 函数，那里如果 "),n("code",[e._v("value")]),e._v(" 参数超出了有效值的范围就调用 "),n("code",[e._v("panic!")]),e._v("。不同于检查值的范围，这里检查 "),n("code",[e._v("args")]),e._v(" 的长度至少是 "),n("code",[e._v("3")]),e._v("，而函数的剩余部分则可以在假设这个条件成立的基础上运行。如果\n"),n("code",[e._v("args")]),e._v(" 少于 3 个项，则这个条件将为真，并调用 "),n("code",[e._v("panic!")]),e._v(" 立即终止程序。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("有了 "),t("code",[this._v("new")]),this._v(" 中这几行额外的代码，再次不带任何参数运行程序并看看现在错误看起来像什么：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("$ cargo run\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs\n     Running `target/debug/minigrep`\nthread 'main' panicked at 'not enough arguments', src/main.rs:30:12\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这个输出就好多了，现在有了一个合理的错误信息。然而，还是有一堆额外的信息我们不希望提供给用户。所以在这里使用示例 9-9 中的技术可能不是最好的；正如第九章所讲到的一样，"),t("code",[this._v("panic!")]),this._v(" 的调用更趋向于程序上的问题而不是使用上的问题。相反我们可以使用第九章学习的另一个技术 —— 返回一个可以表明成功或错误的 "),t("code",[this._v("Result")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"从-new-中返回-result-而不是调用-panic"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从-new-中返回-result-而不是调用-panic","aria-hidden":"true"}},[this._v("#")]),this._v(" 从 "),t("code",[this._v("new")]),this._v(" 中返回 "),t("code",[this._v("Result")]),this._v(" 而不是调用 "),t("code",[this._v("panic!")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("我们可以选择返回一个 "),n("code",[e._v("Result")]),e._v(" 值，它在成功时会包含一个 "),n("code",[e._v("Config")]),e._v(" 的实例，而在错误时会描述问题。当 "),n("code",[e._v("Config::new")]),e._v(" 与 "),n("code",[e._v("main")]),e._v(" 交流时，可以使用 "),n("code",[e._v("Result")]),e._v(" 类型来表明这里存在问题。接着修改 "),n("code",[e._v("main")]),e._v(" 将 "),n("code",[e._v("Err")]),e._v(" 成员转换为对用户更友好的错误，而不是 "),n("code",[e._v("panic!")]),e._v(" 调用产生的关于 "),n("code",[e._v("thread 'main'")]),e._v(" 和 "),n("code",[e._v("RUST_BACKTRACE")]),e._v(" 的文本。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("示例 12-9 展示了为了返回 "),t("code",[this._v("Result")]),this._v(" 在 "),t("code",[this._v("Config::new")]),this._v(" 的返回值和函数体中所需的改变。注意这还不能编译，直到下一个示例同时也更新了 "),t("code",[this._v("main")]),this._v(" 之后。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-rust,ignore extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('impl Config {\n    fn new(args: &[String]) -> Result<Config, &\'static str> {\n        if args.len() < 3 {\n            return Err("not enough arguments");\n        }\n\n        let query = args[1].clone();\n        let filename = args[2].clone();\n\n        Ok(Config { query, filename })\n    }\n}\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("span",{staticClass:"caption"},[this._v("示例 12-9：从 "),t("code",[this._v("Config::new")]),this._v(" 中返回 "),t("code",[this._v("Result")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("现在 "),n("code",[e._v("new")]),e._v(" 函数返回一个 "),n("code",[e._v("Result")]),e._v("，在成功时带有一个 "),n("code",[e._v("Config")]),e._v(" 实例而在出现错误时带有一个 "),n("code",[e._v("&'static str")]),e._v("。回忆一下第十章 “静态生命周期” 中讲到 "),n("code",[e._v("&'static str")]),e._v(" 是字符串字面值的类型，也是目前的错误信息。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("new")]),e._v(" 函数体中有两处修改：当没有足够参数时不再调用 "),n("code",[e._v("panic!")]),e._v("，而是返回 "),n("code",[e._v("Err")]),e._v(" 值。同时我们将 "),n("code",[e._v("Config")]),e._v(" 返回值包装进 "),n("code",[e._v("Ok")]),e._v(" 成员中。这些修改使得函数符合其新的类型签名。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("通过让 "),n("code",[e._v("Config::new")]),e._v(" 返回一个 "),n("code",[e._v("Err")]),e._v(" 值，这就允许 "),n("code",[e._v("main")]),e._v(" 函数处理 "),n("code",[e._v("new")]),e._v(" 函数返回的 "),n("code",[e._v("Result")]),e._v(" 值并在出现错误的情况更明确的结束进程。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"config-new-调用并处理错误"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#config-new-调用并处理错误","aria-hidden":"true"}},[this._v("#")]),this._v(" "),t("code",[this._v("Config::new")]),this._v(" 调用并处理错误")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("为了处理错误情况并打印一个对用户友好的信息，我们需要像示例 12-10 那样更新 "),n("code",[e._v("main")]),e._v(" 函数来处理现在 "),n("code",[e._v("Config::new")]),e._v(" 返回的 "),n("code",[e._v("Result")]),e._v("。另外还需要负责手动实现 "),n("code",[e._v("panic!")]),e._v(" 的使用非零错误码退出命令行工具的工作。非零的退出状态是一个告诉调用程序的进程我们的程序以错误状态退出的惯例信号。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-rust,ignore extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('use std::process;\n\nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let config = Config::new(&args).unwrap_or_else(|err| {\n        println!("Problem parsing arguments: {}", err);\n        process::exit(1);\n    });\n\n    // --snip--\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("span",{staticClass:"caption"},[this._v("示例 12-10：如果新建 "),t("code",[this._v("Config")]),this._v(" 失败则使用错误码退出")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("在上面的示例中，使用了一个之前没有涉及到的方法："),n("code",[e._v("unwrap_or_else")]),e._v("，它定义于标准库的 "),n("code",[e._v("Result<T, E>")]),e._v(" 上。使用 "),n("code",[e._v("unwrap_or_else")]),e._v(" 可以进行一些自定义的非 "),n("code",[e._v("panic!")]),e._v(" 的错误处理。当 "),n("code",[e._v("Result")]),e._v(" 是 "),n("code",[e._v("Ok")]),e._v(" 时，这个方法的行为类似于 "),n("code",[e._v("unwrap")]),e._v("：它返回 "),n("code",[e._v("Ok")]),e._v(" 内部封装的值。然而，当其值是 "),n("code",[e._v("Err")]),e._v(" 时，该方法会调用一个 "),n("strong",[e._v("闭包")]),e._v("（"),n("em",[e._v("closure")]),e._v("），也就是一个我们定义的作为参数传递给 "),n("code",[e._v("unwrap_or_else")]),e._v(" 的匿名函数。第十三章会更详细的介绍闭包。现在你需要理解的是 "),n("code",[e._v("unwrap_or_else")]),e._v(" 会将 "),n("code",[e._v("Err")]),e._v(" 的内部值，也就是示例 12-9 中增加的 "),n("code",[e._v("not enough arguments")]),e._v(" 静态字符串的情况，传递给闭包中位于两道竖线间的参数 "),n("code",[e._v("err")]),e._v("。闭包中的代码在其运行时可以使用这个 "),n("code",[e._v("err")]),e._v(" 值。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("我们新增了一个 "),n("code",[e._v("use")]),e._v(" 行来从标准库中导入 "),n("code",[e._v("process")]),e._v("。在错误的情况闭包中将被运行的代码只有两行：我们打印出了 "),n("code",[e._v("err")]),e._v(" 值，接着调用了 "),n("code",[e._v("std::process::exit")]),e._v("。"),n("code",[e._v("process::exit")]),e._v(" 会立即停止程序并将传递给它的数字作为退出状态码。这类似于示例 12-8 中使用的基于 "),n("code",[e._v("panic!")]),e._v(" 的错误处理，除了不会再得到所有的额外输出了。让我们试试：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("$ cargo run\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.48 secs\n     Running `target/debug/minigrep`\nProblem parsing arguments: not enough arguments\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"从-main-提取逻辑"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从-main-提取逻辑","aria-hidden":"true"}},[this._v("#")]),this._v(" 从 "),t("code",[this._v("main")]),this._v(" 提取逻辑")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("现在我们完成了配置解析的重构：让我们转向程序的逻辑。正如 “二进制项目的关注分离” 部分所展开的讨论，我们将提取一个叫做 "),t("code",[this._v("run")]),this._v(" 的函数来存放目前 "),t("code",[this._v("main")]),this._v("函数中不属于设置配置或处理错误的所有逻辑。一旦完成这些，"),t("code",[this._v("main")]),this._v(" 函数将简明的足以通过观察来验证，而我们将能够为所有其他逻辑编写测试。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("示例 12-11 展示了提取出来的 "),t("code",[this._v("run")]),this._v(" 函数。目前我们只进行小的增量式的提取函数的改进。我们仍将在 "),t("em",[this._v("src/main.rs")]),this._v(" 中定义这个函数：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-rust,ignore extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('fn main() {\n    // --snip--\n\n    println!("Searching for {}", config.query);\n    println!("In file {}", config.filename);\n\n    run(config);\n}\n\nfn run(config: Config) {\n    let contents = fs::read_to_string(config.filename)\n        .expect("something went wrong reading the file");\n\n    println!("With text:\\n{}", contents);\n}\n\n// --snip--\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("span",{staticClass:"caption"},[this._v("示例 12-11：提取 "),t("code",[this._v("run")]),this._v(" 函数来包含剩余的程序逻辑")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("现在 "),n("code",[e._v("run")]),e._v(" 函数包含了 "),n("code",[e._v("main")]),e._v(" 中从读取文件开始的剩余的所有逻辑。"),n("code",[e._v("run")]),e._v(" 函数获取一个 "),n("code",[e._v("Config")]),e._v(" 实例作为参数。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"从-run-函数中返回错误"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从-run-函数中返回错误","aria-hidden":"true"}},[this._v("#")]),this._v(" 从 "),t("code",[this._v("run")]),this._v(" 函数中返回错误")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("通过将剩余的逻辑分离进 "),n("code",[e._v("run")]),e._v(" 函数而不是留在 "),n("code",[e._v("main")]),e._v(" 中，就可以像示例 12-9 中的 "),n("code",[e._v("Config::new")]),e._v(" 那样改进错误处理。不再通过 "),n("code",[e._v("expect")]),e._v(" 允许程序 panic，"),n("code",[e._v("run")]),e._v(" 函数将会在出错时返回一个 "),n("code",[e._v("Result<T, E>")]),e._v("。这让我们进一步以一种对用户友好的方式统一 "),n("code",[e._v("main")]),e._v(" 中的错误处理。示例 12-12 展示了 "),n("code",[e._v("run")]),e._v(" 签名和函数体中的改变：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-rust,ignore extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('use std::error::Error;\n\n// --snip--\n\nfn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.filename)?;\n\n    println!("With text:\\n{}", contents);\n\n    Ok(())\n}\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("span",{staticClass:"caption"},[this._v("示例 12-12：修改 "),t("code",[this._v("run")]),this._v(" 函数返回 "),t("code",[this._v("Result")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("这里我们做出了三个明显的修改。首先，将 "),n("code",[e._v("run")]),e._v(" 函数的返回类型变为 "),n("code",[e._v("Result<(), Box<Error>>")]),e._v("。之前这个函数返回 unit 类型 "),n("code",[e._v("()")]),e._v("，现在它仍然保持作为 "),n("code",[e._v("Ok")]),e._v(" 时的返回值。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("对于错误类型，使用了 "),n("strong",[e._v("trait 对象")]),e._v(" "),n("code",[e._v("Box<dyn Error>")]),e._v("（在开头使用了 "),n("code",[e._v("use")]),e._v(" 语句将 "),n("code",[e._v("std::error::Error")]),e._v(" 引入作用域）。第十七章会涉及 trait 对象。目前只需知道 "),n("code",[e._v("Box<dyn Error>")]),e._v(" 意味着函数会返回实现了 "),n("code",[e._v("Error")]),e._v(" trait 的类型，不过无需指定具体将会返回的值的类型。这提供了在不同的错误场景可能有不同类型的错误返回值的灵活性。这也就是 "),n("code",[e._v("dyn")]),e._v("，它是 “动态”（“dynamic”）的缩写。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("第二个改变是去掉了 "),n("code",[e._v("expect")]),e._v(" 调用并替换为第九章讲到的 "),n("code",[e._v("?")]),e._v("。不同于遇到错误就 "),n("code",[e._v("panic!")]),e._v("，"),n("code",[e._v("?")]),e._v(" 会从函数中返回错误值并让调用者来处理它。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("第三个修改是现在成功时这个函数会返回一个 "),n("code",[e._v("Ok")]),e._v(" 值。因为 "),n("code",[e._v("run")]),e._v(" 函数签名中声明成功类型返回值是 "),n("code",[e._v("()")]),e._v("，这意味着需要将 unit 类型值包装进 "),n("code",[e._v("Ok")]),e._v(" 值中。"),n("code",[e._v("Ok(())")]),e._v(" 一开始看起来有点奇怪，不过这样使用 "),n("code",[e._v("()")]),e._v(" 是表明我们调用 "),n("code",[e._v("run")]),e._v(" 只是为了它的副作用的惯用方式；它并没有返回什么有意义的值。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("warning: unused `std::result::Result` which must be used\n  --\x3e src/main.rs:18:5\n   |\n18 |     run(config);\n   |     ^^^^^^^^^^^^\n= note: #[warn(unused_must_use)] on by default\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Rust 提示我们的代码忽略了 "),t("code",[this._v("Result")]),this._v(" 值，它可能表明这里存在一个错误。虽然我们没有检查这里是否有一个错误，而编译器提醒我们这里应该有一些错误处理代码！现在就让我们修正这个问题。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"处理-main-中-run-返回的错误"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#处理-main-中-run-返回的错误","aria-hidden":"true"}},[this._v("#")]),this._v(" 处理 "),t("code",[this._v("main")]),this._v(" 中 "),t("code",[this._v("run")]),this._v(" 返回的错误")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们将检查错误并使用类似示例 12-10 中 "),t("code",[this._v("Config::new")]),this._v(" 处理错误的技术来处理他们，不过有一些细微的不同：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-rust,ignore extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('fn main() {\n    // --snip--\n\n    println!("Searching for {}", config.query);\n    println!("In file {}", config.filename);\n\n    if let Err(e) = run(config) {\n        println!("Application error: {}", e);\n\n        process::exit(1);\n    }\n}\n')])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("我们使用 "),n("code",[e._v("if let")]),e._v(" 来检查 "),n("code",[e._v("run")]),e._v(" 是否返回一个 "),n("code",[e._v("Err")]),e._v(" 值，不同于 "),n("code",[e._v("unwrap_or_else")]),e._v("，并在出错时调用 "),n("code",[e._v("process::exit(1)")]),e._v("。"),n("code",[e._v("run")]),e._v(" 并不返回像 "),n("code",[e._v("Config::new")]),e._v(" 返回的 "),n("code",[e._v("Config")]),e._v(" 实例那样需要 "),n("code",[e._v("unwrap")]),e._v(" 的值。因为 "),n("code",[e._v("run")]),e._v(" 在成功时返回 "),n("code",[e._v("()")]),e._v("，而我们只关心检测错误，所以并不需要 "),n("code",[e._v("unwrap_or_else")]),e._v(" 来返回未封装的值，因为它只会是 "),n("code",[e._v("()")]),e._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("不过两个例子中 "),t("code",[this._v("if let")]),this._v(" 和 "),t("code",[this._v("unwrap_or_else")]),this._v(" 的函数体都一样：打印出错误并退出。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"将代码拆分到库-crate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#将代码拆分到库-crate","aria-hidden":"true"}},[this._v("#")]),this._v(" 将代码拆分到库 crate")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("现在我们的 "),n("code",[e._v("minigrep")]),e._v(" 项目看起来好多了！现在我们将要拆分 "),n("em",[e._v("src/main.rs")]),e._v(" 并将一些代码放入 "),n("em",[e._v("src/lib.rs")]),e._v("，这样就能测试他们并拥有一个含有更少功能的 "),n("code",[e._v("main")]),e._v(" 函数。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("让我们将所有不是 "),t("code",[this._v("main")]),this._v(" 函数的代码从 "),t("em",[this._v("src/main.rs")]),this._v(" 移动到新文件 "),t("em",[this._v("src/lib.rs")]),this._v(" 中：")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("code",[e._v("run")]),e._v(" 函数定义")]),e._v(" "),n("li",[e._v("相关的 "),n("code",[e._v("use")]),e._v(" 语句")]),e._v(" "),n("li",[n("code",[e._v("Config")]),e._v(" 的定义")]),e._v(" "),n("li",[n("code",[e._v("Config::new")]),e._v(" 函数定义")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("现在 "),t("em",[this._v("src/lib.rs")]),this._v(" 的内容应该看起来像示例 12-13（为了简洁省略了函数体）。注意直到下一个示例修改完 "),t("em",[this._v("src/main.rs")]),this._v(" 之后，代码还不能编译：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-rust,ignore extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("use std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub filename: String,\n}\n\nimpl Config {\n    pub fn new(args: &[String]) -> Result<Config, &'static str> {\n        // --snip--\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    // --snip--\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("span",{staticClass:"caption"},[this._v("示例 12-13：将 "),t("code",[this._v("Config")]),this._v(" 和 "),t("code",[this._v("run")]),this._v(" 移动到 "),t("em",[this._v("src/lib.rs")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("这里使用了公有的 "),n("code",[e._v("pub")]),e._v(" 关键字：在 "),n("code",[e._v("Config")]),e._v("、其字段和其 "),n("code",[e._v("new")]),e._v(" 方法，以及 "),n("code",[e._v("run")]),e._v(" 函数上。现在我们有了一个拥有可以测试的公有 API 的库 crate 了。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("现在需要在 "),t("em",[this._v("src/main.rs")]),this._v(" 中将移动到 "),t("em",[this._v("src/lib.rs")]),this._v(" 的代码引入二进制 crate 的作用域中，如示例 12-14 所示：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("span",{staticClass:"filename"},[this._v("Filename: src/main.rs")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-rust,ignore extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("use std::env;\nuse std::process;\n\nuse minigrep;\nuse minigrep::Config;\n\nfn main() {\n    // --snip--\n    if let Err(e) = minigrep::run(config) {\n        // --snip--\n    }\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("span",{staticClass:"caption"},[this._v("示例 12-14：将 "),t("code",[this._v("minigrep")]),this._v(" crate 引入 "),t("em",[this._v("src/main.rs")]),this._v(" 的作用域中")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("为了将库 crate 引入二进制 crate，我们使用 "),n("code",[e._v("extern crate minigrep")]),e._v("。接着增加 "),n("code",[e._v("use minigrep::Config")]),e._v(" 将 "),n("code",[e._v("Config")]),e._v(" 类型引入作用域，并使用 crate 名作为 "),n("code",[e._v("run")]),e._v(" 函数的前缀。通过这些重构，所有功能应该能够联系在一起并运行了。运行 "),n("code",[e._v("cargo run")]),e._v(" 来确保一切都正确的衔接在一起。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("哇哦！这可有很多的工作，不过我们为将来的成功打下了基础。现在处理错误将更容易，同时代码也更加模块化。从现在开始几乎所有的工作都将在 "),t("em",[this._v("src/lib.rs")]),this._v(" 中进行。")])}],!1,null,null,null);s.options.__file="ch12-03-improving-error-handling-and-modularity.md";t.default=s.exports}}]);