(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{244:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/second-edition/src/ch20-02-multithreaded.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch20-02-multithreaded.md"),n("OutboundLink")],1),t._v(" "),n("br"),t._v("\ncommit 1f0136399ba2f5540ecc301fab04bd36492e5554")])]),t._v(" "),n("p",[t._v("目前 server 会依次处理每一个请求，意味着它在完成第一个连接的处理之前不会处理第二个连接。如果 server 正接收越来越多的请求，这类串行操作会使性能越来越差。如果一个请求花费很长时间来处理，随后而来的请求则不得不等待这个长请求结束，即便这些新请求可以很快就处理完。我们需要修复这种情况，不过首先让我们实际尝试一下这个问题。")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._m(5),t._v(" "),t._m(6),t._v(" "),n("p",[t._v("现在就可以真切的看出我们的 server 有多么的原始；真实的库将会以更简洁的方式处理多请求识别问题。")]),t._v(" "),t._m(7),t._v(" "),n("p",[t._v("这里有多种办法来改变我们的 web server 使其避免所有请求都排在慢请求之后；我们将要实现的一个便是线程池。")]),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),n("p",[t._v("我们会将池中线程限制为较少的数量，以防拒绝服务（Denial of Service， DoS）攻击；如果程序为每一个接收的请求都新建一个线程，某人向 server 发起千万级的请求时会耗尽服务器的资源并导致所有请求的处理都被终止。")]),t._v(" "),t._m(10),t._v(" "),n("p",[t._v("这个设计仅仅是多种改善 web server 吞吐量的方法之一。其他可供探索的方法有 fork/join 模型和单线程异步 I/O 模型。如果你对这个主题感兴趣，则可以阅读更多关于其他解决方案的内容并尝试用 Rust 实现他们；对于一个像 Rust 这样的底层语言，所有这些方法都是可能的。")]),t._v(" "),n("p",[t._v("在开始之前，让我们讨论一下线程池应用看起来怎样。当尝试设计代码时，首先编写客户端接口确实有助于指导代码设计。以期望的调用方式来构建 API 代码的结构，接着在这个结构之内实现功能，而不是先实现功能再设计公有 API。")]),t._v(" "),n("p",[t._v("类似于第十二章项目中使用的测试驱动开发。这里将要使用编译器驱动开发（Compiler Driven Development）。我们将编写调用所期望的函数的代码，接着观察编译器错误告诉我们接下来需要修改什么使得代码可以工作。")]),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),n("p",[t._v("这仍然不能工作，再次尝试运行来得到下一个需要解决的错误：")]),t._v(" "),t._m(33),t._m(34),t._v(" "),t._m(35),t._v(" "),t._m(36),t._m(37),t._v(" "),n("p",[t._v("再次编译检查这段代码：")]),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),t._m(41),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44),t._v(" "),t._m(45),t._m(46),t._v(" "),t._m(47),t._v(" "),t._m(48),t._m(49),t._v(" "),t._m(50),t._v(" "),t._m(51),t._v(" "),t._m(52),t._v(" "),t._m(53),t._v(" "),t._m(54),t._v(" "),t._m(55),t._v(" "),t._m(56),t._m(57),t._v(" "),t._m(58),t._v(" "),t._m(59),t._v(" "),t._m(60),t._m(61),t._v(" "),t._m(62),t._v(" "),t._m(63),t._v(" "),t._m(64),t._m(65),t._v(" "),t._m(66),t._v(" "),t._m(67),t._v(" "),t._m(68),t._m(69),t._v(" "),t._m(70),t._v(" "),t._m(71),t._v(" "),t._m(72),t._v(" "),t._m(73),t._v(" "),t._m(74),t._v(" "),t._m(75),t._v(" "),t._m(76),t._v(" "),t._m(77),t._v(" "),t._m(78),t._v(" "),n("p",[t._v("如果你渴望挑战，在查示例 20-15 中的代码之前尝试自己实现这些修改。")]),t._v(" "),n("p",[t._v("准备好了吗？示例 20-15 就是一个做出了这些修改的例子：")]),t._v(" "),t._m(79),t._v(" "),t._m(80),t._m(81),t._v(" "),t._m(82),t._v(" "),t._m(83),t._v(" "),t._m(84),t._v(" "),t._m(85),t._v(" "),t._m(86),t._v(" "),t._m(87),t._v(" "),t._m(88),t._v(" "),t._m(89),t._v(" "),t._m(90),t._v(" "),t._m(91),t._v(" "),t._m(92),t._m(93),t._v(" "),t._m(94),t._v(" "),t._m(95),t._v(" "),t._m(96),t._v(" "),t._m(97),t._m(98),t._v(" "),t._m(99),t._v(" "),n("p",[t._v("如果尝试 check 代码，会得到这个错误：")]),t._v(" "),t._m(100),t._m(101),t._v(" "),t._m(102),t._v(" "),t._m(103),t._v(" "),t._m(104),t._v(" "),t._m(105),t._m(106),t._v(" "),t._m(107),t._v(" "),n("p",[t._v("通过这些修改，代码可以编译了！我们做到了！")]),t._v(" "),t._m(108),t._v(" "),t._m(109),t._v(" "),t._m(110),t._v(" "),t._m(111),t._m(112),t._v(" "),t._m(113),t._v(" "),t._m(114),t._v(" "),t._m(115),t._v(" "),t._m(116),t._m(117),t._v(" "),t._m(118),t._v(" "),t._m(119),t._v(" "),t._m(120),t._v(" "),n("p",[t._v("理论上这段代码应该能够编译。不幸的是，Rust 编译器仍不够完美，会给出如下错误：")]),t._v(" "),t._m(121),t._m(122),t._v(" "),t._m(123),t._v(" "),n("p",[t._v("Rust 仍在努力改进提升编译器的过程中，不过将来示例 20-20 中的代码应该能够正常工作。有很多像你一样的人正在修复这个以及其他问题！当你结束了本书的阅读，我们希望看到你也成为他们中的一员。")]),t._v(" "),t._m(124),t._v(" "),t._m(125),t._v(" "),t._m(126),t._m(127),t._v(" "),t._m(128),t._v(" "),t._m(129),t._v(" "),t._m(130),t._v(" "),t._m(131),t._v(" "),n("p",[t._v("这是非常狡猾且复杂的手段。无需过分担心他们并不是非常有道理；总有一天，这一切将是毫无必要的。")]),t._v(" "),t._m(132),t._v(" "),t._m(133),t._m(134),t._v(" "),t._m(135),t._v(" "),t._m(136),t._v(" "),t._m(137),t._m(138),t._v(" "),t._m(139),t._v(" "),t._m(140)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"将单线程-server-变为多线程-server"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#将单线程-server-变为多线程-server","aria-hidden":"true"}},[this._v("#")]),this._v(" 将单线程 server 变为多线程 server")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"在当前-server-实现中模拟慢请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在当前-server-实现中模拟慢请求","aria-hidden":"true"}},[this._v("#")]),this._v(" 在当前 server 实现中模拟慢请求")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("让我们看看一个慢请求如何影响当前 server 实现中的其他请求。示例 20-10 通过模拟慢响应实现了 "),s("code",[this._v("/sleep")]),this._v(" 请求处理，它会使 server 在响应之前休眠五秒。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("time"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Duration"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("io"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("prelude"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token operator"}},[t._v("*")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("net"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("TcpStream"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("fs"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("File"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("handle_connection")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" stream"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" TcpStream"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" buffer "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("512")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#     stream"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("read")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" buffer"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" get "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('b"GET / HTTP/1.1\\r\\n"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sleep "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('b"GET /sleep HTTP/1.1\\r\\n"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("status_line"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filename"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" buffer"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("starts_with")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("get"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"HTTP/1.1 200 OK\\r\\n\\r\\n"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"hello.html"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" buffer"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("starts_with")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sleep"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("sleep")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Duration"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from_secs")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("5")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"HTTP/1.1 200 OK\\r\\n\\r\\n"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"hello.html"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\n"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"404.html"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 20-10: 通过识别 "),s("code",[this._v("/sleep")]),this._v(" 并休眠五秒来模拟慢请求")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这段代码有些凌乱，不过对于模拟的目的来说已经足够！这里创建了第二个请求 "),n("code",[t._v("sleep")]),t._v("，我们会识别其数据。在 "),n("code",[t._v("if")]),t._v(" 块之后增加了一个 "),n("code",[t._v("else if")]),t._v(" 来检查 "),n("code",[t._v("/sleep")]),t._v(" 请求，当接收到这个请求时，在渲染成功 HTML 页面之前会先休眠五秒。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("使用 "),n("code",[t._v("cargo run")]),t._v(" 启动 server，并接着打开两个浏览器窗口：一个请求 "),n("code",[t._v("http://localhost:7878/")]),t._v(" 而另一个请求 "),n("code",[t._v("http://localhost:7878/sleep")]),t._v("。如果像之前一样多次请求 "),n("code",[t._v("/")]),t._v("，会发现响应的比较快速。不过如果请求"),n("code",[t._v("/sleep")]),t._v(" 之后在请求 "),n("code",[t._v("/")]),t._v("，就会看到 "),n("code",[t._v("/")]),t._v(" 会等待直到 "),n("code",[t._v("sleep")]),t._v(" 休眠完五秒之后才出现。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"使用线程池改善吞吐量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用线程池改善吞吐量","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用线程池改善吞吐量")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("线程池")]),this._v("（"),s("em",[this._v("thread pool")]),this._v("）是一组预先分配的等待或准备处理任务的线程。当程序收到一个新任务，线程池中的一个线程会被分配任务，这个线程会离开并处理任务。其余的线程则可用于处理在第一个线程处理任务的同时处理其他接收到的任务。当第一个线程处理完任务时，它会返回空闲线程池中等待处理新任务。线程池允许我们并发处理连接，增加 server 的吞吐量。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("不同于分配无限的线程，线程池中将有固定数量的等待线程。当新进请求时，将请求发送到线程池中做处理。线程池会维护一个接收请求的队列。每一个线程会从队列中取出一个请求，处理请求，接着向对队列索取另一个请求。通过这种设计，则可以并发处理 "),s("code",[this._v("N")]),this._v(" 个请求，其中 "),s("code",[this._v("N")]),this._v(" 为线程数。如果每一个线程都在响应慢请求，之后的请求仍然会阻塞队列，不过相比之前增加了能处理的慢请求的数量。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"为每一个请求分配线程的代码结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为每一个请求分配线程的代码结构","aria-hidden":"true"}},[this._v("#")]),this._v(" 为每一个请求分配线程的代码结构")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("首先，让我们探索一下为每一个连接都创建一个线程的代码看起来如何。这并不是最终方案，因为正如之前讲到的它会潜在的分配无限的线程，不过这是一个开始。示例 20-11 展示了 "),s("code",[this._v("main")]),this._v(" 的改变，它在 "),s("code",[this._v("for")]),this._v(" 循环中为每一个流分配了一个新线程进行处理：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,no_run extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('# use std::thread;\n# use std::io::prelude::*;\n# use std::net::TcpListener;\n# use std::net::TcpStream;\n#\nfn main() {\n    let listener = TcpListener::bind("127.0.0.1:7878").unwrap();\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        thread::spawn(|| {\n            handle_connection(stream);\n        });\n    }\n}\n# fn handle_connection(mut stream: TcpStream) {}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 20-11: 为每一个流新建一个线程")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("正如第十六章讲到的，"),n("code",[t._v("thread::spawn")]),t._v(" 会创建一个新线程并在其中运行闭包中的代码。如果运行这段代码并在在浏览器中加载 "),n("code",[t._v("/sleep")]),t._v("，接着在另两个浏览器标签页中加载 "),n("code",[t._v("/")]),t._v("，确实会发现 "),n("code",[t._v("/")]),t._v(" 请求不必等待 "),n("code",[t._v("/sleep")]),t._v(" 结束。不过正如之前提到的，这最终会使系统崩溃因为我们无限制的创建新线程。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"为有限数量的线程创建一个类似的接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为有限数量的线程创建一个类似的接口","aria-hidden":"true"}},[this._v("#")]),this._v(" 为有限数量的线程创建一个类似的接口")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们期望线程池以类似且熟悉的方式工作，以便从线程切换到线程池并不会对使用该 API 的代码做出较大的修改。示例 20-12 展示我们希望用来替换 "),s("code",[this._v("thread::spawn")]),this._v(" 的 "),s("code",[this._v("ThreadPool")]),this._v(" 结构体的假想接口：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,no_run extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('# use std::thread;\n# use std::io::prelude::*;\n# use std::net::TcpListener;\n# use std::net::TcpStream;\n# struct ThreadPool;\n# impl ThreadPool {\n#    fn new(size: u32) -> ThreadPool { ThreadPool }\n#    fn execute<F>(&self, f: F)\n#        where F: FnOnce() + Send + \'static {}\n# }\n#\nfn main() {\n    let listener = TcpListener::bind("127.0.0.1:7878").unwrap();\n    let pool = ThreadPool::new(4);\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        pool.execute(|| {\n            handle_connection(stream);\n        });\n    }\n}\n# fn handle_connection(mut stream: TcpStream) {}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 20-12: 假想的 "),s("code",[this._v("ThreadPool")]),this._v(" 接口")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这里使用 "),n("code",[t._v("ThreadPool::new")]),t._v(" 来创建一个新的线程池，它有一个可配置的线程数的参数，在这里是四。这样在 "),n("code",[t._v("for")]),t._v(" 循环中，"),n("code",[t._v("pool.execute")]),t._v(" 有着类似 "),n("code",[t._v("thread::spawn")]),t._v(" 的接口，它获取一个线程池运行于每一个流的闭包。"),n("code",[t._v("pool.execute")]),t._v(" 需要实现为获取闭包并传递给池中的线程运行。这段代码还不能编译，不过通过尝试编译器会指导我们如何修复它。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"采用编译器驱动构建-threadpool-结构体"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#采用编译器驱动构建-threadpool-结构体","aria-hidden":"true"}},[this._v("#")]),this._v(" 采用编译器驱动构建 "),s("code",[this._v("ThreadPool")]),this._v(" 结构体")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("继续并对示例 20-12 中的 "),s("em",[this._v("src/main.rs")]),this._v(" 做出修改，并利用来自 "),s("code",[this._v("cargo check")]),this._v(" 的编译器错误来驱动开发。下面是我们得到的第一个错误：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("$ cargo check\n   Compiling hello v0.1.0 (file:///projects/hello)\nerror[E0433]: failed to resolve. Use of undeclared type or module `ThreadPool`\n  --\x3e src\\main.rs:10:16\n   |\n10 |     let pool = ThreadPool::new(4);\n   |                ^^^^^^^^^^^^^^^ Use of undeclared type or module\n   `ThreadPool`\n\nerror: aborting due to previous error\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("好的，这告诉我们需要一个 "),n("code",[t._v("ThreadPool")]),t._v(" 类型或模块，所以我们将构建一个。"),n("code",[t._v("ThreadPool")]),t._v(" 的实现会与 web server 的特定工作相独立，所以让我们从 "),n("code",[t._v("hello")]),t._v(" crate 切换到存放 "),n("code",[t._v("ThreadPool")]),t._v(" 实现的新库 crate。这也意味着可以在任何工作中使用这个单独的线程池库，而不仅仅是处理网络请求。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("创建 "),s("em",[this._v("src/lib.rs")]),this._v(" 文件，它包含了目前可用的最简单的 "),s("code",[this._v("ThreadPool")]),this._v(" 定义：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[this._v("pub")]),this._v(" "),s("span",{attrs:{class:"token keyword"}},[this._v("struct")]),this._v(" ThreadPool"),s("span",{attrs:{class:"token punctuation"}},[this._v(";")]),this._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("接着创建一个新目录，"),n("em",[t._v("src/bin")]),t._v("，并将二进制 crate 根文件从 "),n("em",[t._v("src/main.rs")]),t._v(" 移动到 "),n("em",[t._v("src/bin/main.rs")]),t._v("。这使得库 crate 成为 "),n("em",[t._v("hello")]),t._v(" 目录的主要 crate；不过仍然可以使用 "),n("code",[t._v("cargo run")]),t._v(" 运行 "),n("em",[t._v("src/bin/main.rs")]),t._v(" 二进制文件。移动了 "),n("em",[t._v("main.rs")]),t._v(" 文件之后，修改 "),n("em",[t._v("src/bin/main.rs")]),t._v(" 文件开头加入如下代码来引入库 crate 并将 "),n("code",[t._v("ThreadPool")]),t._v(" 引入作用域：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/bin/main.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("extern crate hello;\nuse hello::ThreadPool;\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("$ cargo check\n   Compiling hello v0.1.0 (file:///projects/hello)\nerror[E0599]: no function or associated item named `new` found for type\n`hello::ThreadPool` in the current scope\n --\x3e src/bin/main.rs:13:16\n   |\n13 |     let pool = ThreadPool::new(4);\n   |                ^^^^^^^^^^^^^^^ function or associated item not found in\n   `hello::ThreadPool`\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("好的，这告诉我们下一步是为 "),n("code",[t._v("ThreadPool")]),t._v(" 创建一个叫做 "),n("code",[t._v("new")]),t._v(" 的关联函数。我们还知道 "),n("code",[t._v("new")]),t._v(" 需要有一个参数可以接受 "),n("code",[t._v("4")]),t._v("，而且 "),n("code",[t._v("new")]),t._v(" 应该返回 "),n("code",[t._v("ThreadPool")]),t._v(" 实例。让我们实现拥有此特征的最小化 "),n("code",[t._v("new")]),t._v(" 函数：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件夹: src/lib.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" ThreadPool"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" usize"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        ThreadPool\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里选择 "),s("code",[this._v("usize")]),this._v(" 作为 "),s("code",[this._v("size")]),this._v(" 参数的类型，因为我们知道为负的线程数没有意义。我们还知道将使用 4 作为线程集合的元素数量，这也就是使用 "),s("code",[this._v("usize")]),this._v(" 类型的原因，如第三章 “整数类型” 部分所讲。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("$ cargo check\n   Compiling hello v0.1.0 (file:///projects/hello)\nwarning: unused variable: `size`\n --\x3e src/lib.rs:4:16\n  |\n4 |     pub fn new(size: usize) -> ThreadPool {\n  |                ^^^^\n  |\n  = note: #[warn(unused_variables)] on by default\n  = note: to avoid this warning, consider using `_size` instead\n\nerror[E0599]: no method named `execute` found for type `hello::ThreadPool` in the current scope\n  --\x3e src/bin/main.rs:18:14\n   |\n18 |         pool.execute(|| {\n   |              ^^^^^^^\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("现在有了一个警告和一个错误。暂时先忽略警告，发生错误是因为并没有 "),n("code",[t._v("ThreadPool")]),t._v(" 上的 "),n("code",[t._v("execute")]),t._v(" 方法。回忆 “为有限数量的线程创建一个类似的接口” 部分我们决定线程池应该有与 "),n("code",[t._v("thread::spawn")]),t._v(" 类似的接口，同时我们将实现 "),n("code",[t._v("execute")]),t._v(" 函数来获取传递的闭包并将其传递给池中的空闲线程执行。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("我们会在 "),n("code",[t._v("ThreadPool")]),t._v(" 上定义 "),n("code",[t._v("execute")]),t._v(" 函数来获取一个闭包参数。回忆第十三章的 “使用带有泛型和 "),n("code",[t._v("Fn")]),t._v(" trait 的闭包” 部分，闭包作为参数时可以使用三个不同的 trait："),n("code",[t._v("Fn")]),t._v("、"),n("code",[t._v("FnMut")]),t._v(" 和 "),n("code",[t._v("FnOnce")]),t._v("。我们需要决定这里应该使用哪种闭包。最终需要实现的类似于标准库的 "),n("code",[t._v("thread::spawn")]),t._v("，所以我们可以观察 "),n("code",[t._v("thread::spawn")]),t._v(" 的签名在其参数中使用了何种 bound。查看文档会发现：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("pub fn spawn<F, T>(f: F) -> JoinHandle<T>\n    where\n        F: FnOnce() -> T + Send + 'static,\n        T: Send + 'static\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("F")]),t._v(" 是这里我们关心的参数；"),n("code",[t._v("T")]),t._v(" 与返回值有关所以我们并不关心。考虑到 "),n("code",[t._v("spawn")]),t._v(" 使用 "),n("code",[t._v("FnOnce")]),t._v(" 作为 "),n("code",[t._v("F")]),t._v(" 的 trait bound，这可能也是我们需要的，因为最终会将传递给 "),n("code",[t._v("execute")]),t._v(" 的参数传给 "),n("code",[t._v("spawn")]),t._v("。因为处理请求的线程只会执行闭包一次，这也进一步确认了 "),n("code",[t._v("FnOnce")]),t._v(" 是我们需要的 trait，这里符合 "),n("code",[t._v("FnOnce")]),t._v(" 中 "),n("code",[t._v("Once")]),t._v(" 的意思。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("F")]),t._v(" 还有 trait bound "),n("code",[t._v("Send")]),t._v(" 和生命周期绑定 "),n("code",[t._v("'static")]),t._v("，这对我们的情况也是有意义的：需要 "),n("code",[t._v("Send")]),t._v(" 来将闭包从一个线程转移到另一个线程，而 "),n("code",[t._v("'static")]),t._v(" 是因为并不知道线程会执行多久。让我们编写一个使用带有这些 bound 的泛型参数 "),n("code",[t._v("F")]),t._v(" 的 "),n("code",[t._v("ThreadPool")]),t._v(" 的 "),n("code",[t._v("execute")]),t._v(" 方法：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" ThreadPool"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" execute"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("F"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" F"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("where")]),t._v("\n            F"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("FnOnce")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" Send "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'static")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("FnOnce")]),this._v(" trait 仍然需要之后的 "),s("code",[this._v("()")]),this._v("，因为这里的 "),s("code",[this._v("FnOnce")]),this._v(" 代表一个没有参数也没有返回值的闭包。正如函数的定义，返回值类型可以从签名中省略，不过即便没有参数也需要括号。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里再一次增加了 "),s("code",[this._v("execute")]),this._v(" 方法的最小化实现，它没有做任何工作。再次进行检查：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("$ cargo check\n   Compiling hello v0.1.0 (file:///projects/hello)\nwarning: unused variable: `size`\n --\x3e src/lib.rs:4:16\n  |\n4 |     pub fn new(size: usize) -> ThreadPool {\n  |                ^^^^\n  |\n  = note: #[warn(unused_variables)] on by default\n  = note: to avoid this warning, consider using `_size` instead\n\nwarning: unused variable: `f`\n --\x3e src/lib.rs:8:30\n  |\n8 |     pub fn execute<F>(&self, f: F)\n  |                              ^\n  |\n  = note: to avoid this warning, consider using `_f` instead\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在就只有警告了！这意味着能够编译了！注意如果尝试 "),s("code",[this._v("cargo run")]),this._v(" 运行程序并在浏览器中发起请求，仍会在浏览器中出现在本章开始时那样的错误。这个库实际上还没有调用传递给 "),s("code",[this._v("execute")]),this._v(" 的闭包！")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("一个你可能听说过的关于像 Haskell 和 Rust 这样有严格编译器的语言的说法是 “如果代码能够编译，它就能工作”。这是一个提醒大家的好时机，实际上这并不是普适的。我们的项目可以编译，不过它完全没有做任何工作！如果构建一个真实且功能完整的项目，则需花费大量的时间来开始编写单元测试来检查代码能否编译 "),s("strong",[this._v("并且")]),this._v(" 拥有期望的行为。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"在-new-中验证池中线程数量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在-new-中验证池中线程数量","aria-hidden":"true"}},[this._v("#")]),this._v(" 在 "),s("code",[this._v("new")]),this._v(" 中验证池中线程数量")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里仍然存在警告是因为其并没有对 "),s("code",[this._v("new")]),this._v(" 和 "),s("code",[this._v("execute")]),this._v(" 的参数做任何操作。让我们用期望的行为来实现这些函数。以考虑 "),s("code",[this._v("new")]),this._v(" 作为开始。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("之前选择使用无符号类型作为 "),n("code",[t._v("size")]),t._v(" 参数的类型，因为线程数为负的线程池没有意义。然而，线程数为零的线程池同样没有意义，不过零是一个完全有效的 "),n("code",[t._v("u32")]),t._v(" 值。让我们增加在返回 "),n("code",[t._v("ThreadPool")]),t._v(" 实例之前检查 "),n("code",[t._v("size")]),t._v(" 是否大于零的代码，并使用 "),n("code",[t._v("assert!")]),t._v(" 宏在得到零时 panic，如示例 20-13 所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在返回 "),s("code",[this._v("ThreadPool")]),this._v(" 之前检查 "),s("code",[this._v("size")]),this._v("  是否大于零，并使用 "),s("code",[this._v("assert!")]),this._v(" 宏在得到零时 panic，如列表 20-13 所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" ThreadPool"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/// Create a new ThreadPool.")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("///")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/// The size is the number of threads in the pool.")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("///")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/// # Panics")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("///")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/// The `new` function will panic if the size is zero.")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" usize"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("assert!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size "),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        ThreadPool\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 20-13: 实现 "),s("code",[this._v("ThreadPool::new")]),this._v(" 在 "),s("code",[this._v("size")]),this._v(" 为零时 panic")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("趁着这个机会我们用文档注释为 "),n("code",[t._v("ThreadPool")]),t._v(" 增加了一些文档。注意这里遵循了良好的文档实践并增加了一个部分来提示函数会 panic 的情况，正如第十四章所讨论的。尝试运行 "),n("code",[t._v("cargo doc --open")]),t._v(" 并点击 "),n("code",[t._v("ThreadPool")]),t._v(" 结构体来查看生成的 "),n("code",[t._v("new")]),t._v(" 的文档看起来如何！")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("相比像这里使用 "),n("code",[t._v("assert!")]),t._v(" 宏，也可以让 "),n("code",[t._v("new")]),t._v(" 像之前 I/O 项目中示例 12-9 中 "),n("code",[t._v("Config::new")]),t._v(" 那样返回一个 "),n("code",[t._v("Result")]),t._v("，不过在这里我们选择创建一个没有任何线程的线程池应该是不可恢复的错误。如果你想做的更好，尝试编写一个采用如下签名的 "),n("code",[t._v("new")]),t._v(" 版本来感受一下两者的区别：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("fn new(size: usize) -> Result<ThreadPool, PoolCreationError> {\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"分配空间以储存线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分配空间以储存线程","aria-hidden":"true"}},[this._v("#")]),this._v(" 分配空间以储存线程")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在有了一个有效的线程池线程数，就可以实际创建这些线程并在返回之前将他们储存在 "),s("code",[this._v("ThreadPool")]),this._v(" 结构体中。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这引出了另一个问题：如何 “储存” 一个线程？让我们再看看 "),s("code",[this._v("thread::spawn")]),this._v(" 的签名：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("pub fn spawn<F, T>(f: F) -> JoinHandle<T>\n    where\n        F: FnOnce() -> T + Send + 'static,\n        T: Send + 'static\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("spawn")]),t._v(" 返回 "),n("code",[t._v("JoinHandle<T>")]),t._v("，其中 "),n("code",[t._v("T")]),t._v(" 是闭包返回的类型。尝试使用 "),n("code",[t._v("JoinHandle")]),t._v(" 来看看会发生什么。在我们的情况中，传递给线程池的闭包会处理连接并不返回任何值，所以 "),n("code",[t._v("T")]),t._v(" 将会是单元类型 "),n("code",[t._v("()")]),t._v("。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("示例 20-14 中的代码可以编译，不过实际上还并没有创建任何线程。我们改变了 "),n("code",[t._v("ThreadPool")]),t._v(" 的定义来存放一个 "),n("code",[t._v("thread::JoinHandle<()>")]),t._v(" 的 vector 实例，使用 "),n("code",[t._v("size")]),t._v(" 容量来初始化，并设置一个 "),n("code",[t._v("for")]),t._v(" 循环了来运行创建线程的代码，并返回包含这些线程的 "),n("code",[t._v("ThreadPool")]),t._v(" 实例：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("use std::thread;\n\npub struct ThreadPool {\n    threads: Vec<thread::JoinHandle<()>>,\n}\n\nimpl ThreadPool {\n    // --snip--\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let mut threads = Vec::with_capacity(size);\n\n        for _ in 0..size {\n            // create some threads and store them in the vector\n        }\n\n        ThreadPool {\n            threads\n        }\n    }\n\n    // --snip--\n}\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 20-14: 为 "),s("code",[this._v("ThreadPool")]),this._v(" 创建一个 vector 来存放线程")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里将 "),s("code",[this._v("std::thread")]),this._v(" 引入库 crate 的作用域，因为使用了 "),s("code",[this._v("thread::JoinHandle")]),this._v(" 作为 "),s("code",[this._v("ThreadPool")]),this._v(" 中 vector 元素的类型。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("在得到了有效的数量之后，"),n("code",[t._v("ThreadPool")]),t._v(" 新建一个存放 "),n("code",[t._v("size")]),t._v(" 个元素的 vector。本书还未使用过 "),n("code",[t._v("with_capacity")]),t._v("，它与 "),n("code",[t._v("Vec::new")]),t._v(" 做了同样的工作，不过有一个重要的区别：它为 vector 预先分配空间。因为已经知道了 vector 中需要 "),n("code",[t._v("size")]),t._v(" 个元素，预先进行分配比仅仅 "),n("code",[t._v("Vec::new")]),t._v(" 要稍微有效率一些，因为 "),n("code",[t._v("Vec::new")]),t._v(" 随着插入元素而重新改变大小。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果再次运行 "),s("code",[this._v("cargo check")]),this._v("，会看到一些警告，不过应该可以编译成功。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"worker-结构体负责从-threadpool-中将代码传递给线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#worker-结构体负责从-threadpool-中将代码传递给线程","aria-hidden":"true"}},[this._v("#")]),this._v(" "),s("code",[this._v("Worker")]),this._v(" 结构体负责从 "),s("code",[this._v("ThreadPool")]),this._v(" 中将代码传递给线程")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("示例 20-14 的 "),s("code",[this._v("for")]),this._v(" 循环中留下了一个关于创建线程的注释。如何实际创建线程呢？这是一个难题。标准库提供的创建线程的方法，"),s("code",[this._v("thread::spawn")]),this._v("，它期望获取一些一旦创建线程就应该执行的代码。然而，我们希望开始线程并使其等待稍后传递的代码。标准库的线程实现并没有包含这么做的方法；我们必须自己实现。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们将要实现的行为是创建线程并稍后发送代码，这会在 "),s("code",[this._v("ThreadPool")]),this._v(" 和线程间引入一个新数据类型来管理这种新行为。这个数据结构称为 "),s("code",[this._v("Worker")]),this._v("：这是一个池实现中的常见概念。想象一下在餐馆厨房工作的员工：员工等待来自客户的订单，他们负责接受这些订单并完成它们。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("不同于在线程池中储存一个 "),n("code",[t._v("JoinHandle<()>")]),t._v(" 实例的 vector，我们会储存 "),n("code",[t._v("Worker")]),t._v(" 结构体的实例。每一个 "),n("code",[t._v("Worker")]),t._v(" 会储存一个单独的 "),n("code",[t._v("JoinHandle<()>")]),t._v(" 实例。接着会在\n"),n("code",[t._v("Worker")]),t._v(" 上实现一个方法，它会获取需要允许代码的闭包并将其发送给已经运行的线程执行。我们还会赋予每一个 worker "),n("code",[t._v("id")]),t._v("，这样就可以在日志和调试中区别线程池中的不同 worker。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("首先，让我们做出如此创建 "),s("code",[this._v("ThreadPool")]),this._v(" 时所需的修改。在通过如下方式设置完 "),s("code",[this._v("Worker")]),this._v(" 之后，我们会实现向线程发送闭包的代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ol",[n("li",[t._v("定义 "),n("code",[t._v("Worker")]),t._v(" 结构体存放 "),n("code",[t._v("id")]),t._v(" 和 "),n("code",[t._v("JoinHandle<()>")])]),t._v(" "),n("li",[t._v("修改 "),n("code",[t._v("ThreadPool")]),t._v(" 存放一个 "),n("code",[t._v("Worker")]),t._v(" 实例的 vector")]),t._v(" "),n("li",[t._v("定义 "),n("code",[t._v("Worker::new")]),t._v(" 函数，它获取一个 "),n("code",[t._v("id")]),t._v(" 数字并返回一个带有 "),n("code",[t._v("id")]),t._v(" 和用空闭包分配的线程的 "),n("code",[t._v("Worker")]),t._v(" 实例")]),t._v(" "),n("li",[t._v("在 "),n("code",[t._v("ThreadPool::new")]),t._v(" 中，使用 "),n("code",[t._v("for")]),t._v(" 循环计数生成 "),n("code",[t._v("id")]),t._v("，使用这个 "),n("code",[t._v("id")]),t._v(" 新建 "),n("code",[t._v("Worker")]),t._v("，并储存进 vector 中")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    workers"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Vec"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Worker"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" usize"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("assert!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size "),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" workers "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Vec"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("with_capacity")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" id "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v("size "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            workers"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("push")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Worker"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            workers\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    id"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" usize"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("JoinHandle"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" usize"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" thread "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("spawn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token closure-params"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("|")]),n("span",{attrs:{class:"token punctuation"}},[t._v("|")])]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            id"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 20-15: 修改 "),s("code",[this._v("ThreadPool")]),this._v(" 存放 "),s("code",[this._v("Worker")]),this._v(" 实例而不是直接存放线程")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这里将 "),n("code",[t._v("ThreadPool")]),t._v(" 中字段名从 "),n("code",[t._v("threads")]),t._v(" 改为 "),n("code",[t._v("workers")]),t._v("，因为它现在储存 "),n("code",[t._v("Worker")]),t._v(" 而不是 "),n("code",[t._v("JoinHandle<()>")]),t._v("。使用 "),n("code",[t._v("for")]),t._v(" 循环中的计数作为 "),n("code",[t._v("Worker::new")]),t._v(" 的参数，并将每一个新建的 "),n("code",[t._v("Worker")]),t._v(" 储存在叫做 "),n("code",[t._v("workers")]),t._v(" 的 vector 中。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("Worker")]),t._v(" 结构体和其 "),n("code",[t._v("new")]),t._v(" 函数是私有的，因为外部代码（比如 "),n("em",[t._v("src/bin/main.rs")]),t._v(" 中的 server）并不需要知道关于 "),n("code",[t._v("ThreadPool")]),t._v(" 中使用 "),n("code",[t._v("Worker")]),t._v(" 结构体的实现细节。"),n("code",[t._v("Worker::new")]),t._v(" 函数使用 "),n("code",[t._v("id")]),t._v(" 参数并储存了使用一个空闭包创建的 "),n("code",[t._v("JoinHandle<()>")]),t._v("。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这段代码能够编译并用指定给 "),n("code",[t._v("ThreadPool::new")]),t._v(" 的参数创建储存了一系列的 "),n("code",[t._v("Worker")]),t._v(" 实例，不过 "),n("strong",[t._v("仍然")]),t._v(" 没有处理 "),n("code",[t._v("execute")]),t._v(" 中得到的闭包。让我们聊聊接下来怎么做。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"使用通道向线程发送请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用通道向线程发送请求","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用通道向线程发送请求")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("下一个需要解决的问题是传递给 "),n("code",[t._v("thread::spawn")]),t._v(" 的闭包完全没有做任何工作。目前，我们在 "),n("code",[t._v("execute")]),t._v(" 方法中获得期望执行的闭包，不过在创建 "),n("code",[t._v("ThreadPool")]),t._v(" 的过程中创建每一个 "),n("code",[t._v("Worker")]),t._v(" 时需要向 "),n("code",[t._v("thread::spawn")]),t._v(" 传递一个闭包。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们希望刚创建的 "),s("code",[this._v("Worker")]),this._v(" 结构体能够从 "),s("code",[this._v("ThreadPool")]),this._v(" 的队列中获取需要执行的代码，并发送到线程中执行他们。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("在第十六章，我们学习了 "),n("strong",[t._v("通道")]),t._v(" —— 一个沟通两个线程的简单手段 —— 对于这个例子来说则是绝佳的。这里通道将充当任务队列的作用，"),n("code",[t._v("execute")]),t._v(" 将通过 "),n("code",[t._v("ThreadPool")]),t._v(" 向其中线程正在寻找工作的 "),n("code",[t._v("Worker")]),t._v(" 实例发送任务。如下是这个计划：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ol",[n("li",[n("code",[t._v("ThreadPool")]),t._v(" 会创建一个通道并充当发送端。")]),t._v(" "),n("li",[t._v("每个 "),n("code",[t._v("Worker")]),t._v(" 将会充当通道的接收端。")]),t._v(" "),n("li",[t._v("新建一个 "),n("code",[t._v("Job")]),t._v(" 结构体来存放用于向通道中发送的闭包。")]),t._v(" "),n("li",[n("code",[t._v("execute")]),t._v(" 方法会在通道发送端发出期望执行的任务。")]),t._v(" "),n("li",[t._v("在线程中，"),n("code",[t._v("Worker")]),t._v(" 会遍历通道的接收端并执行任何接收到的任务。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("让我们以在 "),s("code",[this._v("ThreadPool::new")]),this._v(" 中创建通道并让 "),s("code",[this._v("ThreadPool")]),this._v(" 实例充当发送端开始，如示例 20-16 所示。"),s("code",[this._v("Job")]),this._v(" 是将在通道中发出的类型；目前它是一个没有任何内容的结构体：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("sync"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("mpsc"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    workers"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Vec"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Worker"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    sender"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mpsc"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Sender"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Job"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Job"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" usize"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("assert!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size "),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sender"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" receiver"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" mpsc"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("channel")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" workers "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Vec"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("with_capacity")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" id "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v("size "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            workers"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("push")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Worker"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            workers"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            sender"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     id"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" usize"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("JoinHandle"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" usize"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#         "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" thread "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("spawn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token closure-params"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("|")]),n("span",{attrs:{class:"token punctuation"}},[t._v("|")])]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n#         Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#             id"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#             thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#         "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#     "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 20-16: 修改 "),s("code",[this._v("ThreadPool")]),this._v(" 来储存一个发送 "),s("code",[this._v("Job")]),this._v(" 实例的通道发送端")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 "),s("code",[this._v("ThreadPool::new")]),this._v(" 中，新建了一个通道，并接着让线程池在接收端等待。这段代码能够编译，不过仍有警告。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("让我们尝试在线程池创建每个 worker 时将通道的接收端传递给他们。须知我们希望在 worker 所分配的线程中使用通道的接收端，所以将在闭包中引用 "),s("code",[this._v("receiver")]),this._v(" 参数。示例 20-17 中展示的代码还不能编译：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("impl ThreadPool {\n    // --snip--\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let (sender, receiver) = mpsc::channel();\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id, receiver));\n        }\n\n        ThreadPool {\n            workers,\n            sender,\n        }\n    }\n    // --snip--\n}\n\n// --snip--\n\nimpl Worker {\n    fn new(id: usize, receiver: mpsc::Receiver<Job>) -> Worker {\n        let thread = thread::spawn(|| {\n            receiver;\n        });\n\n        Worker {\n            id,\n            thread,\n        }\n    }\n}\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 20-17: 将通道的接收端传递给 worker")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这是一些小而直观的修改：将通道的接收端传递进了 "),s("code",[this._v("Worker::new")]),this._v("，并接着在闭包中使用它。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("$ cargo check\n   Compiling hello v0.1.0 (file:///projects/hello)\nerror[E0382]: use of moved value: `receiver`\n  --\x3e src/lib.rs:27:42\n   |\n27 |             workers.push(Worker::new(id, receiver));\n   |                                          ^^^^^^^^ value moved here in\n   previous iteration of loop\n   |\n   = note: move occurs because `receiver` has type\n   `std::sync::mpsc::Receiver<Job>`, which does not implement the `Copy` trait\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这段代码尝试将 "),n("code",[t._v("receiver")]),t._v(" 传递给多个 "),n("code",[t._v("Worker")]),t._v(" 实例。这是不行的，回忆第十六章：Rust 所提供的通道实现是多 "),n("strong",[t._v("生产者")]),t._v("，单 "),n("strong",[t._v("消费者")]),t._v(" 的。这意味着不能简单的克隆通道的消费端来解决问题。即便可以，那也不是我们希望使用的技术；我们希望通过在所有的 worker 中共享单一 "),n("code",[t._v("receiver")]),t._v("，在线程间分发任务。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("另外，从通道队列中取出任务涉及到修改 "),s("code",[this._v("receiver")]),this._v("，所以这些线程需要一个能安全的共享和修改 "),s("code",[this._v("receiver")]),this._v(" 的方式，否则可能导致竞争状态（参考第十六章）。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("回忆一下第十六章讨论的线程安全智能指针，为了在多个线程间共享所有权并允许线程修改其值，需要使用 "),s("code",[this._v("Arc<Mutex<T>>")]),this._v("。"),s("code",[this._v("Arc")]),this._v(" 使得多个 worker 拥有接收端，而 "),s("code",[this._v("Mutex")]),this._v(" 则确保一次只有一个 worker 能从接收端得到任务。示例 20-18 展示了所需的修改：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("sync"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("mpsc"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("sync"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Arc"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("sync"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Mutex"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     workers"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Vec"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Worker"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     sender"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mpsc"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Sender"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Job"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Job"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n"),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" usize"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("assert!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size "),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sender"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" receiver"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" mpsc"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("channel")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" receiver "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Arc"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Mutex"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("receiver"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" workers "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Vec"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("with_capacity")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" id "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v("size "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            workers"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("push")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Worker"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Arc"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("clone")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("receiver"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            workers"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            sender"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     id"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" usize"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("JoinHandle"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" usize"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" receiver"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Arc"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Mutex"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("mpsc"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Receiver"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Job"),n("span",{attrs:{class:"token operator"}},[t._v(">>")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n#         "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" thread "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("spawn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token closure-params"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("|")]),n("span",{attrs:{class:"token punctuation"}},[t._v("|")])]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#            receiver"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#         "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n#         Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#             id"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#             thread"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#         "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 20-18: 使用 "),s("code",[this._v("Arc")]),this._v(" 和 "),s("code",[this._v("Mutex")]),this._v(" 在 worker 间共享通道的接收端")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("在 "),n("code",[t._v("ThreadPool::new")]),t._v(" 中，将通道的接收端放入一个 "),n("code",[t._v("Arc")]),t._v(" 和一个 "),n("code",[t._v("Mutex")]),t._v(" 中。对于每一个新 worker，克隆 "),n("code",[t._v("Arc")]),t._v(" 来增加引用计数，如此这些 worker 就可以共享接收端的所有权了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"实现-execute-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现-execute-方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现 "),s("code",[this._v("execute")]),this._v(" 方法")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("最后让我们实现 "),n("code",[t._v("ThreadPool")]),t._v(" 上的 "),n("code",[t._v("execute")]),t._v(" 方法。同时也要修改 "),n("code",[t._v("Job")]),t._v(" 结构体：它将不再是结构体，"),n("code",[t._v("Job")]),t._v(" 将是一个有着 "),n("code",[t._v("execute")]),t._v(" 接收到的闭包类型的 trait 对象的类型别名。第十九章 “类型别名用来创建类型同义词” 部分提到过，类型别名允许将长的类型变短。观察示例 20-19：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     workers"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Vec"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Worker"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     sender"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mpsc"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Sender"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Job"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("sync"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("mpsc"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Worker "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Job "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Box"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),n("span",{attrs:{class:"token function"}},[t._v("FnOnce")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" Send "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'static")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" ThreadPool "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" execute"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("F"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" F"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("where")]),t._v("\n            F"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("FnOnce")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" Send "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token lifetime-annotation symbol"}},[t._v("'static")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" job "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Box"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sender"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("send")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("job"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// --snip--")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 20-19: 为存放每一个闭包的 "),s("code",[this._v("Box")]),this._v(" 创建一个 "),s("code",[this._v("Job")]),this._v(" 类型别名，接着在通道中发出任务")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("在使用 "),n("code",[t._v("execute")]),t._v(" 得到的闭包新建 "),n("code",[t._v("Job")]),t._v(" 实例之后，将这些任务从通道的发送端发出。这里调用 "),n("code",[t._v("send")]),t._v(" 上的 "),n("code",[t._v("unwrap")]),t._v("，因为发送可能会失败，这可能发生于例如停止了所有线程执行的情况，这意味着接收端停止接收新消息了。不过目前我们无法停止线程执行；只要线程池存在他们就会一直执行。使用 "),n("code",[t._v("unwrap")]),t._v(" 是因为我们知道失败不可能发生，即便编译器不这么认为。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("不过到此事情还没有结束！在 worker 中，传递给 "),s("code",[this._v("thread::spawn")]),this._v(" 的闭包仍然还只是 "),s("strong",[this._v("引用")]),this._v(" 了通道的接收端。相反我们需要闭包一直循环，向通道的接收端请求任务，并在得到任务时执行他们。如示例 20-20 对 "),s("code",[this._v("Worker::new")]),this._v(" 做出修改：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('// --snip--\n\nimpl Worker {\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n        let thread = thread::spawn(move || {\n            loop {\n                let job = receiver.lock().unwrap().recv().unwrap();\n\n                println!("Worker {} got a job; executing.", id);\n\n                (*job)();\n            }\n        });\n\n        Worker {\n            id,\n            thread,\n        }\n    }\n}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 20-20: 在 worker 线程中接收并执行任务")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这里，首先在 "),n("code",[t._v("receiver")]),t._v(" 上调用了 "),n("code",[t._v("lock")]),t._v(" 来获取互斥器，接着 "),n("code",[t._v("unwrap")]),t._v(" 在出现任何错误时 panic。如果互斥器处于一种叫做 "),n("strong",[t._v("被污染")]),t._v("（"),n("em",[t._v("poisoned")]),t._v("）的状态时获取锁可能会失败，这可能发生于其他线程在持有锁时 panic 了且没有释放锁。在这种情况下，调用 "),n("code",[t._v("unwrap")]),t._v(" 使其 panic 是正确的行为。请随意将 "),n("code",[t._v("unwrap")]),t._v(" 改为包含有意义错误信息的 "),n("code",[t._v("expect")]),t._v("。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("如果锁定了互斥器，接着调用 "),n("code",[t._v("recv")]),t._v(" 从通道中接收 "),n("code",[t._v("Job")]),t._v("。最后的 "),n("code",[t._v("unwrap")]),t._v(" 也绕过了一些错误，这可能发生于持有通道发送端的线程停止的情况，类似于如果接收端关闭时 "),n("code",[t._v("send")]),t._v(" 方法如何返回 "),n("code",[t._v("Err")]),t._v(" 一样。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("调用 "),n("code",[t._v("recv")]),t._v(" 会 "),n("strong",[t._v("阻塞")]),t._v(" 当前线程，所以如果还没有任务，其会等待直到有可用的任务。"),n("code",[t._v("Mutex<T>")]),t._v(" 确保一次只有一个 "),n("code",[t._v("Worker")]),t._v(" 线程尝试请求任务。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("error[E0161]: cannot move a value of type std::ops::FnOnce() +\nstd::marker::Send: the size of std::ops::FnOnce() + std::marker::Send cannot be\nstatically determined\n  --\x3e src/lib.rs:63:17\n   |\n63 |                 (*job)();\n   |                 ^^^^^^\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这个错误非常的神秘，因为这个问题本身就很神秘。为了调用储存在 "),n("code",[t._v("Box<T>")]),t._v(" （这正是 "),n("code",[t._v("Job")]),t._v(" 别名的类型）中的 "),n("code",[t._v("FnOnce")]),t._v(" 闭包，该闭包需要能将自己移动 "),n("strong",[t._v("出")]),t._v(" "),n("code",[t._v("Box<T>")]),t._v("，因为当调用这个闭包时，它获取 "),n("code",[t._v("self")]),t._v(" 的所有权。通常来说，将值移动出 "),n("code",[t._v("Box<T>")]),t._v(" 是不被允许的，因为 Rust 不知道 "),n("code",[t._v("Box<T>")]),t._v(" 中的值将会有多大；回忆第十五章能够正常使用 "),n("code",[t._v("Box<T>")]),t._v(" 是因为我们将未知大小的值储存进 "),n("code",[t._v("Box<T>")]),t._v(" 从而得到已知大小的值。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("第十七章曾见过，示例 17-15 中有使用了 "),n("code",[t._v("self: Box<Self>")]),t._v(" 语法的方法，它允许方法获取储存在 "),n("code",[t._v("Box<T>")]),t._v(" 中的 "),n("code",[t._v("Self")]),t._v(" 值的所有权。这正是我们希望做的，然而不幸的是 Rust 不允许我们这么做：Rust 当闭包被调用时行为的那部分并没有使用 "),n("code",[t._v("self: Box<Self>")]),t._v(" 实现。所以这里 Rust 也不知道它可以使用 "),n("code",[t._v("self: Box<Self>")]),t._v(" 来获取闭包的所有权并将闭包移动出 "),n("code",[t._v("Box<T>")]),t._v("。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("不过目前让我们通过一个小技巧来绕过这个问题。可以显式的告诉 Rust 在这里我们可以使用 "),n("code",[t._v("self: Box<Self>")]),t._v(" 来获取 "),n("code",[t._v("Box<T>")]),t._v(" 中值的所有权，而一旦获取了闭包的所有权就可以调用它了。这涉及到定义一个新 trait，它带有一个在签名中使用 "),n("code",[t._v("self: Box<Self>")]),t._v(" 的方法 "),n("code",[t._v("call_box")]),t._v("，为任何实现了 "),n("code",[t._v("FnOnce()")]),t._v(" 的类型定义这个 trait，修改类型别名来使用这个新 trait，并修改 "),n("code",[t._v("Worker")]),t._v(" 使用 "),n("code",[t._v("call_box")]),t._v(" 方法。这些修改如示例 20-21 所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('trait FnBox {\n    fn call_box(self: Box<Self>);\n}\n\nimpl<F: FnOnce()> FnBox for F {\n    fn call_box(self: Box<F>) {\n        (*self)()\n    }\n}\n\ntype Job = Box<FnBox + Send + \'static>;\n\n// --snip--\n\nimpl Worker {\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n        let thread = thread::spawn(move || {\n            loop {\n                let job = receiver.lock().unwrap().recv().unwrap();\n\n                println!("Worker {} got a job; executing.", id);\n\n                job.call_box();\n            }\n        });\n\n        Worker {\n            id,\n            thread,\n        }\n    }\n}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 20-21: 新增一个 trait "),s("code",[this._v("FnBox")]),this._v(" 来绕过当前 "),s("code",[this._v("Box<FnOnce()>")]),this._v(" 的限制")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("首先，新建了一个叫做 "),n("code",[t._v("FnBox")]),t._v(" 的 trait。这个 trait 有一个方法 "),n("code",[t._v("call_box")]),t._v("，它类似于其他 "),n("code",[t._v("Fn*")]),t._v(" trait 中的 "),n("code",[t._v("call")]),t._v(" 方法，除了它获取 "),n("code",[t._v("self: Box<Self>")]),t._v(" 以便获取 "),n("code",[t._v("self")]),t._v(" 的所有权并将值从 "),n("code",[t._v("Box<T>")]),t._v(" 中移动出来。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("接下来，为任何实现了 "),n("code",[t._v("FnOnce()")]),t._v(" trait 的类型 "),n("code",[t._v("F")]),t._v(" 实现 "),n("code",[t._v("FnBox")]),t._v(" trait。这实际上意味着任何 "),n("code",[t._v("FnOnce()")]),t._v(" 闭包都可以使用 "),n("code",[t._v("call_box")]),t._v(" 方法。"),n("code",[t._v("call_box")]),t._v(" 的实现使用 "),n("code",[t._v("(*self)()")]),t._v(" 将闭包移动出 "),n("code",[t._v("Box<T>")]),t._v(" 并调用此闭包。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("现在我们需要 "),n("code",[t._v("Job")]),t._v(" 类型别名是任何实现了新 trait "),n("code",[t._v("FnBox")]),t._v(" 的 "),n("code",[t._v("Box")]),t._v("。这允许我们在得到 "),n("code",[t._v("Job")]),t._v(" 值时使用 "),n("code",[t._v("Worker")]),t._v(" 中的 "),n("code",[t._v("call_box")]),t._v("。为任何 "),n("code",[t._v("FnOnce()")]),t._v(" 闭包都实现了 "),n("code",[t._v("FnBox")]),t._v(" trait 意味着无需对实际在通道中发出的值做任何修改。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后，对于 "),s("code",[this._v("Worker::new")]),this._v(" 的线程中所运行的闭包，调用 "),s("code",[this._v("call_box")]),this._v(" 而不是直接执行闭包。现在 Rust 就能够理解我们的行为是正确的了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("通过这个技巧，线程池处于可以运行的状态了！执行 "),s("code",[this._v("cargo run")]),this._v(" 并发起一些请求：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("$ cargo run\n   Compiling hello v0.1.0 (file:///projects/hello)\nwarning: field is never used: `workers`\n --\x3e src/lib.rs:7:5\n  |\n7 |     workers: Vec<Worker>,\n  |     ^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: #[warn(dead_code)] on by default\n\nwarning: field is never used: `id`\n  --\x3e src/lib.rs:61:5\n   |\n61 |     id: usize,\n   |     ^^^^^^^^^\n   |\n   = note: #[warn(dead_code)] on by default\n\nwarning: field is never used: `thread`\n  --\x3e src/lib.rs:62:5\n   |\n62 |     thread: thread::JoinHandle<()>,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: #[warn(dead_code)] on by default\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.99 secs\n     Running `target/debug/hello`\n     Worker 0 got a job; executing.\nWorker 2 got a job; executing.\nWorker 1 got a job; executing.\nWorker 3 got a job; executing.\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\nWorker 1 got a job; executing.\nWorker 3 got a job; executing.\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("成功了！现在我们有了一个可以异步执行连接的线程池！它绝不会创建超过四个线程，所以当 server 收到大量请求时系统也不会负担过重。如果请求 "),s("code",[this._v("/sleep")]),this._v("，server 也能够通过另外一个线程处理其他请求。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在学习了第十八章的 "),s("code",[this._v("while let")]),this._v(" 循环之后，你可能会好奇为何不能如此编写 worker 线程：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('// --snip--\n\nimpl Worker {\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n        let thread = thread::spawn(move || {\n            while let Ok(job) = receiver.lock().unwrap().recv() {\n                println!("Worker {} got a job; executing.", id);\n\n                job.call_box();\n            }\n        });\n\n        Worker {\n            id,\n            thread,\n        }\n    }\n}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 20-22: 一个使用 "),s("code",[this._v("while let")]),this._v(" 的 "),s("code",[this._v("Worker::new")]),this._v(" 替代实现")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这段代码可以编译和运行，但是并不会产生所期望的线程行为：一个慢请求仍然会导致其他请求等待执行。如此的原因有些微妙："),n("code",[t._v("Mutex")]),t._v(" 结构体没有公有 "),n("code",[t._v("unlock")]),t._v(" 方法，因为锁的所有权依赖 "),n("code",[t._v("lock")]),t._v(" 方法返回的 "),n("code",[t._v("LockResult<MutexGuard<T>>")]),t._v(" 中 "),n("code",[t._v("MutexGuard<T>")]),t._v(" 的生命周期。这允许借用检查器在编译时确保绝不会在没有持有锁的情况下访问由 "),n("code",[t._v("Mutex")]),t._v(" 守护的资源，不过如果没有认真的思考 "),n("code",[t._v("MutexGuard<T>")]),t._v(" 的生命周期的话，也可能会导致比预期更久的持有锁。因为 "),n("code",[t._v("while")]),t._v(" 表达式中的值在整个块一直处于作用域中，"),n("code",[t._v("job.call_box()")]),t._v(" 调用的过程中其仍然持有锁，这意味着其他 worker 不能接收任务。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("相反通过使用 "),n("code",[t._v("loop")]),t._v(" 并在循环块之内而不是之外获取锁和任务，"),n("code",[t._v("lock")]),t._v(" 方法返回的 "),n("code",[t._v("MutexGuard")]),t._v(" 在 "),n("code",[t._v("let job")]),t._v(" 语句结束之后立刻就被丢弃了。这确保了 "),n("code",[t._v("recv")]),t._v(" 调用过程中持有锁，而在 "),n("code",[t._v("job.call_box()")]),t._v(" 调用前锁就被释放了，这就允许并发处理多个请求了。")])}],!1,null,null,null);e.options.__file="ch20-02-multithreaded.md";s.default=e.exports}}]);