(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{226:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch08-01-vectors.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch08-01-vectors.md"),a("OutboundLink")],1),t._v(" "),a("br"),t._v("\ncommit a86c1d315789b3ca13b20d50ad5005c62bdd9e37")])]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._m(19),t._v(" "),a("p",[t._v("当 vector 被丢弃时，所有其内容也会被丢弃，这意味着这里它包含的整数将被清理。这可能看起来非常直观，不过一旦开始使用 vector 元素的引用，情况就变得有些复杂了。下面让我们处理这种情况！")]),t._v(" "),t._m(20),t._v(" "),a("p",[t._v("现在你知道如何创建、更新和销毁 vector 了，接下来的一步最好了解一下如何读取它们的内容。有两种方法引用 vector 中储存的值。为了更加清楚的说明这个例子，我们标注这些函数返回的值的类型。")]),t._v(" "),t._m(21),t._v(" "),t._m(22),t._m(23),t._v(" "),t._m(24),t._v(" "),a("p",[t._v("Rust 有两个引用元素的方法的原因是程序可以选择如何处理当索引值在 vector 中没有对应值的情况。作为一个例子，让我们看看如果有一个有五个元素的 vector 接着尝试访问索引为 100 的元素时程序会如何处理，如示例 8-6 所示：")]),t._v(" "),t._m(25),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),a("p",[t._v("一旦程序获取了一个有效的引用，借用检查器将会执行所有权和借用规则（第四章讲到）来确保 vector 内容的这个引用和任何其他引用保持有效。回忆一下不能在相同作用域中同时存在可变和不可变引用的规则。这个规则适用于示例 8-7，当我们获取了 vector 的第一个元素的不可变引用并尝试在 vector 末尾增加一个元素的时候，这是行不通的：")]),t._v(" "),t._m(29),t._m(30),t._v(" "),a("p",[t._v("编译会给出这个错误：")]),t._v(" "),t._m(31),a("p",[t._v("示例 8-7 中的代码看起来应该能够运行：为什么第一个元素的引用会关心 vector 结尾的变化？不能这么做的原因是由于 vector 的工作方式：在 vector 的结尾增加新元素时，在没有足够空间将所有所有元素依次相邻存放的情况下，可能会要求分配新内存并将老的元素拷贝到新的空间中。这时，第一个元素的引用就指向了被释放的内存。借用规则阻止程序陷入这种状况。")]),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35),t._m(36),t._v(" "),t._m(37),t._v(" "),t._m(38),t._m(39),t._v(" "),t._m(40),t._v(" "),t._m(41),t._v(" "),a("p",[t._v("在本章的开始，我们提到 vector 只能储存相同类型的值。这是很不方便的；绝对会有需要储存一系列不同类型的值的用例。幸运的是，枚举的成员都被定义为相同的枚举类型，所以当需要在 vector 中储存不同类型值时，我们可以定义并使用一个枚举！")]),t._v(" "),a("p",[t._v("例如，假如我们想要从电子表格的一行中获取值，而这一行的有些列包含数字，有些包含浮点值，还有些是字符串。我们可以定义一个枚举，其成员会存放这些不同类型的值，同时所有这些枚举成员都会被当作相同类型，那个枚举的类型。接着可以创建一个储存枚举值的 vector，这样最终就能够储存不同类型的值了。示例 8-10 展示了其用例：")]),t._v(" "),t._m(42),t._m(43),t._v(" "),t._m(44),t._v(" "),a("p",[t._v("如果在编写程序时不能确切无遗地知道运行时会储存进 vector 的所有类型，枚举技术就行不通了。相反，你可以使用 trait 对象，第十七章会讲到它。")]),t._v(" "),t._m(45)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"vector-用来储存一系列的值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vector-用来储存一系列的值","aria-hidden":"true"}},[this._v("#")]),this._v(" vector 用来储存一系列的值")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们要讲到的第一个类型是 "),s("code",[this._v("Vec<T>")]),this._v("，也被称为 "),s("em",[this._v("vector")]),this._v("。vector 允许我们在一个单独的数据结构中储存多于一个的值，它在内存中彼此相邻地排列所有的值。vector 只能储存相同类型的值。它们在拥有一系列项的场景下非常实用，例如文件中的文本行或是购物车中商品的价格。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"新建-vector"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#新建-vector","aria-hidden":"true"}},[this._v("#")]),this._v(" 新建 vector")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("为了创建一个新的空 vector，可以调用 "),s("code",[this._v("Vec::new")]),this._v(" 函数，如示例 8-1 所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" v"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Vec"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("i32"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Vec"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("new")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 8-1：新建一个空的 vector 来储存 "),s("code",[this._v("i32")]),this._v(" 类型的值")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("注意这里我们增加了一个类型注解。因为没有向这个 vector 中插入任何值，Rust 并不知道我们想要储存什么类型的元素。这是一个非常重要的点。vector 是用泛型实现的，第十章会涉及到如何对你自己的类型使用它们。现在，所有你需要知道的就是 "),a("code",[t._v("Vec")]),t._v(" 是一个由标准库提供的类型，它可以存放任何类型，而当 "),a("code",[t._v("Vec")]),t._v(" 存放某个特定类型时，那个类型位于尖括号中。在示例 8-1 中，我们告诉 Rust "),a("code",[t._v("v")]),t._v(" 这个 "),a("code",[t._v("Vec")]),t._v(" 将存放 "),a("code",[t._v("i32")]),t._v(" 类型的元素。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在更实际的代码中，一旦插入值 Rust 就可以推断出想要存放的类型，所以你很少会需要这些类型注解。更常见的做法是使用初始值来创建一个 "),a("code",[t._v("Vec")]),t._v("，而且为了方便 Rust 提供了 "),a("code",[t._v("vec!")]),t._v(" 宏。这个宏会根据我们提供的值来创建一个新的 "),a("code",[t._v("Vec")]),t._v("。示例 8-2 新建一个拥有值 "),a("code",[t._v("1")]),t._v("、"),a("code",[t._v("2")]),t._v(" 和 "),a("code",[t._v("3")]),t._v(" 的 "),a("code",[t._v("Vec<i32>")]),t._v("：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" v "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("vec!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 8-2：新建一个包含初值的 vector")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("因为我们提供了 "),s("code",[this._v("i32")]),this._v(" 类型的初始值，Rust 可以推断出 "),s("code",[this._v("v")]),this._v(" 的类型是 "),s("code",[this._v("Vec<i32>")]),this._v("，因此类型注解就不是必须的。接下来让我们看看如何修改一个 vector。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"更新-vector"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新-vector","aria-hidden":"true"}},[this._v("#")]),this._v(" 更新 vector")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("对于新建一个 vector 并向其增加元素，可以使用 "),s("code",[this._v("push")]),this._v(" 方法，如示例 8-3 所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" v "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Vec"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("new")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nv"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nv"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("6")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nv"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("7")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nv"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("8")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 8-3：使用 "),s("code",[this._v("push")]),this._v(" 方法向 vector 增加值")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如第三章中讨论的任何变量一样，如果想要能够改变它的值，必须使用 "),s("code",[this._v("mut")]),this._v(" 关键字使其可变。放入其中的所有值都是 "),s("code",[this._v("i32")]),this._v(" 类型的，而且 Rust 也根据数据做出如此判断，所以不需要 "),s("code",[this._v("Vec<i32>")]),this._v(" 注解。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"丢弃-vector-时也会丢弃其所有元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#丢弃-vector-时也会丢弃其所有元素","aria-hidden":"true"}},[this._v("#")]),this._v(" 丢弃 vector 时也会丢弃其所有元素")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("类似于任何其他的 "),s("code",[this._v("struct")]),this._v("，vector 在其离开作用域时会被释放，如示例 8-4 所标注的：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" v "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("vec!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 处理变量 v")]),t._v("\n\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// <- 这里 v 离开作用域并被丢弃")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 8-4：展示 vector 和其元素于何处被丢弃")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"读取-vector-的元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#读取-vector-的元素","aria-hidden":"true"}},[this._v("#")]),this._v(" 读取 vector 的元素")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("示例 8-5 展示了访问 vector 中一个值的两种方式，索引语法或者 "),s("code",[this._v("get")]),this._v(" 方法：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" v "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("vec!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" third"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("i32 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("v"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"The third element is {}"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" third"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("match")]),t._v(" v"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("get")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("Some")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("third"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"The third element is {}"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" third"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    None "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"There is no third element."')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("列表 8-5：使用索引语法或 "),s("code",[this._v("get")]),this._v(" 方法来访问 vector 中的项")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这里有两个需要注意的地方。首先，我们使用索引值 "),a("code",[t._v("2")]),t._v(" 来获取第三个元素，索引是从 0 开始的。其次，这两个不同的获取第三个元素的方式分别为：使用 "),a("code",[t._v("&")]),t._v(" 和 "),a("code",[t._v("[]")]),t._v(" 返回一个引用；或者使用 "),a("code",[t._v("get")]),t._v(" 方法以索引作为参数来返回一个 "),a("code",[t._v("Option<&T>")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,should_panic,panics extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("let v = vec![1, 2, 3, 4, 5];\n\nlet does_not_exist = &v[100];\nlet does_not_exist = v.get(100);\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 8-6：尝试访问一个包含 5 个元素的 vector 的索引 100 处的元素")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当运行这段代码，你会发现对于第一个 "),s("code",[this._v("[]")]),this._v(" 方法，当引用一个不存在的元素时 Rust 会造成 panic。这个方法更适合当程序认为尝试访问超过 vector 结尾的元素是一个严重错误的情况，这时应该使程序崩溃。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("当 "),a("code",[t._v("get")]),t._v(" 方法被传递了一个数组外的索引时，它不会 panic 而是返回 "),a("code",[t._v("None")]),t._v("。当偶尔出现超过 vector 范围的访问属于正常情况的时候可以考虑使用它。接着你的代码可以有处理 "),a("code",[t._v("Some(&element)")]),t._v(" 或 "),a("code",[t._v("None")]),t._v(" 的逻辑，如第六章讨论的那样。例如，索引可能来源于用户输入的数字。如果它们不慎输入了一个过大的数字那么程序就会得到 "),a("code",[t._v("None")]),t._v(" 值，你可以告诉用户当前 vector 元素的数量并再请求它们输入一个有效的值。这就比因为输入错误而使程序崩溃要友好的多！")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore,does_not_compile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('let mut v = vec![1, 2, 3, 4, 5];\n\nlet first = &v[0];\n\nv.push(6);\n\nprintln!("The first element is: {}", first);\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 8-7：在拥有 vector 中项的引用的同时向其增加一个元素")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n  --\x3e src/main.rs:10:5\n   |\n8  |     let first = &v[0];\n   |                  - immutable borrow occurs here\n9  |\n10 |     v.push(6);\n   |     ^^^^^^^^^ mutable borrow occurs here\n11 |\n12 |     println!("The first element is: {}", first);\n   |                                          ----- borrow later used here\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("注意：关于 "),s("code",[this._v("Vec<T>")]),this._v(" 类型的更多实现细节，在 "),s("em",[this._v("https://doc.rust-lang.org/stable/nomicon/vec.html")]),this._v(" 查看 “The Nomicon”")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"遍历-vector-中的元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#遍历-vector-中的元素","aria-hidden":"true"}},[this._v("#")]),this._v(" 遍历 vector 中的元素")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果想要依次访问 vector 中的每一个元素，我们可以遍历其所有的元素而无需通过索引一次一个的访问。示例 8-8 展示了如何使用 "),s("code",[this._v("for")]),this._v(" 循环来获取 "),s("code",[this._v("i32")]),this._v(" 值的 vector 中的每一个元素的不可变引用并将其打印：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" v "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("vec!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("100")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("32")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("57")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("v "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"{}"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 8-8：通过 "),s("code",[this._v("for")]),this._v(" 循环遍历 vector 的元素并打印")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们也可以遍历可变 vector 的每一个元素的可变引用以便能改变他们。示例 8-9 中的 "),s("code",[this._v("for")]),this._v(" 循环会给每一个元素加 "),s("code",[this._v("50")]),this._v("：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" v "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("vec!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("100")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("32")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("57")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" v "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("i "),a("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("50")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例8-9：遍历 vector 中元素的可变引用")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("为了修改可变引用所指向的值，在使用 "),a("code",[t._v("+=")]),t._v(" 运算符之前必须使用解引用运算符（"),a("code",[t._v("*")]),t._v("）获取 "),a("code",[t._v("i")]),t._v(" 中的值。第十五章会详细介绍 "),a("code",[t._v("*")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"使用枚举来储存多种类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用枚举来储存多种类型","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用枚举来储存多种类型")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" SpreadsheetCell "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("Int")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i32"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("Float")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f64"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("Text")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" row "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("vec!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    SpreadsheetCell"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("Int")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    SpreadsheetCell"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("Text")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"blue"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    SpreadsheetCell"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("Float")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("10.12")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 8-10：定义一个枚举，以便能在 vector 中存放不同类型的数据")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Rust 在编译时就必须准确的知道 vector 中类型的原因在于它需要知道储存每个元素到底需要多少内存。第二个好处是可以准确的知道这个 vector 中允许什么类型。如果 Rust 允许 vector 存放任意类型，那么当对 vector 元素执行操作时一个或多个类型的值就有可能会造成错误。使用枚举外加 "),s("code",[this._v("match")]),this._v(" 意味着 Rust 能在编译时就保证总是会处理所有可能的情况，正如第六章讲到的那样。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("现在我们了解了一些使用 vector 的最常见的方式，请一定去看看标准库中 "),a("code",[t._v("Vec")]),t._v(" 定义的很多其他实用方法的 API 文档。例如，除了 "),a("code",[t._v("push")]),t._v(" 之外还有一个 "),a("code",[t._v("pop")]),t._v(" 方法，它会移除并返回 vector 的最后一个元素。让我们继续下一个集合类型："),a("code",[t._v("String")]),t._v("！")])}],!1,null,null,null);e.options.__file="ch08-01-vectors.md";s.default=e.exports}}]);