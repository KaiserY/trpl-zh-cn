(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{276:function(t,s,n){"use strict";n.r(s);var e=n(0),a=Object(e.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch09-02-recoverable-errors-with-result.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch09-02-recoverable-errors-with-result.md"),n("OutboundLink")],1),t._v(" "),n("br"),t._v("\ncommit db53e2e3cdf77beac853df6f29db4b3b86ea598c")])]),t._v(" "),n("p",[t._v("大部分错误并没有严重到需要程序完全停止执行。有时，一个函数会因为一个容易理解并做出反应的原因失败。例如，如果尝试打开一个文件不过由于文件并不存在而失败，此时我们可能想要创建这个文件而不是终止进程。")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._m(7),t._v(" "),n("p",[t._v("如何知道 "),n("code",[t._v("File::open")]),t._v(" 返回一个 "),n("code",[t._v("Result")]),t._v(" 呢？我们可以查看 "),n("a",{attrs:{href:"https://doc.rust-lang.org/std/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("标准库 API 文档"),n("OutboundLink")],1),t._v("，或者可以直接问编译器！如果给 "),n("code",[t._v("f")]),t._v(" 某个我们知道 "),n("strong",[t._v("不是")]),t._v(" 函数返回值类型的类型注解，接着尝试编译代码，编译器会告诉我们类型不匹配。然后错误信息会告诉我们 "),n("code",[t._v("f")]),t._v(" 的类型 "),n("strong",[t._v("应该")]),t._v(" 是什么。让我们试试！我们知道 "),n("code",[t._v("File::open")]),t._v(" 的返回值不是 "),n("code",[t._v("u32")]),t._v(" 类型的，所以将 "),n("code",[t._v("let f")]),t._v(" 语句改为如下：")]),t._v(" "),t._m(8),n("p",[t._v("现在尝试编译会给出如下输出：")]),t._v(" "),t._m(9),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),n("p",[t._v("输出一如既往告诉了我们到底出了什么错。")]),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._m(35),t._v(" "),t._m(36),t._m(37),t._v(" "),t._m(38),t._v(" "),t._m(39),t._m(40),t._v(" "),t._m(41),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44),t._v(" "),n("p",[t._v("例如，示例 9-6 展示了一个从文件中读取用户名的函数。如果文件不存在或不能读取，这个函数会将这些错误返回给调用它的代码：")]),t._v(" "),t._m(45),t._v(" "),t._m(46),t._m(47),t._v(" "),t._m(48),t._v(" "),t._m(49),t._v(" "),t._m(50),t._v(" "),t._m(51),t._v(" "),t._m(52),t._v(" "),t._m(53),t._v(" "),t._m(54),t._v(" "),t._m(55),t._v(" "),t._m(56),t._m(57),t._v(" "),t._m(58),t._v(" "),t._m(59),t._v(" "),t._m(60),t._v(" "),t._m(61),t._v(" "),t._m(62),t._v(" "),t._m(63),t._m(64),t._v(" "),t._m(65),t._v(" "),n("p",[t._v("说到编写这个函数的不同方法，甚至还有一个更短的写法：")]),t._v(" "),t._m(66),t._v(" "),t._m(67),t._m(68),t._v(" "),t._m(69),t._v(" "),t._m(70),t._v(" "),t._m(71),t._v(" "),t._m(72),t._v(" "),t._m(73),n("p",[t._v("当编译这些代码，会得到如下错误信息：")]),t._v(" "),t._m(74),t._m(75),t._v(" "),t._m(76),t._v(" "),t._m(77),t._m(78),t._v(" "),t._m(79)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"result-与可恢复的错误"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#result-与可恢复的错误","aria-hidden":"true"}},[this._v("#")]),this._v(" "),s("code",[this._v("Result")]),this._v(" 与可恢复的错误")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("回忆一下第二章 “使用 "),n("code",[t._v("Result")]),t._v(" 类型来处理潜在的错误” 部分中的那个 "),n("code",[t._v("Result")]),t._v(" 枚举，它定义有如下两个成员，"),n("code",[t._v("Ok")]),t._v(" 和 "),n("code",[t._v("Err")]),t._v("：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Result"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" E"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("Ok")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("Err")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("E"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("T")]),t._v(" 和 "),n("code",[t._v("E")]),t._v(" 是泛型类型参数；第十章会详细介绍泛型。现在你需要知道的就是 "),n("code",[t._v("T")]),t._v(" 代表成功时返回的 "),n("code",[t._v("Ok")]),t._v(" 成员中的数据的类型，而 "),n("code",[t._v("E")]),t._v(" 代表失败时返回的 "),n("code",[t._v("Err")]),t._v(" 成员中的错误的类型。因为 "),n("code",[t._v("Result")]),t._v(" 有这些泛型类型参数，我们可以将 "),n("code",[t._v("Result")]),t._v(" 类型和标准库中为其定义的函数用于很多不同的场景，这些情况中需要返回的成功值和失败值可能会各不相同。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("让我们调用一个返回 "),s("code",[this._v("Result")]),this._v(" 的函数，因为它可能会失败：如示例 9-3 所示打开一个文件：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("fs"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("File"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" f "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" File"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("open")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"hello.txt"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 9-3：打开文件")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('let f: u32 = File::open("hello.txt");\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('error[E0308]: mismatched types\n --\x3e src/main.rs:4:18\n  |\n4 |     let f: u32 = File::open("hello.txt");\n  |                  ^^^^^^^^^^^^^^^^^^^^^^^ expected u32, found enum\n`std::result::Result`\n  |\n  = note: expected type `u32`\n             found type `std::result::Result<std::fs::File, std::io::Error>`\n')])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这就告诉我们了 "),n("code",[t._v("File::open")]),t._v(" 函数的返回值类型是 "),n("code",[t._v("Result<T, E>")]),t._v("。这里泛型参数 "),n("code",[t._v("T")]),t._v(" 放入了成功值的类型 "),n("code",[t._v("std::fs::File")]),t._v("，它是一个文件句柄。"),n("code",[t._v("E")]),t._v(" 被用在失败值上时 "),n("code",[t._v("E")]),t._v(" 的类型是 "),n("code",[t._v("std::io::Error")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这个返回值类型说明 "),s("code",[this._v("File::open")]),this._v(" 调用可能会成功并返回一个可以进行读写的文件句柄。这个函数也可能会失败：例如，文件可能并不存在，或者可能没有访问文件的权限。"),s("code",[this._v("File::open")]),this._v(" 需要一个方式告诉我们是成功还是失败，并同时提供给我们文件句柄或错误信息。而这些信息正是 "),s("code",[this._v("Result")]),this._v(" 枚举可以提供的。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("当 "),n("code",[t._v("File::open")]),t._v(" 成功的情况下，变量 "),n("code",[t._v("f")]),t._v(" 的值将会是一个包含文件句柄的 "),n("code",[t._v("Ok")]),t._v(" 实例。在失败的情况下，"),n("code",[t._v("f")]),t._v(" 的值会是一个包含更多关于出现了何种错误信息的 "),n("code",[t._v("Err")]),t._v(" 实例。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们需要在示例 9-3 的代码中增加根据 "),s("code",[this._v("File::open")]),this._v(" 返回值进行不同处理的逻辑。示例 9-4 展示了一个使用基本工具处理 "),s("code",[this._v("Result")]),this._v(" 的例子：第六章学习过的 "),s("code",[this._v("match")]),this._v(" 表达式。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,should_panic extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('use std::fs::File;\n\nfn main() {\n    let f = File::open("hello.txt");\n\n    let f = match f {\n        Ok(file) => file,\n        Err(error) => {\n            panic!("There was a problem opening the file: {:?}", error)\n        },\n    };\n}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 9-4：使用 "),s("code",[this._v("match")]),this._v(" 表达式处理可能的 "),s("code",[this._v("Result")]),this._v(" 成员")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("注意与 "),n("code",[t._v("Option")]),t._v(" 枚举一样，"),n("code",[t._v("Result")]),t._v(" 枚举和其成员也被导入到了 prelude 中，所以就不需要在 "),n("code",[t._v("match")]),t._v(" 分支中的 "),n("code",[t._v("Ok")]),t._v(" 和 "),n("code",[t._v("Err")]),t._v(" 之前指定 "),n("code",[t._v("Result::")]),t._v("。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这里我们告诉 Rust 当结果是 "),n("code",[t._v("Ok")]),t._v(" 时，返回 "),n("code",[t._v("Ok")]),t._v(" 成员中的 "),n("code",[t._v("file")]),t._v(" 值，然后将这个文件句柄赋值给变量 "),n("code",[t._v("f")]),t._v("。"),n("code",[t._v("match")]),t._v(" 之后，我们可以利用这个文件句柄来进行读写。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("match")]),t._v(" 的另一个分支处理从 "),n("code",[t._v("File::open")]),t._v(" 得到 "),n("code",[t._v("Err")]),t._v(" 值的情况。在这种情况下，我们选择调用 "),n("code",[t._v("panic!")]),t._v(" 宏。如果当前目录没有一个叫做 "),n("em",[t._v("hello.txt")]),t._v(" 的文件，当运行这段代码时会看到如下来自 "),n("code",[t._v("panic!")]),t._v(" 宏的输出：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("thread 'main' panicked at 'There was a problem opening the file: Error { repr:\nOs { code: 2, message: \"No such file or directory\" } }', src/main.rs:9:12\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"匹配不同的错误"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#匹配不同的错误","aria-hidden":"true"}},[this._v("#")]),this._v(" 匹配不同的错误")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("示例 9-4 中的代码不管 "),n("code",[t._v("File::open")]),t._v(" 是因为什么原因失败都会 "),n("code",[t._v("panic!")]),t._v("。我们真正希望的是对不同的错误原因采取不同的行为：如果 "),n("code",[t._v("File::open")]),t._v("因为文件不存在而失败，我们希望创建这个文件并返回新文件的句柄。如果 "),n("code",[t._v("File::open")]),t._v(" 因为任何其他原因失败，例如没有打开文件的权限，我们仍然希望像示例 9-4 那样 "),n("code",[t._v("panic!")]),t._v("。让我们看看示例 9-5，其中 "),n("code",[t._v("match")]),t._v(" 增加了另一个分支：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('use std::fs::File;\nuse std::io::ErrorKind;\n\nfn main() {\n    let f = File::open("hello.txt");\n\n    let f = match f {\n        Ok(file) => file,\n        Err(error) => match error.kind() {\n            ErrorKind::NotFound => match File::create("hello.txt") {\n                Ok(fc) => fc,\n                Err(e) => panic!("Tried to create file but there was a problem: {:?}", e),\n            },\n            other_error => panic!("There was a problem opening the file: {:?}", other_error),\n        },\n    };\n}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 9-5：使用不同的方式处理不同类型的错误")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("File::open")]),t._v(" 返回的 "),n("code",[t._v("Err")]),t._v(" 成员中的值类型 "),n("code",[t._v("io::Error")]),t._v("，它是一个标准库中提供的结构体。这个结构体有一个返回 "),n("code",[t._v("io::ErrorKind")]),t._v(" 值的 "),n("code",[t._v("kind")]),t._v(" 方法可供调用。"),n("code",[t._v("io::ErrorKind")]),t._v(" 是一个标准库提供的枚举，它的成员对应 "),n("code",[t._v("io")]),t._v(" 操作可能导致的不同错误类型。我们感兴趣的成员是 "),n("code",[t._v("ErrorKind::NotFound")]),t._v("，它代表尝试打开的文件并不存在。所以 "),n("code",[t._v("match")]),t._v(" 的 "),n("code",[t._v("f")]),t._v(" 匹配，不过对于 "),n("code",[t._v("error.kind()")]),t._v(" 还有一个内部 "),n("code",[t._v("match")]),t._v("。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("我们希望在匹配守卫中检查的条件是 "),n("code",[t._v("error.kind()")]),t._v(" 的返回值是 "),n("code",[t._v("ErrorKind")]),t._v("的 "),n("code",[t._v("NotFound")]),t._v(" 成员。如果是，则尝试通过 "),n("code",[t._v("File::create")]),t._v(" 创建文件。然而因为 "),n("code",[t._v("File::create")]),t._v(" 也可能会失败，还需要增加一个内部 "),n("code",[t._v("match")]),t._v(" 语句。当文件不能被打开，会打印出一个不同的错误信息。外部 "),n("code",[t._v("match")]),t._v(" 的最后一个分支保持不变这样对任何除了文件不存在的错误会使程序 panic。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这里有好多 "),n("code",[t._v("match")]),t._v("！"),n("code",[t._v("match")]),t._v(" 确实很强大，不过也非常的基础。第十三章我们会介绍闭包（closure）。"),n("code",[t._v("Result<T, E>")]),t._v(" 有很多接受闭包的方法，并采用 "),n("code",[t._v("match")]),t._v(" 表达式实现。一个更老练的 Rustacean 可能会这么写：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('use std::fs::File;\nuse std::io::ErrorKind;\n\nfn main() {\n    let f = File::open("hello.txt").map_err(|error| {\n        if error.kind() == ErrorKind::NotFound {\n            File::create("hello.txt").unwrap_or_else(|error| {\n                panic!("Tried to create file but there was a problem: {:?}", error);\n            })\n        } else {\n            panic!("There was a problem opening the file: {:?}", error);\n        }\n    });\n}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在阅读完第十三章后再回到这个例子，并查看标准库文档 "),s("code",[this._v("map_err")]),this._v(" 和 "),s("code",[this._v("unwrap_or_else")]),this._v(" 方法都做了什么操作。还有很多这类方法可以消除大量处理错误时嵌套的 "),s("code",[this._v("match")]),this._v(" 表达式。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"失败时-panic-的简写：unwrap-和-expect"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#失败时-panic-的简写：unwrap-和-expect","aria-hidden":"true"}},[this._v("#")]),this._v(" 失败时 panic 的简写："),s("code",[this._v("unwrap")]),this._v(" 和 "),s("code",[this._v("expect")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("match")]),t._v(" 能够胜任它的工作，不过它可能有点冗长并且不总是能很好的表明其意图。"),n("code",[t._v("Result<T, E>")]),t._v(" 类型定义了很多辅助方法来处理各种情况。其中之一叫做 "),n("code",[t._v("unwrap")]),t._v("，它的实现就类似于示例 9-4 中的 "),n("code",[t._v("match")]),t._v(" 语句。如果 "),n("code",[t._v("Result")]),t._v(" 值是成员 "),n("code",[t._v("Ok")]),t._v("，"),n("code",[t._v("unwrap")]),t._v(" 会返回 "),n("code",[t._v("Ok")]),t._v(" 中的值。如果 "),n("code",[t._v("Result")]),t._v(" 是成员 "),n("code",[t._v("Err")]),t._v("，"),n("code",[t._v("unwrap")]),t._v(" 会为我们调用 "),n("code",[t._v("panic!")]),t._v("。这里是一个实践 "),n("code",[t._v("unwrap")]),t._v(" 的例子：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,should_panic extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('use std::fs::File;\n\nfn main() {\n    let f = File::open("hello.txt").unwrap();\n}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果调用这段代码时不存在 "),s("em",[this._v("hello.txt")]),this._v(" 文件，我们将会看到一个 "),s("code",[this._v("unwrap")]),this._v(" 调用 "),s("code",[this._v("panic!")]),this._v(" 时提供的错误信息：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Error {\nrepr: Os { code: 2, message: \"No such file or directory\" } }',\nsrc/libcore/result.rs:906:4\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("还有另一个类似于 "),n("code",[t._v("unwrap")]),t._v(" 的方法它还允许我们选择 "),n("code",[t._v("panic!")]),t._v(" 的错误信息："),n("code",[t._v("expect")]),t._v("。使用 "),n("code",[t._v("expect")]),t._v(" 而不是 "),n("code",[t._v("unwrap")]),t._v(" 并提供一个好的错误信息可以表明你的意图并更易于追踪 panic 的根源。"),n("code",[t._v("expect")]),t._v(" 的语法看起来像这样：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,should_panic extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('use std::fs::File;\n\nfn main() {\n    let f = File::open("hello.txt").expect("Failed to open hello.txt");\n}\n')])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("expect")]),t._v(" 与 "),n("code",[t._v("unwrap")]),t._v(" 的使用方式一样：返回文件句柄或调用 "),n("code",[t._v("panic!")]),t._v(" 宏。"),n("code",[t._v("expect")]),t._v(" 用来调用 "),n("code",[t._v("panic!")]),t._v(" 的错误信息将会作为参数传递给 "),n("code",[t._v("expect")]),t._v(" ，而不像"),n("code",[t._v("unwrap")]),t._v(" 那样使用默认的 "),n("code",[t._v("panic!")]),t._v(" 信息。它看起来像这样：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("thread 'main' panicked at 'Failed to open hello.txt: Error { repr: Os { code:\n2, message: \"No such file or directory\" } }', src/libcore/result.rs:906:4\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("因为这个错误信息以我们指定的文本开始，"),n("code",[t._v("Failed to open hello.txt")]),t._v("，将会更容易找到代码中的错误信息来自何处。如果在多处使用 "),n("code",[t._v("unwrap")]),t._v("，则需要花更多的时间来分析到底是哪一个 "),n("code",[t._v("unwrap")]),t._v(" 造成了 panic，因为所有的 "),n("code",[t._v("unwrap")]),t._v(" 调用都打印相同的信息。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"传播错误"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#传播错误","aria-hidden":"true"}},[this._v("#")]),this._v(" 传播错误")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当编写一个其实现会调用一些可能会失败的操作的函数时，除了在这个函数中处理错误外，还可以选择让调用者知道这个错误并决定该如何处理。这被称为 "),s("strong",[this._v("传播")]),this._v("（"),s("em",[this._v("propagating")]),this._v("）错误，这样能更好的控制代码调用，因为比起你代码所拥有的上下文，调用者可能拥有更多信息或逻辑来决定应该如何处理错误。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("Filename: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("io"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("io"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Read"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("fs"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("File"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("read_username_from_file")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Result"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" io"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Error"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" f "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" File"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("open")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"hello.txt"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" f "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("match")]),t._v(" f "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("Ok")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" file"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("Err")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Err")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" s "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("match")]),t._v(" f"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("read_to_string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" s"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("Ok")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Ok")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("Err")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Err")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 9-6：一个函数使用 "),s("code",[this._v("match")]),this._v(" 将错误返回给代码调用者")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("首先让我们看看函数的返回值："),n("code",[t._v("Result<String, io::Error>")]),t._v("。这意味着函数返回一个 "),n("code",[t._v("Result<T, E>")]),t._v(" 类型的值，其中泛型参数 "),n("code",[t._v("T")]),t._v(" 的具体类型是 "),n("code",[t._v("String")]),t._v("，而 "),n("code",[t._v("E")]),t._v(" 的具体类型是 "),n("code",[t._v("io::Error")]),t._v("。如果这个函数没有出任何错误成功返回，函数的调用者会收到一个包含 "),n("code",[t._v("String")]),t._v(" 的 "),n("code",[t._v("Ok")]),t._v(" 值 —— 函数从文件中读取到的用户名。如果函数遇到任何错误，函数的调用者会收到一个 "),n("code",[t._v("Err")]),t._v(" 值，它储存了一个包含更多这个问题相关信息的 "),n("code",[t._v("io::Error")]),t._v(" 实例。这里选择 "),n("code",[t._v("io::Error")]),t._v(" 作为函数的返回值是因为它正好是函数体中那两个可能会失败的操作的错误返回值："),n("code",[t._v("File::open")]),t._v(" 函数和 "),n("code",[t._v("read_to_string")]),t._v(" 方法。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("函数体以 "),n("code",[t._v("File::open")]),t._v(" 函数开头。接着使用 "),n("code",[t._v("match")]),t._v(" 处理返回值 "),n("code",[t._v("Result")]),t._v("，类似于示例 9-4 中的 "),n("code",[t._v("match")]),t._v("，唯一的区别是当 "),n("code",[t._v("Err")]),t._v(" 时不再调用 "),n("code",[t._v("panic!")]),t._v("，而是提早返回并将 "),n("code",[t._v("File::open")]),t._v(" 返回的错误值作为函数的错误返回值传递给调用者。如果 "),n("code",[t._v("File::open")]),t._v(" 成功了，我们将文件句柄储存在变量 "),n("code",[t._v("f")]),t._v(" 中并继续。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("接着我们在变量 "),n("code",[t._v("s")]),t._v(" 中创建了一个新 "),n("code",[t._v("String")]),t._v(" 并调用文件句柄 "),n("code",[t._v("f")]),t._v(" 的 "),n("code",[t._v("read_to_string")]),t._v(" 方法来将文件的内容读取到 "),n("code",[t._v("s")]),t._v(" 中。"),n("code",[t._v("read_to_string")]),t._v(" 方法也返回一个 "),n("code",[t._v("Result")]),t._v(" 因为它也可能会失败：哪怕是 "),n("code",[t._v("File::open")]),t._v(" 已经成功了。所以我们需要另一个 "),n("code",[t._v("match")]),t._v(" 来处理这个 "),n("code",[t._v("Result")]),t._v("：如果 "),n("code",[t._v("read_to_string")]),t._v(" 成功了，那么这个函数就成功了，并返回文件中的用户名，它现在位于被封装进 "),n("code",[t._v("Ok")]),t._v(" 的 "),n("code",[t._v("s")]),t._v(" 中。如果"),n("code",[t._v("read_to_string")]),t._v(" 失败了，则像之前处理 "),n("code",[t._v("File::open")]),t._v(" 的返回值的 "),n("code",[t._v("match")]),t._v(" 那样返回错误值。不过并不需要显式的调用 "),n("code",[t._v("return")]),t._v("，因为这是函数的最后一个表达式。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("调用这个函数的代码最终会得到一个包含用户名的 "),n("code",[t._v("Ok")]),t._v(" 值，或者一个包含 "),n("code",[t._v("io::Error")]),t._v(" 的 "),n("code",[t._v("Err")]),t._v(" 值。我们无从得知调用者会如何处理这些值。例如，如果他们得到了一个 "),n("code",[t._v("Err")]),t._v(" 值，他们可能会选择 "),n("code",[t._v("panic!")]),t._v(" 并使程序崩溃、使用一个默认的用户名或者从文件之外的地方寻找用户名。我们没有足够的信息知晓调用者具体会如何尝试，所以将所有的成功或失败信息向上传播，让他们选择合适的处理方法。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这种传播错误的模式在 Rust 是如此的常见，以至于有一个更简便的专用语法："),s("code",[this._v("?")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"传播错误的简写："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#传播错误的简写：","aria-hidden":"true"}},[this._v("#")]),this._v(" 传播错误的简写："),s("code",[this._v("?")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("示例 9-7 展示了一个 "),s("code",[this._v("read_username_from_file")]),this._v(" 的实现，它实现了与示例 9-6 中的代码相同的功能，不过这个实现使用了问号运算符：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("io"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("io"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Read"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("fs"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("File"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("read_username_from_file")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Result"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" io"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Error"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" f "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" File"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("open")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"hello.txt"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("?"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" s "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    f"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("read_to_string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" s"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("?"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("Ok")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 9-6：一个使用 "),s("code",[this._v("?")]),this._v(" 向调用者返回错误的函数")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("Result")]),t._v(" 值之后的 "),n("code",[t._v("?")]),t._v(" 被定义为与示例 9-6 中定义的处理 "),n("code",[t._v("Result")]),t._v(" 值的 "),n("code",[t._v("match")]),t._v(" 表达式有着完全相同的工作方式。如果 "),n("code",[t._v("Result")]),t._v(" 的值是 "),n("code",[t._v("Ok")]),t._v("，这个表达式将会返回 "),n("code",[t._v("Ok")]),t._v(" 中的值而程序将继续执行。如果值是 "),n("code",[t._v("Err")]),t._v("，"),n("code",[t._v("Err")]),t._v(" 中的值将作为整个函数的返回值，就好像使用了 "),n("code",[t._v("return")]),t._v(" 关键字一样，这样错误值就被传播给了调用者。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("示例 9-6 中的 "),n("code",[t._v("match")]),t._v(" 表达式与问号运算符所做的有一点不同："),n("code",[t._v("?")]),t._v(" 所使用的错误值被传递给了 "),n("code",[t._v("from")]),t._v(" 函数，它定义于标准库的 "),n("code",[t._v("From")]),t._v(" trait 中，其用来将错误从一种类型转换为另一种类型。当 "),n("code",[t._v("?")]),t._v(" 调用 "),n("code",[t._v("from")]),t._v(" 函数时，收到的错误类型被转换为定义为当前函数返回的错误类型。这在当一个函数返回一个错误类型来代表所有可能失败的方式时很有用，即使其可能会因很多种原因失败。只要每一个错误类型都实现了 "),n("code",[t._v("from")]),t._v(" 函数来定义如将其转换为返回的错误类型，"),n("code",[t._v("?")]),t._v(" 会自动处理这些转换。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("在示例 9-7 的上下文中，"),n("code",[t._v("File::open")]),t._v(" 调用结尾的 "),n("code",[t._v("?")]),t._v(" 将会把 "),n("code",[t._v("Ok")]),t._v(" 中的值返回给变量 "),n("code",[t._v("f")]),t._v("。如果出现了错误，"),n("code",[t._v("?")]),t._v(" 会提早返回整个函数并将一些 "),n("code",[t._v("Err")]),t._v(" 值传播给调用者。同理也适用于 "),n("code",[t._v("read_to_string")]),t._v(" 调用结尾的 "),n("code",[t._v("?")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("?")]),this._v(" 消除了大量样板代码并使得函数的实现更简单。我们甚至可以在 "),s("code",[this._v("?")]),this._v(" 之后直接使用链式方法调用来进一步缩短代码，如示例 9-8 所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("io"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("io"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Read"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("fs"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("File"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("read_username_from_file")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Result"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" io"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Error"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" s "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    File"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("open")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"hello.txt"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("?"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("read_to_string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" s"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("?"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token function"}},[t._v("Ok")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 9-8：问号运算符之后的链式方法调用")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("在 "),n("code",[t._v("s")]),t._v(" 中创建新的 "),n("code",[t._v("String")]),t._v(" 被放到了函数开头；这一部分没有变化。我们对 "),n("code",[t._v('File::open("hello.txt")?')]),t._v(" 的结果直接链式调用了 "),n("code",[t._v("read_to_string")]),t._v("，而不再创建变量 "),n("code",[t._v("f")]),t._v("。仍然需要 "),n("code",[t._v("read_to_string")]),t._v(" 调用结尾的 "),n("code",[t._v("?")]),t._v("，而且当 "),n("code",[t._v("File::open")]),t._v(" 和 "),n("code",[t._v("read_to_string")]),t._v(" 都成功没有失败时返回包含用户名 "),n("code",[t._v("s")]),t._v(" 的 "),n("code",[t._v("Ok")]),t._v(" 值。其功能再一次与示例 9-6 和示例 9-7 保持一致，不过这是一个与众不同且更符合工程学的写法。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("io"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("fs"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("read_username_from_file")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Result"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" io"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Error"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fs"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("read_to_string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"hello.txt"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 9-9: 使用 "),s("code",[this._v("fs::read_to_string")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("将文件读取到一个字符串是相当常见的操作，所以 Rust 提供了名为 "),s("code",[this._v("fs::read_to_string")]),this._v(" 的函数，它会打开文件、新建一个 "),s("code",[this._v("String")]),this._v("、读取文件的内容，并将内容放入 "),s("code",[this._v("String")]),this._v("，接着返回它。当然，这样做就没有展示所有这些错误处理的机会了，所以我们最初就选择了艰苦的道路。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"只能被用于返回-result-的函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#只能被用于返回-result-的函数","aria-hidden":"true"}},[this._v("#")]),this._v(" "),s("code",[this._v("?")]),this._v(" 只能被用于返回 "),s("code",[this._v("Result")]),this._v(" 的函数")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("?")]),t._v(" 只能被用于返回值类型为 "),n("code",[t._v("Result")]),t._v(" 的函数，因为他被定义为与示例 9-6 中的 "),n("code",[t._v("match")]),t._v(" 表达式有着完全相同的工作方式。"),n("code",[t._v("match")]),t._v(" 的 "),n("code",[t._v("return Err(e)")]),t._v(" 部分要求返回值类型是 "),n("code",[t._v("Result")]),t._v("，所以函数的返回值必须是 "),n("code",[t._v("Result")]),t._v(" 才能与这个 "),n("code",[t._v("return")]),t._v(" 相兼容。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("让我们看看在 "),s("code",[this._v("main")]),this._v(" 函数中使用 "),s("code",[this._v("?")]),this._v(" 会发生什么，如果你还记得的话其返回值类型是"),s("code",[this._v("()")]),this._v("：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('use std::fs::File;\n\nfn main() {\n    let f = File::open("hello.txt")?;\n}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n --\x3e src/main.rs:4:13\n  |\n4 |     let f = File::open("hello.txt")?;\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n  |\n  = help: the trait `std::ops::Try` is not implemented for `()`\n  = note: required by `std::ops::Try::from_error`\n')])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("错误指出只能在返回 "),n("code",[t._v("Result")]),t._v(" 的函数中使用 "),n("code",[t._v("?")]),t._v("。在不返回 "),n("code",[t._v("Result")]),t._v(" 的函数中，当调用其他返回 "),n("code",[t._v("Result")]),t._v(" 的函数时，需要使用 "),n("code",[t._v("match")]),t._v(" 或 "),n("code",[t._v("Result")]),t._v(" 的方法之一来处理，而不能用 "),n("code",[t._v("?")]),t._v(" 将潜在的错误传播给代码调用方。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("不过 "),s("code",[this._v("main")]),this._v(" 函数可以返回一个 "),s("code",[this._v("Result<T, E>")]),this._v("：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('use std::error::Error;\nuse std::fs::File;\n\nfn main() -> Result<(), Box<dyn Error>> {\n    let f = File::open("hello.txt")?;\n\n    Ok(())\n}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("Box<dyn Error>")]),this._v(" 被称为 “trait 对象”（“trait object”），第十七章会介绍。目前可以理解 "),s("code",[this._v("Box<dyn Error>")]),this._v(" 为 “任何类型的错误”。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在我们讨论过了调用 "),s("code",[this._v("panic!")]),this._v(" 或返回 "),s("code",[this._v("Result")]),this._v(" 的细节，是时候回到他们各自适合哪些场景的话题了。")])}],!1,null,null,null);a.options.__file="ch09-02-recoverable-errors-with-result.md";s.default=a.exports}}]);