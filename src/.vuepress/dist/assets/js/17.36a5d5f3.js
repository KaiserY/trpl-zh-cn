(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{270:function(t,e,s){"use strict";s.r(e);var r=s(0),a=Object(r.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch01-03-hello-cargo.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch01-03-hello-cargo.md"),s("OutboundLink")],1),t._v(" "),s("br"),t._v("\ncommit 1fedfc4b96c2017f64ecfcf41a0a07e2e815f24f")])]),t._v(" "),t._m(1),t._v(" "),s("p",[t._v("最简单的 Rust 程序，比如我们刚刚编写的，没有任何依赖。所以如果使用 Cargo 来构建 Hello, world! 项目，将只会用到 Cargo 的构建代码那部分功能。如果编写更为复杂的 Rust 程序，你会添加依赖，这样如果你一开始就使用 Cargo 的话，添加依赖将会变得简单许多。")]),t._v(" "),s("p",[t._v("由于绝大多数 Rust 项目使用 Cargo，本书接下来的部分假设你也使用 Cargo。如果使用 “安装” 部分介绍的官方安装包的话，则自带了 Cargo。如果通过其他方式安装的话，可以在终端输入如下命令检查是否安装了 Cargo：")]),t._v(" "),t._m(2),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._m(13),t._v(" "),s("p",[t._v("这个文件使用 "),s("a",{attrs:{href:"https://github.com/toml-lang/toml",target:"_blank",rel:"noopener noreferrer"}},[s("em",[t._v("TOML")]),s("OutboundLink")],1),t._v(" ("),s("em",[t._v("Tom's Obvious, Minimal Language")]),t._v(") 格式，这是 Cargo 配置文件的格式。")]),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._m(26),t._v(" "),t._m(27),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._m(31),t._v(" "),t._m(32),t._m(33),t._v(" "),t._m(34),t._m(35),t._v(" "),s("p",[t._v("我们回顾下已学习的 Cargo 内容：")]),t._v(" "),t._m(36),t._v(" "),s("p",[t._v("使用 Cargo 的一个额外的优点是，不管你使用什么操作系统，其命令都是一样的。所以从现在开始本书将不再为 Linux 和 macOS 以及 Windows 提供相应的命令。")]),t._v(" "),t._m(37),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),t._m(41),t._v(" "),t._m(42),s("p",[t._v("关于更多 Cargo 的信息，请查阅 "),s("a",{attrs:{href:"https://doc.rust-lang.org/cargo/",target:"_blank",rel:"noopener noreferrer"}},[t._v("其文档"),s("OutboundLink")],1),t._v("。")]),t._v(" "),t._m(43),t._v(" "),s("p",[t._v("你已经准备好开启 Rust 之旅了！在本章中，你学习了如何：")]),t._v(" "),t._m(44),t._v(" "),s("p",[t._v("是时候通过构建更实质性的程序来熟悉读写 Rust 代码了。所以在第二章我们会构建一个猜猜看游戏程序。如果你更愿意从学习 Rust 常用的编程概念开始，请阅读第三章，接着再回到第二章。")])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"hello-cargo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hello-cargo","aria-hidden":"true"}},[this._v("#")]),this._v(" Hello, Cargo!")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Cargo 是 Rust 的构建系统和包管理器。大多数 Rustacean 们使用 Cargo 来管理他们的 Rust 项目，因为它可以为你处理很多任务，比如构建代码、下载依赖库并编译这些库。（我们把代码所需要的库叫做 "),e("strong",[this._v("依赖")]),this._v("（"),e("em",[this._v("dependencies")]),this._v("））。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$ cargo --version\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如果你看到了版本号，说明已安装！如果看到类似 "),e("code",[this._v("command not found")]),this._v(" 的错误，你应该查看相应安装文档以确定如何单独安装 Cargo。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"使用-cargo-创建项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-cargo-创建项目","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用 Cargo 创建项目")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("我们使用 Cargo 创建一个新项目，然后看看与上面的 Hello, world! 项目有什么不同。回到 "),e("em",[this._v("projects")]),this._v(" 目录（或者你存放代码的目录）。接着，可在任何操作系统下运行以下命令：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$ cargo new hello_cargo\n$ cd hello_cargo\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("第一行命令新建了名为 "),e("em",[this._v("hello_cargo")]),this._v(" 的目录。我们将项目命名为 "),e("em",[this._v("hello_cargo")]),this._v("，同时 Cargo 在一个同名目录中创建项目文件。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("进入 "),s("em",[t._v("hello_cargo")]),t._v(" 目录并列出文件。将会看到 Cargo 生成了两个文件和一个目录：一个 "),s("em",[t._v("Cargo.toml")]),t._v(" 文件，一个 "),s("em",[t._v("src")]),t._v(" 目录，以及位于 "),s("em",[t._v("src")]),t._v(" 目录中 "),s("em",[t._v("main.rs")]),t._v(" 文件。它也在 "),s("em",[t._v("hello_cargo")]),t._v(" 目录初始化了一个 git 仓库，以及一个 "),s("em",[t._v(".gitignore")]),t._v(" 文件。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("注意：Git 是一个常用的版本控制系统（version control system， VCS）。可以通过 "),e("code",[this._v("--vcs")]),this._v(" 参数使 "),e("code",[this._v("cargo new")]),this._v(" 切换到其它版本控制系统（VCS），或者不使用 VCS。运行 "),e("code",[this._v("cargo new --help")]),this._v(" 参看可用的选项。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("请自行选用文本编辑器打开 "),e("em",[this._v("Cargo.toml")]),this._v(" 文件。它应该看起来如示例 1-2 所示：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("span",{staticClass:"filename"},[this._v("文件名: Cargo.toml")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-toml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('[package]\nname = "hello_cargo"\nversion = "0.1.0"\nauthors = ["Your Name <you@example.com>"]\nedition = "2018"\n\n[dependencies]\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("span",{staticClass:"caption"},[this._v("示例 1-2: "),e("em",[this._v("cargo new")]),this._v(" 命令生成的 "),e("em",[this._v("Cargo.toml")]),this._v(" 的内容")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("第一行，"),e("code",[this._v("[package]")]),this._v("，是一个片段（section）标题，表明下面的语句用来配置一个包。随着我们在这个文件增加更多的信息，还将增加其他片段（section）。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("接下来的四行设置了 Cargo 编译程序所需的配置：项目的名称、版本和作者。Cargo 从环境中获取你的名字和 email 信息，所以如果这些信息不正确，请修改并保存此文件。附录 E 会介绍 "),e("code",[this._v("edition")]),this._v(" 的值。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("最后一行，"),e("code",[this._v("[dependencies]")]),this._v("，是罗列项目依赖的片段的开始。在 Rust 中，代码包被称为 "),e("em",[this._v("crates")]),this._v("。这个项目并不需要其他的 crate，不过在第二章的第一个项目会用到依赖，那时会用得上这个片段。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("现在打开 "),e("em",[this._v("src/main.rs")]),this._v(" 看看：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("main")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token function"}},[t._v("println!")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"Hello, world!"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Cargo 为你生成了一个 Hello World! 程序，正如我们之前编写的示例 1-1！目前为止，之前项目与 Cargo 生成项目的区别是 Cargo 将代码放在 "),e("em",[this._v("src")]),this._v(" 目录，同时项目根目录包含一个 "),e("em",[this._v("Cargo.toml")]),this._v(" 配置文件。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Cargo 期望源文件存放在 "),e("em",[this._v("src")]),this._v(" 目录中。项目根目录只存放 README、license 信息、配置文件和其他跟代码无关的文件。使用 Cargo 帮助你保持项目干净整洁，一切井井有条。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如果没有用 Cargo 开始项目，比如我们创建的 Hello,world! 项目，可以将其转化为一个 Cargo 项目。将代码放入 "),e("em",[this._v("src")]),this._v(" 目录，并创建一个合适的 "),e("em",[this._v("Cargo.toml")]),this._v(" 文件。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"构建并运行-cargo-项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构建并运行-cargo-项目","aria-hidden":"true"}},[this._v("#")]),this._v(" 构建并运行 Cargo 项目")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("现在让我们看看通过 Cargo 构建和运行 Hello, world! 程序有什么不同！在 "),e("em",[this._v("hello_cargo")]),this._v(" 目录下，输入下面的命令来构建项目：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$ cargo build\n   Compiling hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.85 secs\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这个命令会创建一个可执行文件 "),e("em",[this._v("target/debug/hello_cargo")]),this._v(" （在 Windows 上是 "),e("em",[this._v("target\\debug\\hello_cargo.exe")]),this._v("），而不是放在目前目录下。可以通过这个命令运行可执行文件：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$ ./target/debug/hello_cargo # 或者在 Windows 下为 .\\target\\debug\\hello_cargo.exe\nHello, world!\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如果一切顺利，终端上应该会打印出 "),e("code",[this._v("Hello, world!")]),this._v("。首次运行 "),e("code",[this._v("cargo build")]),this._v(" 时，也会使 Cargo 在项目根目录创建一个新文件："),e("em",[this._v("Cargo.lock")]),this._v("。这个文件记录项目依赖的实际版本。这个项目并没有依赖，所以其内容比较少。你自己永远也不需要碰这个文件，让 Cargo 处理它就行了。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("我们刚刚使用 "),e("code",[this._v("cargo build")]),this._v(" 构建了项目，并使用 "),e("code",[this._v("./target/debug/hello_cargo")]),this._v(" 运行了程序，也可以使用 "),e("code",[this._v("cargo run")]),this._v(" 在一个命令中同时编译并运行生成的可执行文件：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs\n     Running `target/debug/hello_cargo`\nHello, world!\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("注意这一次并没有出现表明 Cargo 正在编译 "),e("code",[this._v("hello_cargo")]),this._v(" 的输出。Cargo 发现文件并没有被改变，就直接运行了二进制文件。如果修改了源文件的话，Cargo 会在运行之前重新构建项目，并会出现像这样的输出：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$ cargo run\n   Compiling hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.33 secs\n     Running `target/debug/hello_cargo`\nHello, world!\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Cargo 还提供了一个叫 "),e("code",[this._v("cargo check")]),this._v(" 的命令。该命令快速检查代码确保其可以编译，但并不产生可执行文件：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$ cargo check\n   Checking hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.32 secs\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("为什么你会不需要可执行文件呢？通常 "),s("code",[t._v("cargo check")]),t._v(" 要比 "),s("code",[t._v("cargo build")]),t._v(" 快得多，因为它省略了生成可执行文件的步骤。如果你在编写代码时持续的进行检查，"),s("code",[t._v("cargo check")]),t._v(" 会加速开发！为此很多 Rustaceans 编写代码时定期运行 "),s("code",[t._v("cargo check")]),t._v(" 确保它们可以编译。当准备好使用可执行文件时才运行 "),s("code",[t._v("cargo build")]),t._v("。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("可以使用 "),s("code",[t._v("cargo build")]),t._v(" 或 "),s("code",[t._v("cargo check")]),t._v(" 构建项目。")]),t._v(" "),s("li",[t._v("可以使用 "),s("code",[t._v("cargo run")]),t._v(" 一步构建并运行项目。")]),t._v(" "),s("li",[t._v("有别于将构建结果放在与源码相同的目录，Cargo 会将其放到 "),s("em",[t._v("target/debug")]),t._v(" 目录。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"发布（release）构建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#发布（release）构建","aria-hidden":"true"}},[this._v("#")]),this._v(" 发布（release）构建")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("当项目最终准备好发布时，可以使用 "),s("code",[t._v("cargo build --release")]),t._v(" 来优化编译项目。这会在 "),s("em",[t._v("target/release")]),t._v(" 而不是 "),s("em",[t._v("target/debug")]),t._v(" 下生成可执行文件。这些优化可以让 Rust 代码运行的更快，不过启用这些优化也需要消耗更长的编译时间。这也就是为什么会有两种不同的配置：一种是为了开发，你需要经常快速重新构建；另一种是为用户构建最终程序，它们不会经常重新构建，并且希望程序运行得越快越好。如果你在测试代码的运行时间，请确保运行 "),s("code",[t._v("cargo build --release")]),t._v(" 并使用 "),s("em",[t._v("target/release")]),t._v(" 下的可执行文件进行测试。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"把-cargo-当作习惯"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#把-cargo-当作习惯","aria-hidden":"true"}},[this._v("#")]),this._v(" 把 Cargo 当作习惯")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("对于简单项目， Cargo 并不比 "),e("code",[this._v("rustc")]),this._v(" 提供了更多的优势，不过随着开发的深入，终将证明其价值。对于拥有多个 crate 的复杂项目，交给 Cargo 来协调构建将简单的多。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("即便 "),e("code",[this._v("hello_cargo")]),this._v(" 项目十分简单，它现在也使用了很多在你之后的 Rust 生涯将会用到的实用工具。其实，要在任何已存在的项目上工作时，可以使用如下命令通过 Git 检出代码，移动到该项目目录并构建：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$ git clone someurl.com/someproject\n$ cd someproject\n$ cargo build\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("使用 "),s("code",[t._v("rustup")]),t._v(" 安装最新稳定版的 Rust")]),t._v(" "),s("li",[t._v("更新到新版的 Rust")]),t._v(" "),s("li",[t._v("打开本地安装的文档")]),t._v(" "),s("li",[t._v("直接通过 "),s("code",[t._v("rustc")]),t._v(" 编写并运行 Hello, world! 程序")]),t._v(" "),s("li",[t._v("使用 Cargo 创建并运行新项目")])])}],!1,null,null,null);a.options.__file="ch01-03-hello-cargo.md";e.default=a.exports}}]);