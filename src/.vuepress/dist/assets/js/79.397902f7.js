(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{191:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/second-edition/src/ch15-02-deref.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch15-02-deref.md"),a("OutboundLink")],1),t._v(" "),a("br"),t._v("\ncommit d06a6a181fd61704cbf7feb55bc61d518c6469f9")])]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._m(28),t._v(" "),a("p",[t._v("得到的编译错误是：")]),t._v(" "),t._m(29),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),t._m(41),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44),t._v(" "),t._m(45),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),t._m(48),t._v(" "),t._m(49),t._m(50),t._v(" "),t._m(51),t._v(" "),t._m(52),t._v(" "),t._m(53),t._m(54),t._v(" "),t._m(55),t._v(" "),t._m(56),t._v(" "),t._m(57),t._v(" "),t._m(58),t._m(59),t._v(" "),t._m(60),t._v(" "),t._m(61),t._v(" "),t._m(62),t._v(" "),t._m(63),t._v(" "),a("p",[t._v("Rust 在发现类型和 trait 实现满足三种情况时会进行解引用强制多态：")]),t._v(" "),t._m(64),t._v(" "),t._m(65),t._v(" "),t._m(66)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"通过-deref-trait-将智能指针当作常规引用处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通过-deref-trait-将智能指针当作常规引用处理","aria-hidden":"true"}},[this._v("#")]),this._v(" 通过 "),s("code",[this._v("Deref")]),this._v(" trait 将智能指针当作常规引用处理")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("实现 "),a("code",[t._v("Deref")]),t._v(" trait 允许我们重载 "),a("strong",[t._v("解引用运算符")]),t._v("（"),a("em",[t._v("dereference operator")]),t._v("）"),a("code",[t._v("*")]),t._v("（与乘法运算符或 glob 运算符相区别）。通过这种方式实现 "),a("code",[t._v("Deref")]),t._v(" trait 可以被当作常规引用来对待，可以编写操作引用的代码并用于智能指针。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("让我们首先看看 "),a("code",[t._v("*")]),t._v(" 如何处理引用，接着尝试定义我们自己的类 "),a("code",[t._v("Box<T>")]),t._v(" 类型并看看为何 "),a("code",[t._v("*")]),t._v(" 不能像引用一样工作。我们会探索如何实现 "),a("code",[t._v("Deref")]),t._v(" trait 使得智能指针以类似引用的方式工作变为可能。最后，我们会讨论 Rust 的 "),a("strong",[t._v("解引用强制多态")]),t._v("（"),a("em",[t._v("deref coercions")]),t._v("）功能和它是如何一同处理引用或智能指针的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"通过-追踪指针的值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通过-追踪指针的值","aria-hidden":"true"}},[this._v("#")]),this._v(" 通过 "),s("code",[this._v("*")]),this._v(" 追踪指针的值")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("常规引用是一个指针类型，一种理解指针的方式是将其看成指向储存在其他某处值的箭头。在示例 15-8 中，创建了一个 "),s("code",[this._v("i32")]),this._v(" 值的引用接着使用解引用运算符来跟踪所引用的数据：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("main")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" y "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token function"}},[t._v("assert_eq!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("assert_eq!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("y"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 15-8：使用解引用运算符来跟踪 "),s("code",[this._v("i32")]),this._v(" 值的引用")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("变量 "),a("code",[t._v("x")]),t._v(" 存放了一个 "),a("code",[t._v("i32")]),t._v(" 值 "),a("code",[t._v("5")]),t._v("。"),a("code",[t._v("y")]),t._v(" 等于 "),a("code",[t._v("x")]),t._v(" 的一个引用。可以断言 "),a("code",[t._v("x")]),t._v(" 等于 "),a("code",[t._v("5")]),t._v("。然而，如果希望对 "),a("code",[t._v("y")]),t._v(" 的值做出断言，必须使用 "),a("code",[t._v("*y")]),t._v(" 来追踪引用所指向的值（也就是 "),a("strong",[t._v("解引用")]),t._v("）。一旦解引用了 "),a("code",[t._v("y")]),t._v("，就可以访问 "),a("code",[t._v("y")]),t._v(" 所指向的整型值并可以与 "),a("code",[t._v("5")]),t._v(" 做比较。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("相反如果尝试编写 "),s("code",[this._v("assert_eq!(5, y);")]),this._v("，则会得到如下编译错误：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("error[E0277]: the trait bound `{integer}: std::cmp::PartialEq<&{integer}>` is\nnot satisfied\n --\x3e src/main.rs:6:5\n  |\n6 |     assert_eq!(5, y);\n  |     ^^^^^^^^^^^^^^^^^ can't compare `{integer}` with `&{integer}`\n  |\n  = help: the trait `std::cmp::PartialEq<&{integer}>` is not implemented for\n  `{integer}`\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("不允许比较数字的引用与数字，因为它们是不同的类型。必须使用 "),s("code",[this._v("*")]),this._v(" 追踪引用所指向的值。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"像引用一样使用-box-t"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#像引用一样使用-box-t","aria-hidden":"true"}},[this._v("#")]),this._v(" 像引用一样使用 "),s("code",[this._v("Box<T>")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以重写示例 15-8 中的代码，使用 "),s("code",[this._v("Box<T>")]),this._v(" 来代替引用，解引用运算符也一样能工作，如示例 15-9 所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("main")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" y "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Box"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("new")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token function"}},[t._v("assert_eq!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("assert_eq!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("y"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 15-9：在 "),s("code",[this._v("Box<i32>")]),this._v(" 上使用解引用运算符")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("相比示例 15-8 唯一修改的地方就是将 "),a("code",[t._v("y")]),t._v(" 设置为一个指向 "),a("code",[t._v("x")]),t._v(" 值的 box 实例，而不是指向 "),a("code",[t._v("x")]),t._v(" 值的引用。在最后的断言中，可以使用解引用运算符以 "),a("code",[t._v("y")]),t._v(" 为引用时相同的方式追踪 box 的指针。让我们通过实现自己的 box 类型来探索 "),a("code",[t._v("Box<T>")]),t._v(" 能这么做有何特殊之处。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"自定义智能指针"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义智能指针","aria-hidden":"true"}},[this._v("#")]),this._v(" 自定义智能指针")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("为了体会默认智能指针的行为不同于引用，让我们创建一个类似于标准库提供的 "),s("code",[this._v("Box<T>")]),this._v(" 类型的智能指针。接着会学习如何增加使用解引用运算符的功能。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("从根本上说，"),a("code",[t._v("Box<T>")]),t._v(" 被定义为包含一个元素的元组结构体，所以示例 15-10 以相同的方式定义了 "),a("code",[t._v("MyBox<T>")]),t._v(" 类型。我们还定义了 "),a("code",[t._v("new")]),t._v(" 函数来对应定义于 "),a("code",[t._v("Box<T>")]),t._v(" 的 "),a("code",[t._v("new")]),t._v(" 函数：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" MyBox"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" MyBox"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("new")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" MyBox"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token function"}},[t._v("MyBox")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 15-10：定义 "),s("code",[this._v("MyBox<T>")]),this._v(" 类型")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这里定义了一个结构体 "),a("code",[t._v("MyBox")]),t._v(" 并声明了一个泛型 "),a("code",[t._v("T")]),t._v("，因为我们希望其可以存放任何类型的值。"),a("code",[t._v("MyBox")]),t._v(" 是一个包含 "),a("code",[t._v("T")]),t._v(" 类型元素的元组结构体。"),a("code",[t._v("MyBox::new")]),t._v(" 函数获取一个 "),a("code",[t._v("T")]),t._v(" 类型的参数并返回一个存放传入值的 "),a("code",[t._v("MyBox")]),t._v(" 实例。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("尝试将示例 15-9 中的代码加入示例 15-10 中并修改 "),a("code",[t._v("main")]),t._v(" 使用我们定义的 "),a("code",[t._v("MyBox<T>")]),t._v(" 类型代替 "),a("code",[t._v("Box<T>")]),t._v("。示例 15-11 中的代码不能编译，因为 Rust 不知道如何解引用 "),a("code",[t._v("MyBox")]),t._v("：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("fn main() {\n    let x = 5;\n    let y = MyBox::new(x);\n\n    assert_eq!(5, x);\n    assert_eq!(5, *y);\n}\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 15-11：尝试以使用引用和 "),s("code",[this._v("Box<T>")]),this._v(" 相同的方式使用 "),s("code",[this._v("MyBox<T>")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("error: type `MyBox<{integer}>` cannot be dereferenced\n  --\x3e src/main.rs:14:19\n   |\n14 |     assert_eq!(5, *y);\n   |                   ^^\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("MyBox<T>")]),this._v(" 类型不能解引用我们并没有为其实现这个功能。为了启用 "),s("code",[this._v("*")]),this._v(" 运算符的解引用功能，可以实现 "),s("code",[this._v("Deref")]),this._v(" trait。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"实现-deref-trait-定义如何像引用一样对待某类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现-deref-trait-定义如何像引用一样对待某类型","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现 "),s("code",[this._v("Deref")]),this._v(" trait 定义如何像引用一样对待某类型")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如第十章所讨论的，为了实现 trait，需要提供 trait 所需的方法实现。"),a("code",[t._v("Deref")]),t._v(" trait，由标准库提供，要求实现名为 "),a("code",[t._v("deref")]),t._v(" 的方法，其借用 "),a("code",[t._v("self")]),t._v(" 并返回一个内部数据的引用。示例 15-12 包含定义于 "),a("code",[t._v("MyBox")]),t._v(" 之上的 "),a("code",[t._v("Deref")]),t._v(" 实现：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("ops"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Deref"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" MyBox"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" Deref "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" MyBox"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Target "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" T"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("deref")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("T "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 15-12："),s("code",[this._v("MyBox<T>")]),this._v(" 上的 "),s("code",[this._v("Deref")]),this._v(" 实现")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("type Target = T;")]),this._v(" 语法定义了用于此 trait 的关联类型。关联类型是一个稍有不同的定义泛型参数的方式，现在还无需过多的担心它；第十九章会详细介绍。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("deref")]),t._v(" 方法体中写入了 "),a("code",[t._v("&self.0")]),t._v("，这样 "),a("code",[t._v("deref")]),t._v(" 返回了我希望通过 "),a("code",[t._v("*")]),t._v(" 运算符访问的值的引用。示例 15-11 中的 "),a("code",[t._v("main")]),t._v(" 函数中对 "),a("code",[t._v("MyBox<T>")]),t._v(" 值的 "),a("code",[t._v("*")]),t._v(" 调用现在可以编译并能通过断言了！")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("没有 "),a("code",[t._v("Deref")]),t._v(" trait 的话，编译器可以解引用的只有 "),a("code",[t._v("&")]),t._v(" 引用类型；有了 "),a("code",[t._v("Deref")]),t._v(" trait 之后，对任何实现 "),a("code",[t._v("Deref")]),t._v(" trait 的类型，编译器都能（通过解引用的形式）从其获取一个值。只要调用这个类型的 "),a("code",[t._v("deref")]),t._v(" 方法，编译器就可以得到一个 "),a("code",[t._v("&")]),t._v(" 引用，再对 "),a("code",[t._v("&")]),t._v(" 引用进行解引用对它来说就是熟悉的操作了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当我们在示例 15-11 中输入 "),s("code",[this._v("*y")]),this._v(" 时，Rust 事实上在底层运行了如下代码：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("*(y.deref())\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("Rust 将 "),a("code",[t._v("*")]),t._v(" 运算符替换为先调用 "),a("code",[t._v("deref")]),t._v(" 方法再进行直接引用的操作，如此我们便不用担心是不是还需要手动调用 "),a("code",[t._v("deref")]),t._v(" 方法了。Rust 的这个特性可以让我们写出行为一致的代码，无论是面对的是常规引用还是实现了 "),a("code",[t._v("Deref")]),t._v(" 的类型。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("deref")]),t._v(" 方法返回值的引用，以及 "),a("code",[t._v("*(y.deref())")]),t._v(" 括号外边的普通解引用仍为必须的原因在于所有权。如果 "),a("code",[t._v("deref")]),t._v(" 方法直接返回值而不是值的引用，其值（的所有权）将被移出 "),a("code",[t._v("self")]),t._v("。在这里以及大部分使用解引用运算符的情况下我们并不希望获取 "),a("code",[t._v("MyBox<T>")]),t._v(" 内部值的所有权。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("注意，每次当我们在代码中使用 "),a("code",[t._v("*")]),t._v(" 时， "),a("code",[t._v("*")]),t._v(" 运算符都被替换成了先调用 "),a("code",[t._v("deref")]),t._v(" 方法再接着使用 "),a("code",[t._v("*")]),t._v(" 解引用的操作，且只会发生一次，不会对 "),a("code",[t._v("*")]),t._v(" 操作符无限递归替换，解引用出上面 "),a("code",[t._v("i32")]),t._v(" 类型的值就停止了，这个值与示例 15-11 中 "),a("code",[t._v("assert_eq!")]),t._v(" 的 "),a("code",[t._v("5")]),t._v(" 相匹配。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"函数和方法的隐式解引用强制多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数和方法的隐式解引用强制多态","aria-hidden":"true"}},[this._v("#")]),this._v(" 函数和方法的隐式解引用强制多态")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("strong",[t._v("解引用强制多态")]),t._v("（"),a("em",[t._v("deref coercions")]),t._v("）是 Rust 表现在函数或方法传参上的一种便利。其将实现了 "),a("code",[t._v("Deref")]),t._v(" 的类型的引用转换为原始类型通过 "),a("code",[t._v("Deref")]),t._v(" 所能够转换的类型的引用。当这种特定类型的引用作为实参传递给和形参类型不同的函数或方法时，解引用强制多态将自动发生。这时会有一系列的 "),a("code",[t._v("deref")]),t._v(" 方法被调用，把我们提供的类型转换成了参数所需的类型。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("解引用强制多态的加入使得 Rust 程序员编写函数和方法调用时无需增加过多显式使用 "),s("code",[this._v("&")]),this._v(" 和 "),s("code",[this._v("*")]),this._v(" 的引用和解引用。这个功能也使得我们可以编写更多同时作用于引用或智能指针的代码。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("作为展示解引用强制多态的实例，让我们使用示例 15-10 中定义的 "),s("code",[this._v("MyBox<T>")]),this._v("，以及示例 15-12 中增加的 "),s("code",[this._v("Deref")]),this._v(" 实现。示例 15-13 展示了一个有着字符串 slice 参数的函数定义：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("hello")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Hello, {}!"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 15-13："),s("code",[this._v("hello")]),this._v(" 函数有着 "),s("code",[this._v("&str")]),this._v(" 类型的参数 "),s("code",[this._v("name")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以使用字符串 slice 作为参数调用 "),a("code",[t._v("hello")]),t._v(" 函数，比如 "),a("code",[t._v('hello("Rust");')]),t._v("。解引用强制多态使得用 "),a("code",[t._v("MyBox<String>")]),t._v(" 类型值的引用调用 "),a("code",[t._v("hello")]),t._v(" 成为可能，如示例 15-14 所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[t._v("# "),a("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("ops"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Deref"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" MyBox"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" MyBox"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("new")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" MyBox"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#         "),a("span",{attrs:{class:"token function"}},[t._v("MyBox")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n#     "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" Deref "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" MyBox"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),a("span",{attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Target "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" T"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n#     "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("deref")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("T "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#         "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n#     "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("hello")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Hello, {}!"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("main")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" m "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" MyBox"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("new")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Rust"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("hello")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("m"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 15-14：因为解引用强制多态，使用 "),s("code",[this._v("MyBox<String>")]),this._v(" 的引用调用 "),s("code",[this._v("hello")]),this._v(" 是可行的")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这里使用 "),a("code",[t._v("&m")]),t._v(" 调用 "),a("code",[t._v("hello")]),t._v(" 函数，其为 "),a("code",[t._v("MyBox<String>")]),t._v(" 值的引用。因为示例 15-12 中在 "),a("code",[t._v("MyBox<T>")]),t._v(" 上实现了 "),a("code",[t._v("Deref")]),t._v(" trait，Rust 可以通过 "),a("code",[t._v("deref")]),t._v(" 调用将 "),a("code",[t._v("&MyBox<String>")]),t._v(" 变为 "),a("code",[t._v("&String")]),t._v("。标准库中提供了 "),a("code",[t._v("String")]),t._v(" 上的 "),a("code",[t._v("Deref")]),t._v(" 实现，其会返回字符串 slice，这可以在 "),a("code",[t._v("Deref")]),t._v(" 的 API 文档中看到。Rust 再次调用 "),a("code",[t._v("deref")]),t._v(" 将 "),a("code",[t._v("&String")]),t._v(" 变为 "),a("code",[t._v("&str")]),t._v("，这就符合 "),a("code",[t._v("hello")]),t._v(" 函数的定义了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果 Rust 没有实现解引用强制多态，为了使用 "),s("code",[this._v("&MyBox<String>")]),this._v(" 类型的值调用 "),s("code",[this._v("hello")]),this._v("，则不得不编写示例 15-15 中的代码来代替示例 15-14：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[t._v("# "),a("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("ops"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Deref"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" MyBox"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" MyBox"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("new")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" MyBox"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#         "),a("span",{attrs:{class:"token function"}},[t._v("MyBox")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n#     "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" Deref "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" MyBox"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),a("span",{attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Target "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" T"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n#     "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("deref")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("T "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#         "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n#     "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("hello")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Hello, {}!"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("main")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" m "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" MyBox"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("new")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Rust"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("hello")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("m"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 15-15：如果 Rust 没有解引用强制多态则必须编写的代码")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("(*m)")]),t._v(" 将 "),a("code",[t._v("MyBox<String>")]),t._v(" 解引用为 "),a("code",[t._v("String")]),t._v("。接着 "),a("code",[t._v("&")]),t._v(" 和 "),a("code",[t._v("[..]")]),t._v(" 获取了整个 "),a("code",[t._v("String")]),t._v(" 的字符串 slice 来匹配 "),a("code",[t._v("hello")]),t._v(" 的签名。没有解引用强制多态所有这些符号混在一起将更难以读写和理解。解引用强制多态使得 Rust 自动的帮我们处理这些转换。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当所涉及到的类型定义了 "),s("code",[this._v("Deref")]),this._v(" trait，Rust 会分析这些类型并使用任意多次 "),s("code",[this._v("Deref::deref")]),this._v(" 调用以获得匹配参数的类型。这些解析都发生在编译时，所以利用解引用强制多态并没有运行时惩罚！")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"解引用强制多态如何与可变性交互"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解引用强制多态如何与可变性交互","aria-hidden":"true"}},[this._v("#")]),this._v(" 解引用强制多态如何与可变性交互")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("类似于如何使用 "),a("code",[t._v("Deref")]),t._v(" trait 重载不可变引用的 "),a("code",[t._v("*")]),t._v(" 运算符，Rust 提供了 "),a("code",[t._v("DerefMut")]),t._v(" trait 用于重载可变引用的 "),a("code",[t._v("*")]),t._v(" 运算符。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("当 "),a("code",[t._v("T: Deref<Target=U>")]),t._v(" 时从 "),a("code",[t._v("&T")]),t._v(" 到 "),a("code",[t._v("&U")]),t._v("。")]),t._v(" "),a("li",[t._v("当 "),a("code",[t._v("T: DerefMut<Target=U>")]),t._v(" 时从 "),a("code",[t._v("&mut T")]),t._v(" 到 "),a("code",[t._v("&mut U")]),t._v("。")]),t._v(" "),a("li",[t._v("当 "),a("code",[t._v("T: Deref<Target=U>")]),t._v(" 时从 "),a("code",[t._v("&mut T")]),t._v(" 到 "),a("code",[t._v("&U")]),t._v("。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("头两个情况除了可变性之外是相同的：第一种情况表明如果有一个 "),a("code",[t._v("&T")]),t._v("，而 "),a("code",[t._v("T")]),t._v(" 实现了返回 "),a("code",[t._v("U")]),t._v(" 类型的 "),a("code",[t._v("Deref")]),t._v("，则可以直接得到 "),a("code",[t._v("&U")]),t._v("。第二种情况表明对于可变引用也有着相同的行为。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后一个情况有些微妙：Rust 也会将可变引用强转为不可变引用。但是反之是 "),s("strong",[this._v("不可能")]),this._v(" 的：不可变引用永远也不能强转为可变引用。因为根据借用规则，如果有一个可变引用，其必须是这些数据的唯一引用（否则程序将无法编译）。将一个可变引用转换为不可变引用永远也不会打破借用规则。将不可变引用转换为可变引用则需要数据只能有一个不可变引用，而借用规则无法保证这一点。因此，Rust 无法假设将不可变引用转换为可变引用是可能的。")])}],!1,null,null,null);e.options.__file="ch15-02-deref.md";s.default=e.exports}}]);