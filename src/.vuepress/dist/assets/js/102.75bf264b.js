(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{168:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/second-edition/src/ch19-05-advanced-functions-and-closures.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch19-05-advanced-functions-and-closures.md"),n("OutboundLink")],1),t._v(" "),n("br"),t._v("\ncommit 509cb42ece610bdac8eaad26d57fb604dc078623")])]),t._v(" "),n("p",[t._v("最后我们将探索一些有关函数和闭包的高级功能：函数指针以及返回值闭包。")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._m(12),t._v(" "),t._m(13),t._m(14),t._v(" "),n("p",[t._v("一些人倾向于函数风格，一些人喜欢闭包。这两种形式最终都会产生同样的代码，所以请使用对你来说更明白的形式吧。")]),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),n("p",[t._v("这段代码尝试直接返回闭包，它并不能编译：")]),t._v(" "),t._m(17),n("p",[t._v("编译器给出的错误是：")]),t._v(" "),t._m(18),t._m(19),t._v(" "),t._m(20),n("p",[t._v("这段代码正好可以编译。关于 trait 对象的更多内容，请回顾第十七章的 “为使用不同类型的值而设计的 trait 对象” 部分。")]),t._v(" "),t._m(21),t._v(" "),n("p",[t._v("好的！现在我们学习了 Rust 并不常用但在特定情况下你可能用得着的功能。我们介绍了很多复杂的主题，这样若你在错误信息提示或阅读他人代码时遇到他们，至少可以说之前已经见过这些概念和语法了。你可以使用本章作为一个解决方案的参考。")]),t._v(" "),n("p",[t._v("接下来，我们将再开始一个项目，将本书所学的所有内容付与实践！")])])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"高级函数与闭包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高级函数与闭包","aria-hidden":"true"}},[this._v("#")]),this._v(" 高级函数与闭包")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"函数指针"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数指针","aria-hidden":"true"}},[this._v("#")]),this._v(" 函数指针")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("我们讨论过了如何向函数传递闭包；也可以向函数传递常规函数！这在我们希望传递已经定义的函数而不是重新定义闭包作为参数是很有用。通过函数指针允许我们使用函数作为另一个函数的参数。函数的类型是 "),n("code",[t._v("fn")]),t._v(" （使用小写的 “f” ）以免与 "),n("code",[t._v("Fn")]),t._v(" 闭包 trait 相混淆。"),n("code",[t._v("fn")]),t._v(" 被称为"),n("strong",[t._v("函数指针")]),t._v("（"),n("em",[t._v("function pointer")]),t._v("）。指定参数为函数指针的语法类似于闭包，如示例 19-34 所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("add_one")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" i32 "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("do_twice")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" i32 "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("f")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("f")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" answer "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("do_twice")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("add_one"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("5")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"The answer is: {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" answer"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 19-35: 使用 "),s("code",[this._v("fn")]),this._v(" 类型接受函数指针作为参数")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这会打印出 "),n("code",[t._v("The answer is: 12")]),t._v("。"),n("code",[t._v("do_twice")]),t._v(" 中的 "),n("code",[t._v("f")]),t._v(" 被指定为一个接受一个 "),n("code",[t._v("i32")]),t._v(" 参数并返回 "),n("code",[t._v("i32")]),t._v(" 的 "),n("code",[t._v("fn")]),t._v("。接着就可以在 "),n("code",[t._v("do_twice")]),t._v(" 函数体中调用 "),n("code",[t._v("f")]),t._v("。在  "),n("code",[t._v("main")]),t._v(" 中，可以将函数名 "),n("code",[t._v("add_one")]),t._v(" 作为第一个参数传递给 "),n("code",[t._v("do_twice")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("不同于闭包，"),s("code",[this._v("fn")]),this._v(" 是一个类型而不是一个 trait，所以直接指定 "),s("code",[this._v("fn")]),this._v(" 作为参数而不是声明一个带有 "),s("code",[this._v("Fn")]),this._v(" 作为 trait bound 的泛型参数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("函数指针实现了所有三个闭包 trait（"),s("code",[this._v("Fn")]),this._v("、"),s("code",[this._v("FnMut")]),this._v(" 和 "),s("code",[this._v("FnOnce")]),this._v("），所以总是可以在调用期望闭包的函数时传递函数指针作为参数。倾向于编写使用泛型和闭包 trait 的函数，这样它就能接受函数或闭包作为参数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("一个只期望接受 "),s("code",[this._v("fn")]),this._v(" 而不接受闭包的情况的例子是与不存在闭包的外部代码交互时：C 语言的函数可以接受函数作为参数，但没有闭包。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("作为一个既可以使用内联定义的闭包又可以使用命名函数的例子，让我们看看一个 "),s("code",[this._v("map")]),this._v(" 的应用。使用 "),s("code",[this._v("map")]),this._v(" 函数将一个数字 vector 转换为一个字符串 vector，就可以使用闭包，比如这样：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" list_of_numbers "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("vec!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" list_of_strings"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Vec"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("String"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" list_of_numbers\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("iter")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("map")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v("i"),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" i"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("to_string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("collect")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("或者可以将函数作为 "),s("code",[this._v("map")]),this._v(" 的参数来代替闭包，像是这样：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" list_of_numbers "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("vec!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" list_of_strings"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Vec"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("String"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" list_of_numbers\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("iter")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("map")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ToString"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("to_string"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("collect")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("注意这里必须使用 “高级 trait” 部分讲到的完全限定语法，因为存在多个叫做 "),n("code",[t._v("to_string")]),t._v(" 的函数；这里使用了定义于 "),n("code",[t._v("ToString")]),t._v(" trait 的 "),n("code",[t._v("to_string")]),t._v(" 函数，标准库为所有实现了 "),n("code",[t._v("Display")]),t._v(" 的类型实现了这个 trait。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"返回闭包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#返回闭包","aria-hidden":"true"}},[this._v("#")]),this._v(" 返回闭包")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("闭包表现为 trait，这意味着不能直接返回闭包。对于大部分需要返回 trait 的情况，可以使用实现了期望返回的 trait 的具体类型来替代函数的返回值。但是这不能用于闭包，因为他们没有一个可返回的具体类型；例如不允许使用函数指针 "),s("code",[this._v("fn")]),this._v(" 作为返回值类型。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("fn returns_closure() -> Fn(i32) -> i32 {\n    |x| x + 1\n}\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("error[E0277]: the trait bound `std::ops::Fn(i32) -> i32 + 'static:\nstd::marker::Sized` is not satisfied\n --\x3e\n  |\n1 | fn returns_closure() -> Fn(i32) -> i32 {\n  |                         ^^^^^^^^^^^^^^ `std::ops::Fn(i32) -> i32 + 'static`\n  does not have a constant size known at compile-time\n  |\n  = help: the trait `std::marker::Sized` is not implemented for\n  `std::ops::Fn(i32) -> i32 + 'static`\n  = note: the return type of a function must have a statically known size\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("错误又一次指向了 "),s("code",[this._v("Sized")]),this._v(" trait！Rust 并不知道需要多少空间来储存闭包。不过我们在上一部分见过这种情况的解决办法：可以使用 trait 对象：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("returns_closure")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Box"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),n("span",{attrs:{class:"token function"}},[t._v("Fn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" i32"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Box"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("new")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v("x"),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" x "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结")])}],!1,null,null,null);e.options.__file="ch19-05-advanced-functions-and-closures.md";s.default=e.exports}}]);