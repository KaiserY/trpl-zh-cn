(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{225:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch08-02-strings.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch08-02-strings.md"),a("OutboundLink")],1),t._v(" "),a("br"),t._v("\ncommit a86c1d315789b3ca13b20d50ad5005c62bdd9e37")])]),t._v(" "),a("p",[t._v("第四章已经讲过一些字符串的内容，不过现在让我们更深入地了解它。字符串是新晋 Rustacean 们通常会被困住的领域，这是由于三方面理由的结合：Rust 倾向于确保暴露出可能的错误，字符串是比很多程序员所想象的要更为复杂的数据结构，以及 UTF-8。所有这些要素结合起来对于来自其他语言背景的程序员就可能显得很困难了。")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._m(16),t._v(" "),t._m(17),t._v(" "),a("p",[t._v("记住字符串是 UTF-8 编码的，所以可以包含任何可以正确编码的数据，如示例 8-14 所示。")]),t._v(" "),t._m(18),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),t._m(41),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44),t._v(" "),t._m(45),t._v(" "),t._m(46),t._m(47),t._v(" "),t._m(48),t._m(49),t._v(" "),t._m(50),t._v(" "),t._m(51),t._v(" "),t._m(52),t._m(53),t._v(" "),a("p",[t._v("会导致如下错误：")]),t._v(" "),t._m(54),a("p",[t._v("错误和提示说明了全部问题：Rust 的字符串不支持索引。那么接下来的问题是，为什么不支持呢？为了回答这个问题，我们必须先聊一聊 Rust 是如何在内存中储存字符串的。")]),t._v(" "),t._m(55),t._v(" "),t._m(56),t._v(" "),t._m(57),t._m(58),t._v(" "),t._m(59),a("p",[t._v("当问及这个字符是多长的时候有人可能会说是 12。然而，Rust 的回答是 24。这是使用 UTF-8 编码 “Здравствуйте” 所需要的字节数，这是因为每个 Unicode 标量值需要两个字节存储。因此一个字符串字节值的索引并不总是对应一个有效的 Unicode 标量值。作为演示，考虑如下无效的 Rust 代码：")]),t._v(" "),t._m(60),t._m(61),t._v(" "),t._m(62),t._v(" "),t._m(63),t._v(" "),t._m(64),t._v(" "),t._m(65),t._m(66),t._v(" "),t._m(67),t._m(68),t._v(" "),t._m(69),a("p",[t._v("Rust 提供了多种不同的方式来解释计算机储存的原始字符串数据，这样程序就可以选择它需要的表现方式，而无所谓是何种人类语言。")]),t._v(" "),t._m(70),t._v(" "),t._m(71),t._v(" "),t._m(72),t._v(" "),t._m(73),t._m(74),t._v(" "),t._m(75),t._v(" "),t._m(76),a("p",[t._v("你应该小心谨慎的使用这个操作，因为这么做可能会使你的程序崩溃。")]),t._v(" "),t._m(77),t._v(" "),a("p",[t._v("幸运的是，这里还有其他获取字符串元素的方式。")]),t._v(" "),t._m(78),t._v(" "),t._m(79),a("p",[t._v("这些代码会打印出如下内容：")]),t._v(" "),t._m(80),t._m(81),t._v(" "),t._m(82),t._m(83),t._v(" "),t._m(84),a("p",[t._v("不过请记住有效的 Unicode 标量值可能会由不止一个字节组成。")]),t._v(" "),a("p",[t._v("从字符串中获取字形簇是很复杂的，所以标准库并没有提供这个功能。"),a("a",{attrs:{href:"https://crates.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("crates.io"),a("OutboundLink")],1),t._v(" 上有些提供这样功能的 crate。")]),t._v(" "),t._m(85),t._v(" "),t._m(86),t._v(" "),a("p",[t._v("现在让我们转向一些不太复杂的集合：哈希 map！")])])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"使用字符串存储-utf-8-编码的文本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用字符串存储-utf-8-编码的文本","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用字符串存储 UTF-8 编码的文本")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在集合章节中讨论字符串的原因是，字符串就是作为字节的集合外加一些方法实现的，当这些字节被解释为文本时，这些方法提供了实用的功能。在这一部分，我们会讲到 "),a("code",[t._v("String")]),t._v(" 中那些任何集合类型都有的操作，比如创建、更新和读取。也会讨论 "),a("code",[t._v("String")]),t._v(" 与其他集合不一样的地方，例如索引"),a("code",[t._v("String")]),t._v(" 是很复杂的，由于人和计算机理解 "),a("code",[t._v("String")]),t._v(" 数据方式的不同。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"什么是字符串？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是字符串？","aria-hidden":"true"}},[this._v("#")]),this._v(" 什么是字符串？")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在开始深入这些方面之前，我们需要讨论一下术语 "),a("strong",[t._v("字符串")]),t._v(" 的具体意义。Rust 的核心语言中只有一种字符串类型："),a("code",[t._v("str")]),t._v("，字符串 slice，它通常以被借用的形式出现，"),a("code",[t._v("&str")]),t._v("。第四章讲到了 "),a("strong",[t._v("字符串 slice")]),t._v("：它们是一些储存在别处的 UTF-8 编码字符串数据的引用。比如字符串字面值被储存在程序的二进制输出中，字符串 slice 也是如此。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("称作 "),a("code",[t._v("String")]),t._v(" 的类型是由标准库提供的，而没有写进核心语言部分，它是可增长的、可变的、有所有权的、UTF-8 编码的字符串类型。当 Rustacean 们谈到 Rust 的 “字符串”时，它们通常指的是 "),a("code",[t._v("String")]),t._v(" 和字符串 slice "),a("code",[t._v("&str")]),t._v(" 类型，而不仅仅是其中之一。虽然本部分内容大多是关于 "),a("code",[t._v("String")]),t._v(" 的，不过这两个类型在 Rust 标准库中都被广泛使用，"),a("code",[t._v("String")]),t._v(" 和字符串 slice 都是 UTF-8 编码的。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("Rust 标准库中还包含一系列其他字符串类型，比如 "),a("code",[t._v("OsString")]),t._v("、"),a("code",[t._v("OsStr")]),t._v("、"),a("code",[t._v("CString")]),t._v(" 和 "),a("code",[t._v("CStr")]),t._v("。相关库 crate 甚至会提供更多储存字符串数据的选择。看到这些由 "),a("code",[t._v("String")]),t._v(" 或是 "),a("code",[t._v("Str")]),t._v(" 结尾的名字了吗？这对应着它们提供的所有权和可借用的字符串变体，就像是你之前看到的 "),a("code",[t._v("String")]),t._v(" 和 "),a("code",[t._v("str")]),t._v("。举例而言，这些字符串类型能够以不同的编码或内存表现形式上以不同的形式存储文本内容。本章将不会讨论其他这些字符串类型，查看 API 文档来更多的了解如何使用它们以及各自适合的场景。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"新建字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#新建字符串","aria-hidden":"true"}},[this._v("#")]),this._v(" 新建字符串")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("很多 "),s("code",[this._v("Vec")]),this._v(" 可用的操作在 "),s("code",[this._v("String")]),this._v(" 中同样可用，从以 "),s("code",[this._v("new")]),this._v(" 函数创建字符串开始，如示例 8-11 所示。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("new")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 8-11：新建一个空的 "),s("code",[this._v("String")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这新建了一个叫做 "),s("code",[this._v("s")]),this._v(" 的空的字符串，接着我们可以向其中装载数据。通常字符串会有初始数据，因为我们希望一开始就有这个字符串。为此，可以使用 "),s("code",[this._v("to_string")]),this._v(" 方法，它能用于任何实现了 "),s("code",[this._v("Display")]),this._v(" trait 的类型，字符串字面值也实现了它。示例 8-12 展示了两个例子。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" data "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"initial contents"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" data"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("to_string")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 该方法也可直接用于字符串字面值：")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"initial contents"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("to_string")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 8-12：使用 "),s("code",[this._v("to_string")]),this._v(" 方法从字符串字面值创建 "),s("code",[this._v("String")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这些代码会创建包含 "),s("code",[this._v("initial contents")]),this._v(" 的字符串。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("也可以使用 "),s("code",[this._v("String::from")]),this._v(" 函数来从字符串字面值创建 "),s("code",[this._v("String")]),this._v("。示例 8-13 中的代码代码等同于使用 "),s("code",[this._v("to_string")]),this._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"initial contents"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 8-13：使用 "),s("code",[this._v("String::from")]),this._v(" 函数从字符串字面值创建 "),s("code",[this._v("String")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("因为字符串应用广泛，这里有很多不同的用于字符串的通用 API 可供选择。它们有些可能显得有些多余，不过都有其用武之地！在这个例子中，"),s("code",[this._v("String::from")]),this._v(" 和 "),s("code",[this._v(".to_string")]),this._v(" 最终做了完全相同的工作，所以如何选择就是风格问题了。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" hello "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"السلام عليكم"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" hello "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Dobrý den"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" hello "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Hello"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" hello "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"שָׁלוֹם"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" hello "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"नमस्ते"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" hello "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"こんにちは"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" hello "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"안녕하세요"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" hello "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"你好"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" hello "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Olá"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" hello "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Здравствуйте"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" hello "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Hola"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 8-14：在字符串中储存不同语言的问候语")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所有这些都是有效的 "),s("code",[this._v("String")]),this._v(" 值。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"更新字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新字符串","aria-hidden":"true"}},[this._v("#")]),this._v(" 更新字符串")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("String")]),t._v(" 的大小可以增长其内容也可以改变，就像可以放入更多数据来改变 "),a("code",[t._v("Vec")]),t._v(" 的内容一样。另外，可以方便的使用 "),a("code",[t._v("+")]),t._v(" 运算符或 "),a("code",[t._v("format!")]),t._v(" 宏来拼接 "),a("code",[t._v("String")]),t._v(" 值。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"使用-push-str-和-push-附加字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-push-str-和-push-附加字符串","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用 "),s("code",[this._v("push_str")]),this._v(" 和 "),s("code",[this._v("push")]),this._v(" 附加字符串")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以通过 "),s("code",[this._v("push_str")]),this._v(" 方法来附加字符串 slice，从而使 "),s("code",[this._v("String")]),this._v(" 变长，如示例 8-15 所示。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"foo"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push_str")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"bar"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 8-15：使用 "),s("code",[this._v("push_str")]),this._v(" 方法向 "),s("code",[this._v("String")]),this._v(" 附加字符串 slice")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("执行这两行代码之后 "),a("code",[t._v("s")]),t._v(" 将会包含 "),a("code",[t._v("foobar")]),t._v("。"),a("code",[t._v("push_str")]),t._v(" 方法获取字符串 slice，因为我们并不需要获取参数的所有权。例如，示例 8-16 展示了如果将 "),a("code",[t._v("s2")]),t._v(" 的内容附加到 "),a("code",[t._v("s1")]),t._v(" 中后自身不能被使用就糟糕了。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" s1 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"foo"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s2 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"bar"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns1"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push_str")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s2"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"s2 is {}"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s2"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 8-16：将字符串 slice 的内容附加到 "),s("code",[this._v("String")]),this._v(" 后使用它")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果 "),s("code",[this._v("push_str")]),this._v(" 方法获取了 "),s("code",[this._v("s2")]),this._v(" 的所有权，就不能在最后一行打印出其值了。好在代码如我们期望那样工作！")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("push")]),t._v(" 方法被定义为获取一个单独的字符作为参数，并附加到 "),a("code",[t._v("String")]),t._v(" 中。示例 8-17 展示了使用 "),a("code",[t._v("push")]),t._v(" 方法将字母 "),a("em",[t._v("l")]),t._v(" 加入 "),a("code",[t._v("String")]),t._v(" 的代码。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"lo"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token char string"}},[t._v("'l'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 8-17：使用 "),s("code",[this._v("push")]),this._v(" 将一个字符加入 "),s("code",[this._v("String")]),this._v(" 值中")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("执行这些代码之后，"),s("code",[this._v("s")]),this._v(" 将会包含 “lol”。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"使用-运算符或-format-宏拼接字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-运算符或-format-宏拼接字符串","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用 "),s("code",[this._v("+")]),this._v(" 运算符或 "),s("code",[this._v("format!")]),this._v(" 宏拼接字符串")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("通常你会希望将两个已知的字符串合并在一起。一种办法是像这样使用 "),s("code",[this._v("+")]),this._v(" 运算符，如示例 8-18 所示。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s1 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Hello, "')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s2 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"world!"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s3 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" s1 "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("s2"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 注意 s1 被移动了，不能继续使用")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 8-18：使用 "),s("code",[this._v("+")]),this._v(" 运算符将两个 "),s("code",[this._v("String")]),this._v(" 值合并到一个新的 "),s("code",[this._v("String")]),this._v(" 值中")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("执行完这些代码之后字符串 "),a("code",[t._v("s3")]),t._v(" 将会包含 "),a("code",[t._v("Hello, world!")]),t._v("。"),a("code",[t._v("s1")]),t._v(" 在相加后不再有效的原因，和使用 "),a("code",[t._v("s2")]),t._v(" 的引用的原因与使用 "),a("code",[t._v("+")]),t._v(" 运算符时调用的方法签名有关，这个函数签名看起来像这样：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("fn add(self, s: &str) -> String {\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这并不是标准库中实际的签名；标准库中的 "),a("code",[t._v("add")]),t._v(" 使用泛型定义。这里我们看到的 "),a("code",[t._v("add")]),t._v(" 的签名使用具体类型代替了泛型，这也正是当使用 "),a("code",[t._v("String")]),t._v(" 值调用这个方法会发生的。第十章会讨论泛型。这个签名提供了理解 "),a("code",[t._v("+")]),t._v(" 运算那微妙部分的线索。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("首先，"),a("code",[t._v("s2")]),t._v(" 使用了 "),a("code",[t._v("&")]),t._v("，意味着我们使用第二个字符串的 "),a("strong",[t._v("引用")]),t._v(" 与第一个字符串相加。这是因为 "),a("code",[t._v("add")]),t._v(" 函数的 "),a("code",[t._v("s")]),t._v(" 参数：只能将 "),a("code",[t._v("&str")]),t._v(" 和 "),a("code",[t._v("String")]),t._v(" 相加，不能将两个 "),a("code",[t._v("String")]),t._v(" 值相加。不过等一下 —— 正如 "),a("code",[t._v("add")]),t._v(" 的第二个参数所指定的，"),a("code",[t._v("&s2")]),t._v(" 的类型是 "),a("code",[t._v("&String")]),t._v(" 而不是 "),a("code",[t._v("&str")]),t._v("。那么为什么示例 8-18 还能编译呢？")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("之所以能够在 "),a("code",[t._v("add")]),t._v(" 调用中使用 "),a("code",[t._v("&s2")]),t._v(" 是因为 "),a("code",[t._v("&String")]),t._v(" 可以被 "),a("strong",[t._v("强转")]),t._v("（"),a("em",[t._v("coerced")]),t._v("）成 "),a("code",[t._v("&str")]),t._v("。当"),a("code",[t._v("add")]),t._v("函数被调用时，Rust 使用了一个被称为 "),a("strong",[t._v("解引用强制多态")]),t._v("（"),a("em",[t._v("deref coercion")]),t._v("）的技术，你可以将其理解为它把 "),a("code",[t._v("&s2")]),t._v(" 变成了 "),a("code",[t._v("&s2[..]")]),t._v("。第十五章会更深入的讨论解引用强制多态。因为 "),a("code",[t._v("add")]),t._v(" 没有获取参数的所有权，所以 "),a("code",[t._v("s2")]),t._v(" 在这个操作后仍然是有效的 "),a("code",[t._v("String")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("其次，可以发现签名中 "),a("code",[t._v("add")]),t._v(" 获取了 "),a("code",[t._v("self")]),t._v(" 的所有权，因为 "),a("code",[t._v("self")]),t._v(" "),a("strong",[t._v("没有")]),t._v(" 使用 "),a("code",[t._v("&")]),t._v("。这意味着示例 8-18 中的 "),a("code",[t._v("s1")]),t._v(" 的所有权将被移动到 "),a("code",[t._v("add")]),t._v(" 调用中，之后就不再有效。所以虽然 "),a("code",[t._v("let s3 = s1 + &s2;")]),t._v(" 看起来就像它会复制两个字符串并创建一个新的字符串，而实际上这个语句会获取 "),a("code",[t._v("s1")]),t._v(" 的所有权，附加上从 "),a("code",[t._v("s2")]),t._v(" 中拷贝的内容，并返回结果的所有权。换句话说，它看起来好像生成了很多拷贝不过实际上并没有：这个实现比拷贝要更高效。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果想要级联多个字符串，"),s("code",[this._v("+")]),this._v(" 的行为就显得笨重了：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s1 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"tic"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s2 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"tac"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s3 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"toe"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" s1 "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"-"')]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("s2 "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"-"')]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("s3"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这时 "),a("code",[t._v("s")]),t._v(" 的内容会是 “tic-tac-toe”。在有这么多 "),a("code",[t._v("+")]),t._v(" 和 "),a("code",[t._v('"')]),t._v(" 字符的情况下，很难理解具体发生了什么。对于更为复杂的字符串链接，可以使用 "),a("code",[t._v("format!")]),t._v(" 宏：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s1 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"tic"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s2 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"tac"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s3 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"toe"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("format!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"{}-{}-{}"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s1"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s2"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s3"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这些代码也会将 "),a("code",[t._v("s")]),t._v(" 设置为 “tic-tac-toe”。"),a("code",[t._v("format!")]),t._v(" 与 "),a("code",[t._v("println!")]),t._v(" 的工作原理相同，不过不同于将输出打印到屏幕上，它返回一个带有结果内容的 "),a("code",[t._v("String")]),t._v("。这个版本就好理解的多，并且不会获取任何参数的所有权。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"索引字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#索引字符串","aria-hidden":"true"}},[this._v("#")]),this._v(" 索引字符串")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在很多语言中，通过索引来引用字符串中的单独字符是有效且常见的操作。然而在 Rust 中，如果你尝试使用索引语法访问 "),s("code",[this._v("String")]),this._v(" 的一部分，会出现一个错误。考虑一下如示例 8-19 中所示的无效代码。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore,does_not_compile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('let s1 = String::from("hello");\nlet h = s1[0];\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 8-19：尝试对字符串使用索引语法")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("error[E0277]: the trait bound `std::string::String: std::ops::Index<{integer}>` is not satisfied\n --\x3e\n  |\n3 |     let h = s1[0];\n  |             ^^^^^ the type `std::string::String` cannot be indexed by `{integer}`\n  |\n  = help: the trait `std::ops::Index<{integer}>` is not implemented for `std::string::String`\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"内部表现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部表现","aria-hidden":"true"}},[this._v("#")]),this._v(" 内部表现")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("String")]),this._v(" 是一个 "),s("code",[this._v("Vec<u8>")]),this._v(" 的封装。让我们看看之前一些正确编码的字符串的例子。首先是这一个：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" len "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Hola"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("len")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在这里，"),s("code",[this._v("len")]),this._v(" 的值是 4 ，这意味着储存字符串 “Hola” 的 "),s("code",[this._v("Vec")]),this._v(" 的长度是四个字节：这里每一个字母的 UTF-8 编码都占用一个字节。那下面这个例子又如何呢？（注意这个字符串中的首字母是西里尔字母的 Ze 而不是阿拉伯数字 3 。）")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" len "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Здравствуйте"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("len")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore,does_not_compile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('let hello = "Здравствуйте";\nlet answer = &hello[0];\n')])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("answer")]),t._v(" 的值应该是什么呢？它应该是第一个字符 "),a("code",[t._v("З")]),t._v(" 吗？当使用 UTF-8 编码时，"),a("code",[t._v("З")]),t._v(" 的第一个字节 "),a("code",[t._v("208")]),t._v("，第二个是 "),a("code",[t._v("151")]),t._v("，所以 "),a("code",[t._v("answer")]),t._v(" 实际上应该是 "),a("code",[t._v("208")]),t._v("，不过 "),a("code",[t._v("208")]),t._v(" 自身并不是一个有效的字母。返回 "),a("code",[t._v("208")]),t._v(" 可不是一个请求字符串第一个字母的人所希望看到的，不过它是 Rust 在字节索引 0 位置所能提供的唯一数据。用户通常不会想要一个字节值被返回，即便这个字符串只有拉丁字母： 即便 "),a("code",[t._v('&"hello"[0]')]),t._v(" 是返回字节值的有效代码，它也应当返回 "),a("code",[t._v("104")]),t._v(" 而不是 "),a("code",[t._v("h")]),t._v("。为了避免返回意想不到值并造成不能立刻发现的 bug。Rust 选择不编译这些代码并及早杜绝了误会的发生。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"字节、标量值和字形簇！天呐！"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字节、标量值和字形簇！天呐！","aria-hidden":"true"}},[this._v("#")]),this._v(" 字节、标量值和字形簇！天呐！")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这引起了关于 UTF-8 的另外一个问题：从 Rust 的角度来讲，事实上有三种相关方式可以理解字符串：字节、标量值和字形簇（最接近人们眼中 "),s("strong",[this._v("字母")]),this._v(" 的概念）。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("比如这个用梵文书写的印度语单词 “नमस्ते”，最终它储存在 vector 中的 "),s("code",[this._v("u8")]),this._v(" 值看起来像这样：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("[224, 164, 168, 224, 164, 174, 224, 164, 184, 224, 165, 141, 224, 164, 164,\n224, 165, 135]\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里有 18 个字节，也就是计算机最终会储存的数据。如果从 Unicode 标量值的角度理解它们，也就像 Rust 的 "),s("code",[this._v("char")]),this._v(" 类型那样，这些字节看起来像这样：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("['न', 'म', 'स', '्', 'त', 'े']\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里有六个 "),s("code",[this._v("char")]),this._v("，不过第四个和第六个都不是字母，它们是发音符号本身并没有任何意义。最后，如果以字形簇的角度理解，就会得到人们所说的构成这个单词的四个字母：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('["न", "म", "स्", "ते"]\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后一个 Rust 不允许使用索引获取 "),s("code",[this._v("String")]),this._v(" 字符的原因是索引操作预期总是需要常数时间 (O(1))。但是对于 "),s("code",[this._v("String")]),this._v(" 不可能保证这样的性能，因为 Rust 不得不检查从字符串的开头到索引位置的内容来确定这里有多少有效的字符。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"字符串-slice"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串-slice","aria-hidden":"true"}},[this._v("#")]),this._v(" 字符串 slice")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("索引字符串通常是一个坏点子，因为字符串索引应该返回的类型是不明确的：字节值、字符、字形簇或者字符串 slice。因此，如果你真的希望使用索引创建字符串 slice 时 Rust 会要求你更明确一些。为了更明确索引并表明你需要一个字符串 slice，相比使用 "),s("code",[this._v("[]")]),this._v(" 和单个值的索引，可以使用 "),s("code",[this._v("[]")]),this._v(" 和一个 range 来创建含特定字节的字符串 slice：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" hello "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"Здравствуйте"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("hello"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里，"),s("code",[this._v("s")]),this._v(" 会是一个 "),s("code",[this._v("&str")]),this._v("，它包含字符串的头四个字节。早些时候，我们提到了这些字母都是两个字节长的，所以这意味着 "),s("code",[this._v("s")]),this._v(" 将会是 “Зд”。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果获取 "),s("code",[this._v("&hello[0..1]")]),this._v(" 会发生什么呢？答案是：在运行时会 panic，就跟访问 vector 中的无效索引时一样：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("thread 'main' panicked at 'byte index 1 is not a char boundary; it is inside 'З' (bytes 0..2) of `Здравствуйте`', src/libcore/str/mod.rs:2188:4\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"遍历字符串的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#遍历字符串的方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 遍历字符串的方法")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果你需要操作单独的 Unicode 标量值，最好的选择是使用 "),s("code",[this._v("chars")]),this._v(" 方法。对 “नमस्ते” 调用 "),s("code",[this._v("chars")]),this._v(" 方法会将其分开并返回六个 "),s("code",[this._v("char")]),this._v(" 类型的值，接着就可以遍历其结果来访问每一个元素了：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" c "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"नमस्ते"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("chars")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"{}"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("न\nम\nस\n्\nत\nे\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("bytes")]),this._v(" 方法返回每一个原始字节，这可能会适合你的使用场景：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" b "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"नमस्ते"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("bytes")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"{}"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这些代码会打印出组成 "),s("code",[this._v("String")]),this._v(" 的 18 个字节：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("224\n164\n// --snip--\n165\n135\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"字符串并不简单"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串并不简单","aria-hidden":"true"}},[this._v("#")]),this._v(" 字符串并不简单")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("总而言之，字符串还是很复杂的。不同的语言选择了不同的向程序员展示其复杂性的方式。Rust 选择了以准确的方式处理 "),s("code",[this._v("String")]),this._v(" 数据作为所有 Rust 程序的默认行为，这意味着程序员们必须更多的思考如何预先处理 UTF-8 数据。这种权衡取舍相比其他语言更多的暴露出了字符串的复杂性，不过也使你在开发生命周期后期免于处理涉及非 ASCII 字符的错误。")])}],!1,null,null,null);e.options.__file="ch08-02-strings.md";s.default=e.exports}}]);