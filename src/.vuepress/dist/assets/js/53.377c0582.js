(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{217:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch10-02-traits.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch10-02-traits.md"),a("OutboundLink")],1),t._v(" "),a("br"),t._v("\ncommit 1fedfc4b96c2017f64ecfcf41a0a07e2e815f24f")])]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),a("p",[t._v("一个类型的行为由其可供调用的方法构成。如果可以对不同类型调用相同的方法的话，这些类型就可以共享相同的行为了。trait 定义是一种将方法签名组合起来的方法，目的是定义一个实现某些目的所必需的行为的集合。")]),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),a("p",[t._v("trait 体中可以有多个方法：一行一个方法签名且都以分号结尾。")]),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),a("p",[t._v("有时为 trait 中的某些或全部方法提供默认的行为，而不是在每个类型的每个实现中都定义自己的行为是很有用的。这样当为某个特定类型实现 trait 时，可以选择保留或重载每个方法的默认行为。")]),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35),t._m(36),t._v(" "),t._m(37),t._m(38),t._v(" "),t._m(39),t._m(40),t._v(" "),a("p",[t._v("注意无法从相同方法的重载实现中调用默认方法。")]),t._v(" "),t._m(41),t._v(" "),a("p",[t._v("知道了如何定义 trait 和在类型上实现这些 trait 之后，我们可以探索一下如何使用 trait 来接受多种不同类型的参数。")]),t._v(" "),t._m(42),t._v(" "),t._m(43),t._m(44),t._v(" "),t._m(45),t._v(" "),t._m(46),t._v(" "),t._m(47),t._m(48),t._v(" "),t._m(49),t._v(" "),t._m(50),t._m(51),t._v(" "),t._m(52),t._m(53),t._v(" "),t._m(54),t._v(" "),t._m(55),a("p",[t._v("这个语法也适用于泛型的 trait bound：")]),t._v(" "),t._m(56),t._m(57),t._v(" "),t._m(58),t._v(" "),t._m(59),t._m(60),t._v(" "),t._m(61),a("p",[t._v("这个函数签名就显得不那么杂乱，函数名、参数列表和返回值类型都离得很近，看起来类似没有很多 trait bounds 的函数。")]),t._v(" "),t._m(62),t._v(" "),t._m(63),t._v(" "),t._m(64),t._m(65),t._v(" "),t._m(66),t._v(" "),t._m(67),t._v(" "),t._m(68),t._m(69),t._v(" "),t._m(70),t._v(" "),t._m(71),t._v(" "),t._m(72),t._m(73),t._v(" "),t._m(74),a("p",[t._v("但是如果编译代码的话，会出现一些不同的错误：")]),t._v(" "),t._m(75),t._m(76),t._v(" "),t._m(77),t._v(" "),t._m(78),t._v(" "),t._m(79),t._m(80),t._v(" "),t._m(81),t._v(" "),t._m(82),t._v(" "),t._m(83),t._v(" "),t._m(84),t._v(" "),t._m(85),t._m(86),t._v(" "),t._m(87),t._v(" "),t._m(88),t._m(89),t._v(" "),t._m(90),a("p",[t._v("blanket implementation 会出现在 trait 文档的 “Implementers” 部分。")]),t._v(" "),a("p",[t._v("trait 和 trait bound 让我们使用泛型类型参数来减少重复，并仍然能够向编译器明确指定泛型类型需要拥有哪些行为。因为我们向编译器提供了 trait bound 信息，它就可以检查代码中所用到的具体类型是否提供了正确的行为。在动态类型语言中，如果我们尝试调用一个类型并没有实现的方法，会在运行时出现错误。Rust 将这些错误移动到了编译时，甚至在代码能够运行之前就强迫我们修复错误。另外，我们也无需编写运行时检查行为的代码，因为在编译时就已经检查过了，这样相比其他那些不愿放弃泛型灵活性的语言有更好的性能。")]),t._v(" "),t._m(91)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"trait：定义共享的行为"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#trait：定义共享的行为","aria-hidden":"true"}},[this._v("#")]),this._v(" trait：定义共享的行为")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("em",[this._v("trait")]),this._v(" 告诉 Rust 编译器某个特定类型拥有可能与其他类型共享的功能。可以通过 trait 以一种抽象的方式定义共享的行为。可以使用 "),s("em",[this._v("trait bounds")]),this._v(" 指定泛型是任何拥有特定行为的类型。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("注意："),s("em",[this._v("trait")]),this._v(" 类似于其他语言中的常被称为 "),s("strong",[this._v("接口")]),this._v("（"),s("em",[this._v("interfaces")]),this._v("）的功能，虽然有一些不同。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"定义-trait"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义-trait","aria-hidden":"true"}},[this._v("#")]),this._v(" 定义 trait")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("例如，这里有多个存放了不同类型和属性文本的结构体：结构体 "),s("code",[this._v("NewsArticle")]),this._v(" 用于存放发生于世界各地的新闻故事，而结构体 "),s("code",[this._v("Tweet")]),this._v(" 最多只能存放 280 个字符的内容，以及像是否转推或是否是对推友的回复这样的元数据。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们想要创建一个多媒体聚合库用来显示可能储存在 "),a("code",[t._v("NewsArticle")]),t._v(" 或 "),a("code",[t._v("Tweet")]),t._v(" 实例中的数据的总结。每一个结构体都需要的行为是他们是能够被总结的，这样的话就可以调用实例的 "),a("code",[t._v("summarize")]),t._v(" 方法来请求总结。示例 10-12 中展示了一个表现这个概念的 "),a("code",[t._v("Summary")]),t._v(" trait 的定义：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" Summary "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("summarize")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 10-12："),s("code",[this._v("Summarizable")]),this._v(" trait 定义，它包含由 "),s("code",[this._v("summarize")]),this._v(" 方法提供的行为")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里使用 "),s("code",[this._v("trait")]),this._v(" 关键字来声明一个 trait，后面是 trait 的名字，在这个例子中是 "),s("code",[this._v("Summary")]),this._v("。在大括号中声明描述实现这个 trait 的类型所需要的行为的方法签名，在这个例子中是 "),s("code",[this._v("fn summarize(&self) -> String")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在方法签名后跟分号，而不是在大括号中提供其实现。接着每一个实现这个 trait 的类型都需要提供其自定义行为的方法体，编译器也会确保任何实现 "),s("code",[this._v("Summary")]),this._v(" trait 的类型都拥有与这个签名的定义完全一致的 "),s("code",[this._v("summarize")]),this._v(" 方法。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"为类型实现-trait"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为类型实现-trait","aria-hidden":"true"}},[this._v("#")]),this._v(" 为类型实现 trait")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("现在我们定义了 "),a("code",[t._v("Summary")]),t._v(" trait，接着就可以在多媒体聚合库中需要拥有这个行为的类型上实现它了。示例 10-13 中展示了 "),a("code",[t._v("NewsArticle")]),t._v(" 结构体上 "),a("code",[t._v("Summary")]),t._v(" trait 的一个实现，它使用标题、作者和创建的位置作为 "),a("code",[t._v("summarize")]),t._v(" 的返回值。对于 "),a("code",[t._v("Tweet")]),t._v(" 结构体，我们选择将 "),a("code",[t._v("summarize")]),t._v(" 定义为用户名后跟推文的全部文本作为返回值，并假设推文内容已经被限制为 280 字符以内。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[t._v("# "),a("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" Summary "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("summarize")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),a("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" NewsArticle "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" headline"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" location"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" author"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" content"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Summary "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" NewsArticle "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("summarize")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" String "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token function"}},[t._v("format!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"{}, by {} ({})"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("headline"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("author"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("location"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Tweet "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" username"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" content"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" reply"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" bool"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" retweet"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" bool"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Summary "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" Tweet "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("summarize")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" String "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token function"}},[t._v("format!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"{}: {}"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("username"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("content"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 10-13：在 "),s("code",[this._v("NewsArticle")]),this._v(" 和 "),s("code",[this._v("Tweet")]),this._v(" 类型上实现 "),s("code",[this._v("Summary")]),this._v(" trait")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在类型上实现 trait 类似于实现与 trait 无关的方法。区别在于 "),s("code",[this._v("impl")]),this._v(" 关键字之后，我们提供需要实现 trait 的名称，接着是 "),s("code",[this._v("for")]),this._v(" 和需要实现 trait 的类型的名称。在 "),s("code",[this._v("impl")]),this._v(" 块中，使用 trait 定义中的方法签名，不过不再后跟分号，而是需要在大括号中编写函数体来为特定类型实现 trait 方法所拥有的行为。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("一旦实现了 trait，我们就可以用与 "),s("code",[this._v("NewsArticle")]),this._v(" 和 "),s("code",[this._v("Tweet")]),this._v(" 实例的非 trait 方法一样的方式调用 trait 方法了：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('let tweet = Tweet {\n    username: String::from("horse_ebooks"),\n    content: String::from("of course, as you probably already know, people"),\n    reply: false,\n    retweet: false,\n};\n\nprintln!("1 new tweet: {}", tweet.summarize());\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这会打印出 "),s("code",[this._v("1 new tweet: horse_ebooks: of course, as you probably already know, people")]),this._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("注意因为示例 10-13 中我们在相同的 "),a("em",[t._v("lib.rs")]),t._v(" 里定义了 "),a("code",[t._v("Summary")]),t._v(" trait 和 "),a("code",[t._v("NewsArticle")]),t._v(" 与 "),a("code",[t._v("Tweet")]),t._v(" 类型，所以他们是位于同一作用域的。如果这个 "),a("em",[t._v("lib.rs")]),t._v(" 是对应 "),a("code",[t._v("aggregator")]),t._v(" crate 的，而别人想要利用我们 crate 的功能为其自己的库作用域中的结构体实现 "),a("code",[t._v("Summary")]),t._v(" trait。首先他们需要将 trait 引入作用域。这可以通过指定 "),a("code",[t._v("use aggregator::Summary;")]),t._v(" 实现，这样就可以为其类型实现 "),a("code",[t._v("Summary")]),t._v(" trait 了。"),a("code",[t._v("Summary")]),t._v(" 还必须是公有 trait 使得其他 crate 可以实现它，这也是为什么实例 10-12 中将 "),a("code",[t._v("pub")]),t._v(" 置于 "),a("code",[t._v("trait")]),t._v(" 之前。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("一个实现 trait 时需要注意的限制是只有要么 tait 或者类型是位于 crate 作用域本地时才能为其实现该 trait。例如，可以为像 "),a("code",[t._v("aggregator")]),t._v(" crate 的 "),a("code",[t._v("Tweet")]),t._v(" 这样的自定义类型实现如标准库中的 "),a("code",[t._v("Display")]),t._v(" 这样 trait，因为 "),a("code",[t._v("Tweet")]),t._v(" 类型位于 "),a("code",[t._v("aggregator")]),t._v(" crate 本地。也可以在 "),a("code",[t._v("aggregator")]),t._v(" crate 中为 "),a("code",[t._v("Vec<T>")]),t._v(" 实现 "),a("code",[t._v("Summary")]),t._v("，因为 "),a("code",[t._v("Summary")]),t._v(" trait 位于 "),a("code",[t._v("aggregator")]),t._v(" crate 本地。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("但是不能在外部类型上实现外部 trait。例如，不能在 "),a("code",[t._v("aggregator")]),t._v(" crate 中为 "),a("code",[t._v("Vec<T>")]),t._v(" 实现 "),a("code",[t._v("Display")]),t._v(" trait。因为 "),a("code",[t._v("Display")]),t._v(" 和 "),a("code",[t._v("Vec<T>")]),t._v(" 都定义于标准库并不位于 "),a("code",[t._v("aggregator")]),t._v(" crate 本地。这个限制是被称为 "),a("strong",[t._v("相干性")]),t._v("（"),a("em",[t._v("coherence")]),t._v("） 的程序属性的一部分，或者更具体的说是 "),a("strong",[t._v("孤儿规则")]),t._v("（"),a("em",[t._v("orphan rule")]),t._v("），其得名于不存在父类型。这条规则确保了其他人编写的代码不会破坏你代码，反之亦然。没有这条规则的话，两个 crate 可以分别对相同类型实现相同的 trait，而Rust 将无从得知应该使用哪一个实现。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"默认实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#默认实现","aria-hidden":"true"}},[this._v("#")]),this._v(" 默认实现")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("示例 10-14 中展示了如何为 "),s("code",[this._v("Summary")]),this._v(" trait 的 "),s("code",[this._v("summarize")]),this._v(" 方法指定一个默认的字符串值，而不是像示例 10-12 中那样只是定义方法签名：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" Summary "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("summarize")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" String "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"(Read more...)"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 10-14："),s("code",[this._v("Summary")]),this._v(" trait 的定义，带有一个 "),s("code",[this._v("summarize")]),this._v(" 方法的默认实现")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果想要对 "),s("code",[this._v("NewsArticle")]),this._v(" 实例使用这个默认实现，而不是定义一个自己的实现，则可以通过 impl Summary for NewsArticle {} 指定一个空的 "),s("code",[this._v("impl")]),this._v(" 块。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("即便选择不再直接为 "),a("code",[t._v("NewsArticle")]),t._v(" 定义 "),a("code",[t._v("summarize")]),t._v(" 方法了，因为我们提供了一个默认实现而且 "),a("code",[t._v("NewsArticle")]),t._v(" 被指定为实现了 "),a("code",[t._v("Summary")]),t._v(" trait。为此我们仍然可以像这样对 "),a("code",[t._v("NewsArticle")]),t._v(" 的实例调用 "),a("code",[t._v("summarize")]),t._v(" 方法：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('let article = NewsArticle {\n    headline: String::from("Penguins win the Stanley Cup Championship!"),\n    location: String::from("Pittsburgh, PA, USA"),\n    author: String::from("Iceburgh"),\n    content: String::from("The Pittsburgh Penguins once again are the best\n    hockey team in the NHL."),\n};\n\nprintln!("New article available! {}", article.summarize());\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这段代码会打印 "),s("code",[this._v("New article available! (Read more...)")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("为 "),s("code",[this._v("summarize")]),this._v(" 创建默认实现并不要求对示例 10-13 中 "),s("code",[this._v("Tweet")]),this._v(" 上的 "),s("code",[this._v("Summary")]),this._v(" 实现做任何改变。其原因是重载一个默认实现的语法与实现没有默认实现的 trait 方法一样。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("将 "),a("code",[t._v("Summarizable")]),t._v(" trait 改变为拥有默认 "),a("code",[t._v("summary")]),t._v(" 实现并不要求对示例 10-13 中 "),a("code",[t._v("Tweet")]),t._v(" 和示例 10-14 中 "),a("code",[t._v("WeatherForecast")]),t._v(" 的 "),a("code",[t._v("Summarizable")]),t._v(" 实现做任何改变：重载一个默认实现的语法与实现没有默认实现的 trait 方法时完全一样的。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("默认实现允许调用相同 trait 中的其他方法，哪怕这些方法没有默认实现。如此，trait 可以实现很多有用的功能而只需实现一小部分特定内容。我们可以选择让"),a("code",[t._v("Summary")]),t._v(" trait 也拥有一个要求实现的"),a("code",[t._v("summarize_author")]),t._v(" 方法，接着 "),a("code",[t._v("summarize")]),t._v(" 方法则提供默认实现并调用 "),a("code",[t._v("summarize_author")]),t._v(" 方法：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" Summary "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("summarize_author")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("summarize")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" String "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token function"}},[t._v("format!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"(Read more from {}...)"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("summarize_author")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("为了使用这个版本的 "),s("code",[this._v("Summary")]),this._v("，只需在实现 trait 时定义 "),s("code",[this._v("summarize_author")]),this._v(" 即可：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('impl Summary for Tweet {\n    fn summarize_author(&self) -> String {\n        format!("@{}", self.username)\n    }\n}\n')])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("一旦定义了 "),a("code",[t._v("summarize_author")]),t._v("，我们就可以对 "),a("code",[t._v("Tweet")]),t._v(" 结构体的实例调用 "),a("code",[t._v("summarize")]),t._v(" 了，而 "),a("code",[t._v("summary")]),t._v(" 的默认实现会调用我们提供的 "),a("code",[t._v("summarize_author")]),t._v(" 定义。因为实现了 "),a("code",[t._v("summarize_author")]),t._v("，"),a("code",[t._v("Summary")]),t._v(" trait 就提供了 "),a("code",[t._v("summarize")]),t._v(" 方法的功能，且无需编写更多的代码。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('let tweet = Tweet {\n    username: String::from("horse_ebooks"),\n    content: String::from("of course, as you probably already know, people"),\n    reply: false,\n    retweet: false,\n};\n\nprintln!("1 new tweet: {}", tweet.summarize());\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这会打印出 "),s("code",[this._v("1 new tweet: (Read more from @horse_ebooks...)")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"trait-作为参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#trait-作为参数","aria-hidden":"true"}},[this._v("#")]),this._v(" trait 作为参数")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("例如在示例 10-13 中为 "),a("code",[t._v("NewsArticle")]),t._v(" 和 "),a("code",[t._v("Tweet")]),t._v(" 类型实现了 "),a("code",[t._v("Summary")]),t._v(" trait。我们可以定义一个函数 "),a("code",[t._v("notify")]),t._v(" 来调用其参数 "),a("code",[t._v("item")]),t._v(" 上的 "),a("code",[t._v("summarize")]),t._v(" 方法，该参数为一些实现了 "),a("code",[t._v("Summary")]),t._v(" trait 的方法。为此可以使用 ‘"),a("code",[t._v("impl Trait")]),t._v("’ 语法，像这样：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('pub fn notify(item: impl Summary) {\n    println!("Breaking news! {}", item.summarize());\n}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 "),s("code",[this._v("notify")]),this._v(" 函数体中，可以调用任何来自 "),s("code",[this._v("Summary")]),this._v(" trait 的方法，比如 "),s("code",[this._v("summarize")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"trait-bounds"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#trait-bounds","aria-hidden":"true"}},[this._v("#")]),this._v(" Trait Bounds")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("impl Trait")]),this._v(" 语法适用于短小的例子，它不过是一个较长形式的语法糖。这被称为 "),s("em",[this._v("trait bound")]),this._v("，这看起来像：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('pub fn notify<T: Summary>(item: T) {\n    println!("Breaking news! {}", item.summarize());\n}\n')])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这与之前的例子相同，不过稍微冗长了一些。trait bound 与泛型参数声明在一起，位于尖括号中分号的后面。因为 "),a("code",[t._v("T")]),t._v(" 的 trait bound，我们可以传递任何 "),a("code",[t._v("NewsArticle")]),t._v(" 或 "),a("code",[t._v("Tweet")]),t._v(" 的实例调用 "),a("code",[t._v("notify")]),t._v("。用任何其他类型，比如 "),a("code",[t._v("String")]),t._v(" 或 "),a("code",[t._v("i32")]),t._v("，调用该函数的代码将不能编译，因为这些类型没有实现 "),a("code",[t._v("Summary")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("何时应该使用这种形式而不是 "),s("code",[this._v("impl Trait")]),this._v(" 呢？虽然 "),s("code",[this._v("impl Trait")]),this._v(" 适用于短小的例子，trait bound 则适用于更复杂的场景。例如，比如需要获取两个实现了 "),s("code",[this._v("Summary")]),this._v(" 的类型：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("pub fn notify(item1: impl Summary, item2: impl Summary) {\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这适用于 "),s("code",[this._v("item1")]),this._v(" 和 "),s("code",[this._v("item2")]),this._v(" 允许是不同类型的情况（只要它们都实现了 "),s("code",[this._v("Summary")]),this._v("）。不过如果你希望强制它们都是相同类型呢？这只有在使用 trait bound 时才有可能：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("pub fn notify<T: Summary>(item1: T, item2: T) {\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"通过-指定多个-trait"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通过-指定多个-trait","aria-hidden":"true"}},[this._v("#")]),this._v(" 通过 "),s("code",[this._v("+")]),this._v(" 指定多个 trait")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果 "),a("code",[t._v("notify")]),t._v(" 需要显示 "),a("code",[t._v("item")]),t._v(" 的格式化形式，同时也要使用 "),a("code",[t._v("summarize")]),t._v(" 方法，那么 "),a("code",[t._v("item")]),t._v(" 就需要同时实现两个不同的 trait："),a("code",[t._v("Display")]),t._v(" 和 "),a("code",[t._v("Summary")]),t._v("。这可以通过 "),a("code",[t._v("+")]),t._v(" 语法实现：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("pub fn notify(item: impl Summary + Display) {\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("pub fn notify<T: Summary + Display>(item: T) {\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"通过-where-简化代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通过-where-简化代码","aria-hidden":"true"}},[this._v("#")]),this._v(" 通过 "),s("code",[this._v("where")]),this._v(" 简化代码")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("然而，使用过多的 trait bound 也有缺点。每个泛型有其自己的 trait bound，所以有多个泛型参数的函数在名称和参数列表之间会有很长的 trait bound 信息，这使得函数签名难以阅读。为此，Rust 有另一个在函数签名之后的 "),s("code",[this._v("where")]),this._v(" 从句中指定 trait bound 的语法。所以除了这么写：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("fn some_function<T: Display + Clone, U: Clone + Debug>(t: T, u: U) -> i32 {\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("还可以像这样使用 "),s("code",[this._v("where")]),this._v(" 从句：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("fn some_function<T, U>(t: T, u: U) -> i32\n    where T: Display + Clone,\n          U: Clone + Debug\n{\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"返回-trait"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#返回-trait","aria-hidden":"true"}},[this._v("#")]),this._v(" 返回 trait")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("也可以在返回值中使用 "),s("code",[this._v("impl Trait")]),this._v(" 语法，来返回实现了某个 trait 的类型：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('fn returns_summarizable() -> impl Summary {\n    Tweet {\n        username: String::from("horse_ebooks"),\n        content: String::from("of course, as you probably already know, people"),\n        reply: false,\n        retweet: false,\n    }\n}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这个签名表明，“我要返回某个实现了 "),s("code",[this._v("Summary")]),this._v(" trait 的类型，但是不确定其具体的类型”。在例子中返回了一个 "),s("code",[this._v("Tweet")]),this._v("，不过调用方并不知情。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这有什么用呢？在第十三章中，我们会学些两个大量依赖 trait 的功能：闭包和迭代器。这些功能创建只有编译器知道的类型，或者是非常非常长的类型。"),s("code",[this._v("impl Trait")]),this._v(" 允许你简单的说 “返回一个 "),s("code",[this._v("Iterator")]),this._v("” 而无需写出实际的冗长的类型。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("不过这只适用于返回单一类型的情况。例如，这样就 "),s("strong",[this._v("不行")]),this._v("：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore,does_not_compile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('fn returns_summarizable(switch: bool) -> impl Summary {\n    if switch {\n        NewsArticle {\n            headline: String::from("Penguins win the Stanley Cup Championship!"),\n            location: String::from("Pittsburgh, PA, USA"),\n            author: String::from("Iceburgh"),\n            content: String::from("The Pittsburgh Penguins once again are the best\n            hockey team in the NHL."),\n        }\n    } else {\n        Tweet {\n            username: String::from("horse_ebooks"),\n            content: String::from("of course, as you probably already know, people"),\n            reply: false,\n            retweet: false,\n        }\n    }\n}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里尝试返回 "),s("code",[this._v("NewsArticle")]),this._v(" 或 "),s("code",[this._v("Tweet")]),this._v("。这不能编译，因为 "),s("code",[this._v("impl Trait")]),this._v(" 工作方式的限制。为了编写这样的代码，你不得不等到第十七章的 “为使用不同类型的值而设计的 trait 对象” 部分。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"使用-trait-bounds-来修复-largest-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-trait-bounds-来修复-largest-函数","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用 trait bounds 来修复 "),s("code",[this._v("largest")]),this._v(" 函数")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在你知道了如何使用泛型参数 trait bound 来指定所需的行为。让我们回到实例 10-5 修复使用泛型类型参数的 "),s("code",[this._v("largest")]),this._v(" 函数定义！最后尝试代时出现的错误是：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("error[E0369]: binary operation `>` cannot be applied to type `T`\n --\x3e src/main.rs:5:12\n  |\n5 |         if item > largest {\n  |            ^^^^^^^^^^^^^^\n  |\n  = note: an implementation of `std::cmp::PartialOrd` might be missing for `T`\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在 "),a("code",[t._v("largest")]),t._v(" 函数体中我们想要使用大于运算符（"),a("code",[t._v(">")]),t._v("）比较两个 "),a("code",[t._v("T")]),t._v(" 类型的值。这个运算符被定义为标准库中 trait "),a("code",[t._v("std::cmp::PartialOrd")]),t._v(" 的一个默认方法。所以需要在 "),a("code",[t._v("T")]),t._v(" 的 trait bound 中指定 "),a("code",[t._v("PartialOrd")]),t._v("，这样 "),a("code",[t._v("largest")]),t._v(" 函数可以用于任何可以比较大小的类型的 slice。因为 "),a("code",[t._v("PartialOrd")]),t._v(" 位于 prelude 中所以并不需要手动将其引入作用域。将 "),a("code",[t._v("largest")]),t._v(" 的签名修改为如下：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("fn largest<T: PartialOrd>(list: &[T]) -> T {\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("error[E0508]: cannot move out of type `[T]`, a non-copy slice\n --\x3e src/main.rs:2:23\n  |\n2 |     let mut largest = list[0];\n  |                       ^^^^^^^\n  |                       |\n  |                       cannot move out of here\n  |                       help: consider using a reference instead: `&list[0]`\n\nerror[E0507]: cannot move out of borrowed content\n --\x3e src/main.rs:4:9\n  |\n4 |     for &item in list.iter() {\n  |         ^----\n  |         ||\n  |         |hint: to prevent move, use `ref item` or `ref mut item`\n  |         cannot move out of borrowed content\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("错误的核心是 "),a("code",[t._v("cannot move out of type [T], a non-copy slice")]),t._v("，对于非泛型版本的 "),a("code",[t._v("largest")]),t._v(" 函数，我们只尝试了寻找最大的 "),a("code",[t._v("i32")]),t._v(" 和 "),a("code",[t._v("char")]),t._v("。正如第四章 “只在栈上的数据：拷贝” 部分讨论过的，像 "),a("code",[t._v("i32")]),t._v(" 和 "),a("code",[t._v("char")]),t._v(" 这样的类型是已知大小的并可以储存在栈上，所以他们实现了 "),a("code",[t._v("Copy")]),t._v(" trait。当我们将 "),a("code",[t._v("largest")]),t._v(" 函数改成使用泛型后，现在 "),a("code",[t._v("list")]),t._v(" 参数的类型就有可能是没有实现 "),a("code",[t._v("Copy")]),t._v(" trait 的。这意味着我们可能不能将 "),a("code",[t._v("list[0]")]),t._v(" 的值移动到 "),a("code",[t._v("largest")]),t._v(" 变量中，这导致了上面的错误。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("为了只对实现了 "),a("code",[t._v("Copy")]),t._v(" 的类型调用这些代码，可以在 "),a("code",[t._v("T")]),t._v(" 的 trait bounds 中增加 "),a("code",[t._v("Copy")]),t._v("！示例 10-15 中展示了一个可以编译的泛型版本的 "),a("code",[t._v("largest")]),t._v(" 函数的完整代码，只要传递给 "),a("code",[t._v("largest")]),t._v(" 的 slice 值的类型实现了 "),a("code",[t._v("PartialOrd")]),t._v(" "),a("strong",[t._v("和")]),t._v(" "),a("code",[t._v("Copy")]),t._v(" 这两个 trait，例如 "),a("code",[t._v("i32")]),t._v(" 和 "),a("code",[t._v("char")]),t._v("：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" largest"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" PartialOrd "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" Copy"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("T"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" T "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" largest "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("item "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" list"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("iter")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" item "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" largest "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            largest "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" item"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    largest\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("main")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" number_list "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("vec!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("34")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("50")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("25")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("100")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("65")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("largest")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("number_list"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"The largest number is {}"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" char_list "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("vec!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token char string"}},[t._v("'y'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token char string"}},[t._v("'m'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token char string"}},[t._v("'a'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token char string"}},[t._v("'q'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("largest")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("char_list"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"The largest char is {}"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 10-15：一个可以用于任何实现了 "),s("code",[this._v("PartialOrd")]),this._v(" 和 "),s("code",[this._v("Copy")]),this._v(" trait 的泛型的 "),s("code",[this._v("largest")]),this._v(" 函数")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果并不希望限制 "),a("code",[t._v("largest")]),t._v(" 函数只能用于实现了 "),a("code",[t._v("Copy")]),t._v(" trait 的类型，我们可以在 "),a("code",[t._v("T")]),t._v(" 的 trait bounds 中指定 "),a("code",[t._v("Clone")]),t._v(" 而不是 "),a("code",[t._v("Copy")]),t._v("。并克隆 slice 的每一个值使得 "),a("code",[t._v("largest")]),t._v(" 函数拥有其所有权。使用 "),a("code",[t._v("clone")]),t._v(" 函数意味着对于类似 "),a("code",[t._v("String")]),t._v(" 这样拥有堆上数据的类型，会潜在的分配更多堆上空间，而堆分配在涉及大量数据时可能会相当缓慢。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("另一种 "),a("code",[t._v("largest")]),t._v(" 的实现方式是返回在 slice 中 "),a("code",[t._v("T")]),t._v(" 值的引用。如果我们将函数返回值从 "),a("code",[t._v("T")]),t._v(" 改为 "),a("code",[t._v("&T")]),t._v(" 并改变函数体使其能够返回一个引用，我们将不需要任何 "),a("code",[t._v("Clone")]),t._v(" 或 "),a("code",[t._v("Copy")]),t._v(" 的 trait bounds 而且也不会有任何的堆分配。尝试自己实现这种替代解决方式吧！")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"使用-trait-bound-有条件的实现方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-trait-bound-有条件的实现方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用 trait bound 有条件的实现方法")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("通过使用带有 trait bound 的泛型参数的 "),a("code",[t._v("impl")]),t._v(" 块，可以有条件的只为实现了特定 trait 的类型实现方法。例如，示例 10-16 中的类型 "),a("code",[t._v("Pair<T>")]),t._v(" 总是实现了 "),a("code",[t._v("new")]),t._v(" 方法，不过只有 "),a("code",[t._v("Pair<T>")]),t._v(" 内部的 "),a("code",[t._v("T")]),t._v(" 类型实现了 "),a("code",[t._v("PartialOrd")]),t._v(" trait 来允许比较 "),a("strong",[t._v("和")]),t._v(" "),a("code",[t._v("Display")]),t._v(" trait 来启用打印，才会实现 "),a("code",[t._v("cmp_display")]),t._v(" 方法：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("fmt"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Display"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Pair"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    y"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" Pair"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("new")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Self "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        Self "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            x"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            y"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Display "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" PartialOrd"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" Pair"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("cmp_display")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),a("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"The largest member is x = {}"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"The largest member is y = {}"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 10-17：根据 trait bound 在泛型上有条件的实现方法")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("也可以对任何实现了特定 trait 的类型有条件的实现 trait。对任何满足特定 trait bound 的类型实现 trait 被称为 "),a("em",[t._v("blanket implementations")]),t._v("，他们被广泛的用于 Rust 标准库中。例如，标准库为任何实现了 "),a("code",[t._v("Display")]),t._v(" trait 的类型实现了 "),a("code",[t._v("ToString")]),t._v(" trait。这个 "),a("code",[t._v("impl")]),t._v(" 块看起来像这样：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("impl<T: Display> ToString for T {\n    // --snip--\n}\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("因为标准库有了这些 blanket implementation，我们可以对任何实现了 "),a("code",[t._v("Display")]),t._v(" trait 的类型调用由 "),a("code",[t._v("ToString")]),t._v(" 定义的 "),a("code",[t._v("to_string")]),t._v(" 方法。例如，可以将整型转换为对应的 "),a("code",[t._v("String")]),t._v(" 值，因为整型实现了 "),a("code",[t._v("Display")]),t._v("：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("to_string")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里还有一种泛型，我们一直在使用它甚至都没有察觉它的存在，这就是 "),s("strong",[this._v("生命周期")]),this._v("（"),s("em",[this._v("lifetimes")]),this._v("）。不同于其他泛型帮助我们确保类型拥有期望的行为，生命周期则有助于确保引用在我们需要他们的时候一直有效。让我们学习生命周期是如何做到这些的。")])}],!1,null,null,null);e.options.__file="ch10-02-traits.md";s.default=e.exports}}]);