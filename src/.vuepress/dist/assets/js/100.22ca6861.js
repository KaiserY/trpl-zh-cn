(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{170:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/second-edition/src/ch19-03-advanced-traits.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch19-03-advanced-traits.md"),a("OutboundLink")],1),t._v(" "),a("br"),t._v("\ncommit 9d5b9a573daf5fa0c98b3a3005badcea4a0a5211")])]),t._v(" "),a("p",[t._v("第十章 “trait：定义共享的行为” 部分，我们第一次涉及到了 trait，不过就像生命周期一样，我们并没有覆盖一些较为高级的细节。现在我们更加了解 Rust 了，可以深入理解其本质了。")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),a("p",[t._v("本章所描述的大部分内容都非常少见。关联类型则比较适中；它们比本书其他的内容要少见，不过比本章中的很多内容要更常见。")]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),a("p",[t._v("这可能看起来像一个类似泛型的概念，因为它允许定义一个函数而不指定其可以处理的类型。那么为什么要使用关联类型呢？")]),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._m(11),t._v(" "),t._m(12),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._m(31),t._v(" "),t._m(32),t._v(" "),a("p",[t._v("默认参数类型主要用于如下两个方面：")]),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),a("p",[t._v("第一个目的是相似的，但过程是反过来的：如果需要为现有 trait 增加类型参数，为其提供一个默认类型将允许我们在不破坏现有实现代码的基础上扩展 trait 的功能。")]),t._v(" "),t._m(35),t._v(" "),a("p",[t._v("Rust 既不能避免一个 trait 与另一个 trait 拥有相同名称的方法，也不能阻止为同一类型同时实现这两个 trait。甚至直接在类型上实现开始已经有的同名方法也是可能的！")]),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),t._m(38),t._v(" "),t._m(39),t._m(40),t._v(" "),t._m(41),t._v(" "),t._m(42),t._v(" "),t._m(43),t._m(44),t._v(" "),t._m(45),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),t._m(48),t._m(49),t._v(" "),t._m(50),t._v(" "),a("p",[t._v("运行这段代码会打印出：")]),t._v(" "),t._m(51),t._m(52),t._v(" "),t._m(53),t._v(" "),t._m(54),t._v(" "),t._m(55),t._m(56),t._v(" "),t._m(57),t._v(" "),t._m(58),t._v(" "),t._m(59),t._m(60),t._v(" "),t._m(61),t._v(" "),t._m(62),t._m(63),t._v(" "),t._m(64),t._v(" "),t._m(65),t._m(66),t._v(" "),t._m(67),t._v(" "),t._m(68),t._m(69),t._v(" "),t._m(70),t._v(" "),t._m(71),a("p",[t._v("通常，完全限定语法定义为：")]),t._v(" "),t._m(72),t._m(73),t._v(" "),t._m(74),t._v(" "),t._m(75),t._v(" "),t._m(76),t._v(" "),t._m(77),t._m(78),t._v(" "),t._m(79),t._v(" "),t._m(80),t._m(81),t._v(" "),t._m(82),t._v(" "),t._m(83),t._v(" "),t._m(84),t._v(" "),t._m(85),t._m(86),t._v(" "),t._m(87),t._m(88),t._v(" "),t._m(89),t._v(" "),t._m(90),t._m(91),t._v(" "),t._m(92),t._v(" "),t._m(93),t._v(" "),t._m(94),t._v(" "),t._m(95),t._v(" "),t._m(96),t._v(" "),t._m(97),t._m(98),t._v(" "),t._m(99),t._v(" "),t._m(100),t._v(" "),a("p",[t._v("上面便是 newtype 模式如何与 trait 结合使用的；还有一个不涉及 trait 的实用模式。现在让我们将话题的焦点转移到一些与 Rust 类型系统交互的高级方法上来吧。")])])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"高级-trait"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高级-trait","aria-hidden":"true"}},[this._v("#")]),this._v(" 高级 trait")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"关联类型在-trait-定义中指定占位符类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关联类型在-trait-定义中指定占位符类型","aria-hidden":"true"}},[this._v("#")]),this._v(" 关联类型在 trait 定义中指定占位符类型")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("关联类型")]),this._v("（"),s("em",[this._v("associated types")]),this._v("）是一个将类型占位符与 trait 相关联的方式，这样 trait 的方法签名中就可以使用这些占位符类型。trait 的实现者会针对特定的实现在这个类型的位置指定相应的具体类型。如此可以定义一个使用多种类型的 trait，直到实现此 trait 时都无需知道这些类型具体是什么。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("一个带有关联类型的 trait 的例子是标准库提供的 "),a("code",[t._v("Iterator")]),t._v(" trait。它有一个叫做 "),a("code",[t._v("Item")]),t._v(" 的关联类型来替代遍历的值的类型。第十三章的 “"),a("code",[t._v("Iterator")]),t._v(" trait 和 "),a("code",[t._v("next")]),t._v(" 方法” 部分曾提到过 "),a("code",[t._v("Iterator")]),t._v(" trait 的定义如示例 19-20 所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" Iterator "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Item"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("next")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Option"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Self"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Item"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 19-20: "),s("code",[this._v("Iterator")]),this._v(" trait 的定义中带有关联类型 "),s("code",[this._v("Item")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("Iterator")]),t._v(" trait 有一个关联类型 "),a("code",[t._v("Item")]),t._v("。"),a("code",[t._v("Item")]),t._v(" 是一个占位类型，同时 "),a("code",[t._v("next")]),t._v(" 方法会返回 "),a("code",[t._v("Option<Self::Item>")]),t._v(" 类型的值。这个 trait 的实现者会指定 "),a("code",[t._v("Item")]),t._v(" 的具体类型，然而不管实现者指定何种类型, "),a("code",[t._v("next")]),t._v(" 方法都会返回一个包含了此具体类型值的 "),a("code",[t._v("Option")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"关联类型-vs-泛型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关联类型-vs-泛型","aria-hidden":"true"}},[this._v("#")]),this._v(" 关联类型 vs 泛型")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("让我们通过一个在第十三章中出现的 "),a("code",[t._v("Counter")]),t._v(" 结构体上实现 "),a("code",[t._v("Iterator")]),t._v(" trait 的例子来检视其中的区别。在示例 13-21 中，指定了 "),a("code",[t._v("Item")]),t._v(" 的类型为 "),a("code",[t._v("u32")]),t._v("：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("impl Iterator for Counter {\n    type Item = u32;\n\n    fn next(&mut self) -> Option<Self::Item> {\n        // --snip--\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这类似于泛型。那么为什么 "),s("code",[this._v("Iterator")]),this._v(" trait 不像示例 19-21 那样定义呢？")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" Iterator"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("next")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Option"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 19-21: 一个使用泛型的 "),s("code",[this._v("Iterator")]),this._v(" trait 假象定义")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("区别在于当如示例 19-21 那样使用泛型时，则不得不在每一个实现中标注类型。这是因为我们也可以实现为 "),a("code",[t._v("Iterator<String> for Counter")]),t._v("，或任何其他类型，这样就可以有多个 "),a("code",[t._v("Counter")]),t._v(" 的 "),a("code",[t._v("Iterator")]),t._v(" 的实现。换句话说，当 trait 有泛型参数时，可以多次实现这个 trait，每次需改变泛型参数的具体类型。接着当使用 "),a("code",[t._v("Counter")]),t._v(" 的 "),a("code",[t._v("next")]),t._v(" 方法时，必须提供类型注解来表明希望使用 "),a("code",[t._v("Iterator")]),t._v(" 的哪一个实现。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("通过关联类型，则无需标注类型因为不能多次实现这个 trait。对于示例 19-20，我们只能选择一次 "),a("code",[t._v("Item")]),t._v(" 会是什么类型，因为只能有一个 "),a("code",[t._v("impl Iterator for Counter")]),t._v("。当调用 "),a("code",[t._v("Counter")]),t._v(" 的 "),a("code",[t._v("next")]),t._v(" 时不必每次指定我们需要 "),a("code",[t._v("u32")]),t._v(" 值的迭代器。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"默认泛型类型参数和运算符重载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#默认泛型类型参数和运算符重载","aria-hidden":"true"}},[this._v("#")]),this._v(" 默认泛型类型参数和运算符重载")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当使用泛型类型参数时，可以为泛型指定一个默认的具体类型。如果默认类型就足够的话，这消除了为具体类型实现 trait 的需要。为泛型类型指定默认类型的语法是在声明泛型类型时使用 "),s("code",[this._v("<PlaceholderType=ConcreteType>")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这种情况的一个非常好的例子是用于运算符重载。运算符重载是指在特定情况下自定义运算符（比如 "),s("code",[this._v("+")]),this._v("）行为的操作。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("Rust 并不允许创建自定义运算符或重载任意运算符，不过 "),a("code",[t._v("std::ops")]),t._v(" 中所列出的运算符和相应的 trait "),a("strong",[t._v("可以")]),t._v(" 通过实现运算符相关 trait 来重载。例如，示例 19-22 中展示了如何在 "),a("code",[t._v("Point")]),t._v(" 结构体上实现 "),a("code",[t._v("Add")]),t._v(" trait 来重载 "),a("code",[t._v("+")]),t._v(" 运算符，这样就可以将两个 "),a("code",[t._v("Point")]),t._v(" 实例相加了：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("ops"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Add"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token attribute attr-name"}},[t._v("#[derive(Debug,PartialEq)]")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Point "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    y"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Add "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" Point "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Output "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Point"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("add")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" other"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Point"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Point "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        Point "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            x"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" other"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            y"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" other"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("main")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("assert_eq!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Point "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" Point "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n               Point "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 19-22: 实现 "),s("code",[this._v("Add")]),this._v(" trait 重载 "),s("code",[this._v("Point")]),this._v(" 实例的 "),s("code",[this._v("+")]),this._v(" 运算符")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("add")]),t._v(" 方法将两个 "),a("code",[t._v("Point")]),t._v(" 实例的 "),a("code",[t._v("x")]),t._v(" 值和 "),a("code",[t._v("y")]),t._v(" 值分别相加来创建一个新的 "),a("code",[t._v("Point")]),t._v("。"),a("code",[t._v("Add")]),t._v(" trait 有一个叫做 "),a("code",[t._v("Output")]),t._v(" 的关联类型，它用来决定 "),a("code",[t._v("add")]),t._v(" 方法的返回值类型。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里默认泛型类型位于 "),s("code",[this._v("Add")]),this._v(" trait 中。这里是其定义：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" Add"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("RHS"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("Self"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Output"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("add")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rhs"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" RHS"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Self"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Output"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这看来应该很熟悉，这是一个带有一个方法和一个关联类型的 trait。比较陌生的部分是尖括号中的 "),a("code",[t._v("RHS=Self")]),t._v("：这个语法叫做 "),a("strong",[t._v("默认类型参数")]),t._v("（"),a("em",[t._v("default type parameters")]),t._v("）。"),a("code",[t._v("RHS")]),t._v(" 是一个泛型类型参数 —— “right hand side” 的缩写 —— 它用于 "),a("code",[t._v("add")]),t._v(" 方法中的 "),a("code",[t._v("rhs")]),t._v(" 参数。如果实现 "),a("code",[t._v("Add")]),t._v(" trait 时不指定 "),a("code",[t._v("RHS")]),t._v(" 的具体类型，"),a("code",[t._v("RHS")]),t._v(" 的类型将是默认的 "),a("code",[t._v("Self")]),t._v(" 类型，也就是在其上实现 "),a("code",[t._v("Add")]),t._v(" 的类型。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("当为 "),a("code",[t._v("Point")]),t._v(" 实现 "),a("code",[t._v("Add")]),t._v(" 时，使用了默认的 "),a("code",[t._v("RHS")]),t._v("，因为我们希望将两个 "),a("code",[t._v("Point")]),t._v(" 实例相加。让我们看看一个实现 "),a("code",[t._v("Add")]),t._v(" trait 时希望自定义 "),a("code",[t._v("RHS")]),t._v(" 类型而不是使用默认类型的例子")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这里有两个存放不同单元值的结构体，"),a("code",[t._v("Millimeters")]),t._v(" 和 "),a("code",[t._v("Meters")]),t._v("。我们希望能够将毫米值与米值相加，并让 "),a("code",[t._v("Add")]),t._v(" 的实现正确处理转换。可以为 "),a("code",[t._v("Millimeters")]),t._v(" 实现 "),a("code",[t._v("Add")]),t._v(" 并以 "),a("code",[t._v("Meters")]),t._v(" 作为右手边，如示例 19-23 所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/lib.rs")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("ops"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Add"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("Millimeters")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("u32"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("Meters")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("u32"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Add"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Meters"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" Millimeters "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Output "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Millimeters"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("add")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" other"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Meters"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Millimeters "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token function"}},[t._v("Millimeters")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("other"),a("span",{attrs:{class:"token number"}},[t._v(".0")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1000")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("span",{staticClass:"caption"},[t._v("示例 19-23: 在 "),a("code",[t._v("Millimeters")]),t._v(" 上实现 "),a("code",[t._v("Add")]),t._v("，以便能够将 "),a("code",[t._v("Millimeters")]),t._v(" 与 "),a("code",[t._v("Meters")]),t._v(" 相加")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("为了使 "),a("code",[t._v("Millimeters")]),t._v(" 和 "),a("code",[t._v("Meters")]),t._v(" 能够相加，我们指定 "),a("code",[t._v("impl Add<Meters>")]),t._v(" 来设定 "),a("code",[t._v("RHS")]),t._v(" 类型参数的值而不是使用默认的 "),a("code",[t._v("Self")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ol",[s("li",[this._v("扩展类型而不破坏现有代码。")]),this._v(" "),s("li",[this._v("在大部分用户都不需要的特定情况进行自定义。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("标准库的 "),s("code",[this._v("Add")]),this._v(" trait 就是一个第二个目的例子：大部分时候你会将两个相似的类型相加，不过它提供了自定义额外行为的能力。在 "),s("code",[this._v("Add")]),this._v(" trait 定义中使用默认类型参数意味着大部分时候无需指定额外的参数。换句话说，一小部分实现的样板代码是不必要的，这样使用 trait 就更容易了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"完全限定语法与消歧义：调用相同名称的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#完全限定语法与消歧义：调用相同名称的方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 完全限定语法与消歧义：调用相同名称的方法")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("不过，当调用这些同名方法时，需要告诉 Rust 我们希望使用哪一个。考虑一下示例 19-24 中的代码，这里定义了 trait "),a("code",[t._v("Pilot")]),t._v(" 和 "),a("code",[t._v("Wizard")]),t._v(" 都拥有方法 "),a("code",[t._v("fly")]),t._v("。接着在一个本身已经实现了名为 "),a("code",[t._v("fly")]),t._v(" 方法的类型 "),a("code",[t._v("Human")]),t._v(" 上实现这两个 trait。每一个 "),a("code",[t._v("fly")]),t._v(" 方法都进行了不同的操作：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("甚至也可以直接在类型上实现相同名称的方法！那么为了能使用相同的名称调用每一个方法，需要告诉 Rust 我们希望使用哪个方法。考虑一下列表 19-27 中的代码，trait "),a("code",[t._v("Foo")]),t._v(" 和 "),a("code",[t._v("Bar")]),t._v(" 都拥有方法 "),a("code",[t._v("f")]),t._v("，并在结构体 "),a("code",[t._v("Baz")]),t._v(" 上实现了这两个 trait，结构体也有一个叫做 "),a("code",[t._v("f")]),t._v(" 的方法：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" Pilot "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("fly")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" Wizard "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("fly")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Human"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Pilot "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" Human "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("fly")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"This is your captain speaking."')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Wizard "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" Human "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("fly")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Up!"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Human "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("fly")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"*waving arms furiously*"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 19-24: 两个 trait 定义为拥有 "),s("code",[this._v("fly")]),this._v(" 方法，并在直接定义有 "),s("code",[this._v("fly")]),this._v(" 方法的 "),s("code",[this._v("Human")]),this._v(" 类型上实现这两个 trait")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当调用 "),s("code",[this._v("Human")]),this._v(" 实例的 "),s("code",[this._v("fly")]),this._v(" 时，编译器默认调用直接是现在类型上的方法，如示例 19-25 所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[t._v("# "),a("span",{attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" Pilot "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("fly")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" Wizard "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("fly")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Human"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Pilot "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" Human "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("fly")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#         "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"This is your captain speaking."')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#     "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Wizard "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" Human "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("fly")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#         "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Up!"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#     "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Human "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("fly")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#         "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"*waving arms furiously*"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#     "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("main")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" person "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Human"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    person"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("fly")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 19-25: 调用 "),s("code",[this._v("Human")]),this._v(" 实例的 "),s("code",[this._v("fly")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("运行这段代码会打印出 "),s("code",[this._v("*waving arms furiously*")]),this._v("，这表明 Rust 调用了直接实现在 "),s("code",[this._v("Human")]),this._v(" 上的 "),s("code",[this._v("fly")]),this._v(" 方法。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("为了能够调用 "),a("code",[t._v("Pilot")]),t._v(" trait 或 "),a("code",[t._v("Wizard")]),t._v(" trait 的 "),a("code",[t._v("fly")]),t._v(" 方法，我们需要使用更明显的语法以便能指定我们指的是哪个 "),a("code",[t._v("fly")]),t._v(" 方法。这个语法展示在示例 19-26 中：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[t._v("# "),a("span",{attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" Pilot "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("fly")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" Wizard "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("fly")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Human"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Pilot "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" Human "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("fly")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#         "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"This is your captain speaking."')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#     "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Wizard "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" Human "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("fly")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#         "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Up!"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#     "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Human "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("fly")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#         "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"*waving arms furiously*"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#     "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("main")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" person "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Human"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    Pilot"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("fly")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("person"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    Wizard"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("fly")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("person"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    person"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("fly")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 19-26: 指定我们希望调用哪一个 trait 的 "),s("code",[this._v("fly")]),this._v(" 方法")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在方法名前指定 trait 名向 Rust 澄清了我们希望调用哪个 "),s("code",[this._v("fly")]),this._v(" 实现。也可以选择写成 "),s("code",[this._v("Human::fly(&person)")]),this._v("，这等同于示例 19-26 中的 "),s("code",[this._v("person.fly()")]),this._v("，不过如果无需消歧义的话这么写就有点长了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("This is your captain speaking.\nUp!\n*waving arms furiously*\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("因为 "),a("code",[t._v("fly")]),t._v(" 方法获取一个 "),a("code",[t._v("self")]),t._v(" 参数，如果有两个 "),a("strong",[t._v("类型")]),t._v(" 都实现了同一 "),a("strong",[t._v("trait")]),t._v("，Rust 可以根据 "),a("code",[t._v("self")]),t._v(" 的类型计算出应该使用哪一个 trait 实现。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("然而，关联函数是 trait 的一部分，但没有 "),a("code",[t._v("self")]),t._v(" 参数。当同一作用域的两个类型实现了同一 trait，Rust 就不能计算出我们期望的是哪一个类型，除非使用 "),a("strong",[t._v("完全限定语法")]),t._v("（"),a("em",[t._v("fully qualified syntax")]),t._v("）。例如，拿示例 19-27 中的 "),a("code",[t._v("Animal")]),t._v(" trait 来说，它有关联函数 "),a("code",[t._v("baby_name")]),t._v("，结构体 "),a("code",[t._v("Dog")]),t._v(" 实现了 "),a("code",[t._v("Animal")]),t._v("，同时有关联函数 "),a("code",[t._v("baby_name")]),t._v(" 直接定义于 "),a("code",[t._v("Dog")]),t._v(" 之上：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" Animal "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("baby_name")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Dog"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Dog "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("baby_name")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" String "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Spot"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Animal "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" Dog "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("baby_name")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" String "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"puppy"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("main")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"A baby dog is called a {}"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Dog"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("baby_name")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 19-27: 一个带有关联函数的 trait 和一个带有同名关联函数并实现了此 trait 的类型")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码用于一个动物收容所，他们将所有的小狗起名为 Spot，这实现为定义于 "),a("code",[t._v("Dog")]),t._v(" 之上的关联函数 "),a("code",[t._v("baby_name")]),t._v("。"),a("code",[t._v("Dog")]),t._v(" 类型还实现了 "),a("code",[t._v("Animal")]),t._v(" trait，它描述了所有动物的共有的特征。小狗被称为 puppy，这表现为 "),a("code",[t._v("Dog")]),t._v(" 的 "),a("code",[t._v("Animal")]),t._v(" trait 实现中与 "),a("code",[t._v("Animal")]),t._v(" trait 相关联的函数 "),a("code",[t._v("baby_name")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 "),s("code",[this._v("main")]),this._v(" 调用了 "),s("code",[this._v("Dog::baby_name")]),this._v(" 函数，它直接调用了定义于 "),s("code",[this._v("Dog")]),this._v(" 之上的关联函数。这段代码会打印出：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("A baby dog is called a Spot\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这并不是我们需要的。我们希望调用的是 "),a("code",[t._v("Dog")]),t._v(" 上 "),a("code",[t._v("Animal")]),t._v(" trait 实现那部分的 "),a("code",[t._v("baby_name")]),t._v(" 函数，这样能够打印出 "),a("code",[t._v("A baby dog is called a puppy")]),t._v("。示例 19-26 中用到的技术在这并不管用；如果将 "),a("code",[t._v("main")]),t._v(" 改为示例 19-28 中的代码，则会得到一个编译错误：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('fn main() {\n    println!("A baby dog is called a {}", Animal::baby_name());\n}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 19-28: 尝试调用 "),s("code",[this._v("Animal")]),this._v(" trait 的 "),s("code",[this._v("baby_name")]),this._v(" 函数，不过 Rust 并不知道该使用哪一个实现")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("因为 "),s("code",[this._v("Animal::baby_name")]),this._v(" 是关联函数而不是方法，因此它没有 "),s("code",[this._v("self")]),this._v(" 参数，Rust 无法计算出所需的是哪一个 "),s("code",[this._v("Animal::baby_name")]),this._v(" 实现。我们会得到这个编译错误：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('error[E0283]: type annotations required: cannot resolve `_: Animal`\n  --\x3e src/main.rs:20:43\n   |\n20 |     println!("A baby dog is called a {}", Animal::baby_name());\n   |                                           ^^^^^^^^^^^^^^^^^\n   |\n   = note: required by `Animal::baby_name`\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("为了消歧义并告诉 Rust 我们希望使用的是 "),s("code",[this._v("Dog")]),this._v(" 的 "),s("code",[this._v("Animal")]),this._v(" 实现，需要使用 "),s("strong",[this._v("完全限定语法")]),this._v("，这是调用函数时最为明确的方式。示例 19-29 展示了如何使用完全限定语法：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[t._v("# "),a("span",{attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" Animal "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("baby_name")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Dog"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Dog "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("baby_name")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" String "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#         String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Spot"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n#     "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n# "),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Animal "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" Dog "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("baby_name")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" String "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#         String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"puppy"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n#     "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n# "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("main")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"A baby dog is called a {}"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Dog "),a("span",{attrs:{class:"token keyword"}},[t._v("as")]),t._v(" Animal"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("baby_name")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 19-29: 使用完全限定语法来指定我们希望调用的是 "),s("code",[this._v("Dog")]),this._v(" 上 "),s("code",[this._v("Animal")]),this._v(" trait 实现中的 "),s("code",[this._v("baby_name")]),this._v(" 函数")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们在尖括号中向 Rust 提供了类型注解，并通过在此函数调用中将 "),a("code",[t._v("Dog")]),t._v(" 类型当作 "),a("code",[t._v("Animal")]),t._v(" 对待，来指定希望调用的是 "),a("code",[t._v("Dog")]),t._v(" 上 "),a("code",[t._v("Animal")]),t._v(" trait 实现中的 "),a("code",[t._v("baby_name")]),t._v(" 函数。现在这段代码会打印出我们期望的数据：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("A baby dog is called a puppy\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("<Type as Trait>::function(receiver_if_method, next_arg, ...);\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("对于关联函数，其没有一个 "),s("code",[this._v("receiver")]),this._v("，故只会有其他参数的列表。可以选择在任何函数或方法调用处使用完全限定语法。然而，允许省略任何 Rust 能够从程序中的其他信息中计算出的部分。只有当存在多个同名实现而 Rust 需要帮助以便知道我们希望调用哪个实现时，才需要使用这个较为冗长的语法。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"父-trait-用于在另一个-trait-中使用某-trait-的功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#父-trait-用于在另一个-trait-中使用某-trait-的功能","aria-hidden":"true"}},[this._v("#")]),this._v(" 父 trait 用于在另一个 trait 中使用某 trait 的功能")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("有时我们可能会需要某个 trait 使用另一个 trait 的功能。在这种情况下，需要能够依赖相关的 trait 也被实现。这个所需的 trait 是我们实现的 trait 的 "),s("strong",[this._v("父（超） trait")]),this._v("（"),s("em",[this._v("supertrait")]),this._v("）。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("例如我们希望创建一个带有 "),a("code",[t._v("outline_print")]),t._v(" 方法的 trait "),a("code",[t._v("OutlinePrint")]),t._v("，它会打印出带有星号框的值。也就是说，如果 "),a("code",[t._v("Point")]),t._v(" 实现了 "),a("code",[t._v("Display")]),t._v(" 并返回 "),a("code",[t._v("(x, y)")]),t._v("，调用以 1 作为 "),a("code",[t._v("x")]),t._v(" 和 3 作为 "),a("code",[t._v("y")]),t._v(" 的 "),a("code",[t._v("Point")]),t._v(" 实例的 "),a("code",[t._v("outline_print")]),t._v(" 会显示如下：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("**********\n*        *\n* (1, 3) *\n*        *\n**********\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在 "),a("code",[t._v("outline_print")]),t._v(" 的实现中，因为希望能够使用 "),a("code",[t._v("Display")]),t._v(" trait 的功能，则需要说明 "),a("code",[t._v("OutlinePrint")]),t._v(" 只能用于同时也实现了 "),a("code",[t._v("Display")]),t._v(" 并提供了 "),a("code",[t._v("OutlinePrint")]),t._v(" 需要的功能的类型。可以通过在 trait 定义中指定 "),a("code",[t._v("OutlinePrint: Display")]),t._v(" 来做到这一点。这类似于为 trait 增加 trait bound。示例 19-30 展示了一个 "),a("code",[t._v("OutlinePrint")]),t._v(" trait 的实现：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("fmt"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" OutlinePrint"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" fmt"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Display "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("outline_print")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" output "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("to_string")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" len "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" output"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("len")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"{}"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"*"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("repeat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("len "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"*{}*"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('" "')]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("repeat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("len "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"* {} *"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" output"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"*{}*"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('" "')]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("repeat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("len "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"{}"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"*"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("repeat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("len "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 19-30: 实现 "),s("code",[this._v("OutlinePrint")]),this._v(" trait，它要求来自 "),s("code",[this._v("Display")]),this._v(" 的功能")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("因为指定了 "),a("code",[t._v("OutlinePrint")]),t._v(" 需要 "),a("code",[t._v("Display")]),t._v(" trait，则可以在 "),a("code",[t._v("outline_print")]),t._v(" 中使用 "),a("code",[t._v("to_string")]),t._v("， 其会为任何实现 "),a("code",[t._v("Display")]),t._v(" 的类型自动实现。如果不在 trait 名后增加 "),a("code",[t._v(": Display")]),t._v(" 并尝试在 "),a("code",[t._v("outline_print")]),t._v(" 中使用 "),a("code",[t._v("to_string")]),t._v("，则会得到一个错误说在当前作用域中没有找到用于 "),a("code",[t._v("&Self")]),t._v(" 类型的方法 "),a("code",[t._v("to_string")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("让我们看看如果尝试在一个没有实现 "),s("code",[this._v("Display")]),this._v(" 的类型上实现 "),s("code",[this._v("OutlinePrint")]),this._v(" 会发生什么，比如 "),s("code",[this._v("Point")]),this._v(" 结构体：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[t._v("# "),a("span",{attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" OutlinePrint "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Point "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    y"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" OutlinePrint "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" Point "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这样会得到一个错误说 "),s("code",[this._v("Display")]),this._v(" 是必须的而未被实现：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("error[E0277]: the trait bound `Point: std::fmt::Display` is not satisfied\n  --\x3e src/main.rs:20:6\n   |\n20 | impl OutlinePrint for Point {}\n   |      ^^^^^^^^^^^^ `Point` cannot be formatted with the default formatter;\n   try using `:?` instead if you are using a format string\n   |\n   = help: the trait `std::fmt::Display` is not implemented for `Point`\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("一旦在 "),s("code",[this._v("Point")]),this._v(" 上实现 "),s("code",[this._v("Display")]),this._v(" 并满足 "),s("code",[this._v("OutlinePrint")]),this._v(" 要求的限制，比如这样：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[t._v("# "),a("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Point "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     x"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     y"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),a("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("fmt"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" fmt"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Display "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" Point "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("fmt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" fmt"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Formatter"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" fmt"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Result "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token function"}},[t._v("write!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"({}, {})"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("那么在 "),a("code",[t._v("Point")]),t._v(" 上实现 "),a("code",[t._v("OutlinePrint")]),t._v(" trait 将能成功编译并可以在 "),a("code",[t._v("Point")]),t._v(" 实例上调用 "),a("code",[t._v("outline_print")]),t._v(" 来显示位于星号框中的点的值。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"newtype-模式用以在外部类型上实现外部-trait"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#newtype-模式用以在外部类型上实现外部-trait","aria-hidden":"true"}},[this._v("#")]),this._v(" newtype 模式用以在外部类型上实现外部 trait")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在第十章的 “为类型实现 trait” 部分，我们提到了孤儿规则（orphan rule），它说明只要 trait 或类型对于当前 crate 是本地的话就可以在此类型上实现该 trait。一个绕开这个限制的方法是使用"),s("strong",[this._v("newtype 模式")]),this._v("（"),s("em",[this._v("newtype pattern")]),this._v("），它涉及到在一个元组结构体（第五章 “用没有命名字段的元组结构体来创建不同的类型” 部分介绍了元组结构体）中创建一个新类型。这个元组结构体带有一个字段作为希望实现 trait 的类型的简单封装。接着这个封装类型对于 crate 是本地的，这样就可以在这个封装上实现 trait。“Newtype” 是一个源自（U.C.0079，逃）Haskell 编程语言的概念。使用这个模式没有运行时性能惩罚，这个封装类型在编译时就被省略了。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("例如，如果想要在 "),a("code",[t._v("Vec")]),t._v(" 上实现 "),a("code",[t._v("Display")]),t._v("，而孤儿规则阻止我们直接这么做，因为 "),a("code",[t._v("Display")]),t._v(" trait 和 "),a("code",[t._v("Vec")]),t._v(" 都定义于我们的 crate 之外。可以创建一个包含 "),a("code",[t._v("Vec")]),t._v(" 实例的 "),a("code",[t._v("Wrapper")]),t._v(" 结构体，接着可以如列表 19-31 那样在 "),a("code",[t._v("Wrapper")]),t._v(" 上实现 "),a("code",[t._v("Display")]),t._v(" 并使用 "),a("code",[t._v("Vec")]),t._v(" 的值：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以创建一个包含 "),a("code",[t._v("Vec")]),t._v(" 实例的 "),a("code",[t._v("Wrapper")]),t._v(" 结构体。接着可以如列表 19-30 那样在 "),a("code",[t._v("Wrapper")]),t._v(" 上实现 "),a("code",[t._v("Display")]),t._v(" 并使用 "),a("code",[t._v("Vec")]),t._v(" 的值：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("fmt"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("Wrapper")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Vec"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("String"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" fmt"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Display "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" Wrapper "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("fmt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),a("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" fmt"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Formatter"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" fmt"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Result "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token function"}},[t._v("write!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"[{}]"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("join")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('", "')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("main")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" w "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("Wrapper")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("vec!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" String"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"world"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("println!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"w = {}"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" w"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 19-31: 创建 "),s("code",[this._v("Wrapper")]),this._v(" 类型封装 "),s("code",[this._v("Vec<String>")]),this._v(" 以便能够实现 "),s("code",[this._v("Display")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("Display")]),t._v(" 的实现使用 "),a("code",[t._v("self.0")]),t._v(" 来访问其内部的 "),a("code",[t._v("Vec")]),t._v("，因为 "),a("code",[t._v("Wrapper")]),t._v(" 是元组结构体而 "),a("code",[t._v("Vec")]),t._v(" 是结构体总位于索引 0 的项。接着就可以使用 "),a("code",[t._v("Wrapper")]),t._v(" 中 "),a("code",[t._v("Display")]),t._v(" 的功能了。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("此方法的缺点是，因为 "),a("code",[t._v("Wrapper")]),t._v(" 是一个新类型，它没有定义于其值之上的方法；必须直接在 "),a("code",[t._v("Wrapper")]),t._v(" 上实现 "),a("code",[t._v("Vec")]),t._v(" 的所有方法，这样就可以代理到"),a("code",[t._v("self.0")]),t._v(" 上 —— 这就允许我们完全像 "),a("code",[t._v("Vec")]),t._v(" 那样对待 "),a("code",[t._v("Wrapper")]),t._v("。如果希望新类型拥有其内部类型的每一个方法，为封装类型实现 "),a("code",[t._v("Deref")]),t._v(" trait（第十五章 “通过 "),a("code",[t._v("Deref")]),t._v(" trait 将智能指针当作常规引用处理” 部分讨论过）并返回其内部类型是一种解决方案。如果不希望封装类型拥有所有内部类型的方法，比如为了限制封装类型的行为，则必须只自行实现所需的方法。")])}],!1,null,null,null);e.options.__file="ch19-03-advanced-traits.md";s.default=e.exports}}]);