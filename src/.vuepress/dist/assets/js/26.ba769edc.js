(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{256:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch04-01-what-is-ownership.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch04-01-what-is-ownership.md"),n("OutboundLink")],1),t._v(" "),n("br"),t._v("\ncommit a86c1d315789b3ca13b20d50ad5005c62bdd9e37")])]),t._v(" "),t._m(1),t._v(" "),n("p",[t._v("所有运行的程序都必须管理其使用计算机内存的方式。一些语言中具有垃圾回收机制，在程序运行时不断地寻找不再使用的内存；在另一些语言中，程序员必须亲自分配和释放内存。Rust 则选择了第三种方式：通过所有权系统管理内存，编译器在编译时会根据一系列的规则进行检查。在运行时，所有权系统的任何功能都不会减慢程序。")]),t._v(" "),n("p",[t._v("因为所有权对很多程序员来说都是一个新概念，需要一些时间来适应。好消息是随着你对 Rust 和所有权系统的规则越来越有经验，你就越能自然地编写出安全和高效的代码。持之以恒！")]),t._v(" "),n("p",[t._v("当你理解了所有权，你将有一个坚实的基础来理解那些使 Rust 独特的功能。在本章中，你将通过完成一些示例来学习所有权，这些示例基于一个常用的数据结构：字符串。")]),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),n("p",[t._v("首先，让我们看一下所有权的规则。当我们通过举例说明时，请谨记这些规则：")]),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._m(9),t._v(" "),t._m(10),t._m(11),t._v(" "),n("p",[t._v("换句话说，这里有两个重要的时间点：")]),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),n("p",[t._v("为了演示所有权的规则，我们需要一个比第三章 “数据类型” 中讲到的都要复杂的数据类型。前面介绍的类型都是存储在栈上的并且当离开作用域时被移出栈，不过我们需要寻找一个存储在堆上的数据来探索 Rust 是如何知道该在何时清理数据的。")]),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._m(21),t._v(" "),t._m(22),t._v(" "),n("p",[t._v("就字符串字面值来说，我们在编译时就知道其内容，所以文本被直接硬编码进最终的可执行文件中。这使得字符串字面值快速且高效。不过这些特性都只得益于字符串字面值的不可变性。不幸的是，我们不能为了每一个在编译时大小未知的文本而将一块内存放入二进制文件中，并且它的大小还可能随着程序运行而改变。")]),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._m(29),t._v(" "),t._m(30),t._v(" "),n("p",[t._v("这个模式对编写 Rust 代码的方式有着深远的影响。现在它看起来很简单，不过在更复杂的场景下代码的行为可能是不可预测的，比如当有多个变量使用在堆上分配的内存时。现在让我们探索一些这样的场景。")]),t._v(" "),t._m(31),t._v(" "),n("p",[t._v("Rust 中的多个变量可以采用一种独特的方式与同一数据交互。让我们看看示例 4-2 中一个使用整型的例子。")]),t._v(" "),t._m(32),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35),t._v(" "),t._m(36),t._m(37),t._v(" "),t._m(38),t._v(" "),n("img",{staticClass:"center",staticStyle:{width:"50%"},attrs:{alt:"String in memory",src:"img/trpl04-01.svg"}}),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),t._m(41),t._v(" "),n("img",{staticClass:"center",staticStyle:{width:"50%"},attrs:{alt:"s1 and s2 pointing to the same value",src:"img/trpl04-02.svg"}}),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),n("img",{staticClass:"center",staticStyle:{width:"50%"},attrs:{alt:"s1 and s2 to two places",src:"img/trpl04-03.svg"}}),t._v(" "),t._m(44),t._v(" "),t._m(45),t._v(" "),t._m(46),t._v(" "),t._m(47),n("p",[t._v("你会得到一个类似如下的错误，因为 Rust 禁止你使用无效的引用。")]),t._v(" "),t._m(48),t._m(49),t._v(" "),n("img",{staticClass:"center",staticStyle:{width:"50%"},attrs:{alt:"s1 moved to s2",src:"img/trpl04-04.svg"}}),t._v(" "),t._m(50),t._v(" "),t._m(51),t._v(" "),t._m(52),t._v(" "),t._m(53),t._v(" "),t._m(54),t._v(" "),t._m(55),t._v(" "),t._m(56),t._m(57),t._v(" "),t._m(58),t._v(" "),t._m(59),t._v(" "),n("p",[t._v("这里还有一个没有提到的小窍门。这些代码使用了整型并且是有效的，他们是示例 4-2 中的一部分：")]),t._v(" "),t._m(60),t._m(61),t._v(" "),t._m(62),t._v(" "),t._m(63),t._v(" "),t._m(64),t._v(" "),t._m(65),t._v(" "),t._m(66),t._v(" "),n("p",[t._v("将值传递给函数在语义上与给变量赋值相似。向函数传递值可能会移动或者复制，就像赋值语句一样。示例 4-3 使用注释展示变量何时进入和离开作用域：")]),t._v(" "),t._m(67),t._v(" "),t._m(68),t._m(69),t._v(" "),t._m(70),t._v(" "),t._m(71),t._v(" "),n("p",[t._v("返回值也可以转移所有权。示例 4-4 与示例 4-3 一样带有类似的注释。")]),t._v(" "),t._m(72),t._v(" "),t._m(73),t._m(74),t._v(" "),t._m(75),t._v(" "),n("p",[t._v("在每一个函数中都获取所有权并接着返回所有权有些啰嗦。如果我们想要函数使用一个值但不获取所有权该怎么办呢？如果我们还要接着使用它的话，每次都传进去再返回来就有点烦人了，除此之外，我们也可能想返回函数体中产生的一些数据。")]),t._v(" "),n("p",[t._v("我们可以使用元组来返回多个值，如示例 4-5 所示。")]),t._v(" "),t._m(76),t._v(" "),t._m(77),t._m(78),t._v(" "),t._m(79)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"什么是所有权"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是所有权","aria-hidden":"true"}},[this._v("#")]),this._v(" 什么是所有权")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Rust 的核心功能（之一）是 "),s("strong",[this._v("所有权")]),this._v("（"),s("em",[this._v("ownership")]),this._v("）。虽然该功能很容易解释，但它对语言的其他部分有着深刻的影响。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("blockquote",[n("h3",{attrs:{id:"栈（stack）与堆（heap）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#栈（stack）与堆（heap）","aria-hidden":"true"}},[t._v("#")]),t._v(" 栈（Stack）与堆（Heap）")]),t._v(" "),n("p",[t._v("在很多语言中，你并不需要经常考虑到栈与堆。不过在像 Rust 这样的系统编程语言中，值是位于栈上还是堆上在更大程度上影响了语言的行为以及为何必须做出这样的抉择。我们会在本章的稍后部分描述所有权与栈和堆相关的内容，所以这里只是一个用来预热的简要解释。")]),t._v(" "),n("p",[t._v("栈和堆都是代码在运行时可供使用的内存，但是它们的结构不同。栈以放入值的顺序存储值并以相反顺序取出值。这也被称作 "),n("strong",[t._v("后进先出")]),t._v("（"),n("em",[t._v("last in, first out")]),t._v("）。想象一下一叠盘子：当增加更多盘子时，把它们放在盘子堆的顶部，当需要盘子时，也从顶部拿走。不能从中间也不能从底部增加或拿走盘子！增加数据叫做 "),n("strong",[t._v("进栈")]),t._v("（"),n("em",[t._v("pushing onto the stack")]),t._v("），而移出数据叫做 "),n("strong",[t._v("出栈")]),t._v("（"),n("em",[t._v("popping off the stack")]),t._v("）。")]),t._v(" "),n("p",[t._v("栈的操作是十分快速的，这主要是得益于它存取数据的方式：因为数据存取的位置总是在栈顶而不需要寻找一个位置存放或读取数据。另一个让操作栈快速的属性是，栈中的所有数据都必须占用已知且固定的大小。")]),t._v(" "),n("p",[t._v("在编译时大小未知或大小可能变化的数据，要改为存储在堆上。堆是缺乏组织的：当向堆放入数据时，你要请求一定大小的空间。操作系统在堆的某处找到一块足够大的空位，把它标记为已使用，并返回一个表示该位置地址的 "),n("strong",[t._v("指针")]),t._v("（"),n("em",[t._v("pointer")]),t._v("）。这个过程称作 "),n("strong",[t._v("在堆上分配内存")]),t._v("（"),n("em",[t._v("allocating on the heap")]),t._v("），有时简称为 “分配”（allocating）。将数据推入栈中并不被认为是分配。因为指针的大小是已知并且固定的，你可以将指针存储在栈上，不过当需要实际数据时，必须访问指针。")]),t._v(" "),n("p",[t._v("想象一下去餐馆就座吃饭。当进入时，你说明有几个人，餐馆员工会找到一个够大的空桌子并领你们过去。如果有人来迟了，他们也可以通过询问来找到你们坐在哪。")]),t._v(" "),n("p",[t._v("访问堆上的数据比访问栈上的数据慢，因为必须通过指针来访问。现代处理器在内存中跳转越少就越快（缓存）。继续类比，假设有一个服务员在餐厅里处理多个桌子的点菜。在一个桌子报完所有菜后再移动到下一个桌子是最有效率的。从桌子 A 听一个菜，接着桌子 B 听一个菜，然后再桌子 A，然后再桌子 B 这样的流程会更加缓慢。出于同样原因，处理器在处理的数据彼此较近的时候（比如在栈上）比较远的时候（比如可能在堆上）能更好的工作。在堆上分配大量的空间也可能消耗时间。")]),t._v(" "),n("p",[t._v("当你的代码调用一个函数时，传递给函数的值（包括可能指向堆上数据的指针）和函数的局部变量被压入栈中。当函数结束时，这些值被移出栈。")]),t._v(" "),n("p",[t._v("跟踪哪部分代码正在使用堆上的哪些数据，最大限度的减少堆上的重复数据的数量，以及清理堆上不再使用的数据确保不会耗尽空间，这些问题正是所有权系统要处理的。一旦理解了所有权，你就不需要经常考虑栈和堆了，不过明白了所有权的存在就是为了管理堆数据，能够帮助解释为什么所有权要以这种方式工作。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"所有权规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#所有权规则","aria-hidden":"true"}},[this._v("#")]),this._v(" 所有权规则")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("blockquote",[n("ol",[n("li",[t._v("Rust 中的每一个值都有一个被称为其 "),n("strong",[t._v("所有者")]),t._v("（"),n("em",[t._v("owner")]),t._v("）的变量。")]),t._v(" "),n("li",[t._v("值有且只有一个所有者。")]),t._v(" "),n("li",[t._v("当所有者（变量）离开作用域，这个值将被丢弃。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"变量作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量作用域","aria-hidden":"true"}},[this._v("#")]),this._v(" 变量作用域")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们已经在第二章完成一个 Rust 程序示例。既然我们已经掌握了基本语法，将不会在之后的例子中包含 "),s("code",[this._v("fn main() {")]),this._v(" 代码，所以如果你是一路跟过来的，必须手动将之后例子的代码放入一个 "),s("code",[this._v("main")]),this._v(" 函数中。这样，例子将显得更加简明，使我们可以关注实际细节而不是样板代码。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在所有权的第一个例子中，我们看看一些变量的 "),s("strong",[this._v("作用域")]),this._v("（"),s("em",[this._v("scope")]),this._v("）。作用域是一个项（item）在程序中有效的范围。假设有这样一个变量：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[this._v("let")]),this._v(" s "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{attrs:{class:"token string"}},[this._v('"hello"')]),s("span",{attrs:{class:"token punctuation"}},[this._v(";")]),this._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("变量 "),s("code",[this._v("s")]),this._v(" 绑定到了一个字符串字面值，这个字符串值是硬编码进程序代码中的。这个变量从声明的点开始直到当前 "),s("strong",[this._v("作用域")]),this._v(" 结束时都是有效的。示例 4-1 的注释标明了变量 "),s("code",[this._v("s")]),this._v(" 在何处是有效的。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("                      "),n("span",{attrs:{class:"token comment"}},[t._v("// s 在这里无效, 它尚未声明")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"hello"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),n("span",{attrs:{class:"token comment"}},[t._v("// 从此处起，s 是有效的")]),t._v("\n\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// 使用 s")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("                      "),n("span",{attrs:{class:"token comment"}},[t._v("// 此作用域已结束，s 不再有效")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 4-1：一个变量和其有效的作用域")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ul",[n("li",[t._v("当 "),n("code",[t._v("s")]),t._v(" "),n("strong",[t._v("进入作用域")]),t._v(" 时，它就是有效的。")]),t._v(" "),n("li",[t._v("这一直持续到它 "),n("strong",[t._v("离开作用域")]),t._v(" 为止。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("目前为止，变量是否有效与作用域的关系跟其他编程语言是类似的。现在我们在此基础上介绍 "),s("code",[this._v("String")]),this._v(" 类型。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"string-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-类型","aria-hidden":"true"}},[this._v("#")]),this._v(" "),s("code",[this._v("String")]),this._v(" 类型")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里使用 "),s("code",[this._v("String")]),this._v(" 作为例子，并专注于 "),s("code",[this._v("String")]),this._v(" 与所有权相关的部分。这些方面也同样适用于标准库提供的或你自己创建的其他复杂数据类型。在第八章会更深入地讲解 "),s("code",[this._v("String")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们已经见过字符串字面值，字符串值被硬编码进程序里。字符串字面值是很方便的，不过他们并不适合使用文本的每一种场景。原因之一就是他们是不可变的。另一个原因是并不是所有字符串的值都能在编写代码时就知道：例如，要是想获取用户输入并存储该怎么办呢？为此，Rust 有第二个字符串类型，"),s("code",[this._v("String")]),this._v("。这个类型被分配到堆上，所以能够存储在编译时未知大小的文本。可以使用 "),s("code",[this._v("from")]),this._v(" 函数基于字符串字面值来创建 "),s("code",[this._v("String")]),this._v("，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"hello"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这两个冒号（"),n("code",[t._v("::")]),t._v("）是运算符，允许将特定的 "),n("code",[t._v("from")]),t._v(" 函数置于 "),n("code",[t._v("String")]),t._v(" 类型的命名空间（namespace）下，而不需要使用类似 "),n("code",[t._v("string_from")]),t._v(" 这样的名字。在第五章的 “方法语法”（“Method Syntax”）部分会着重讲解这个语法而且在第七章的 “模块定义” 中会讲到模块的命名空间。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("可以")]),this._v(" 修改此类字符串 ：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" s "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"hello"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ns"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("push_str")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('", world!"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// push_str() 在字符串后追加字面值")]),t._v("\n\n"),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"{}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// 将打印 `hello, world!`")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么这里有什么区别呢？为什么 "),s("code",[this._v("String")]),this._v(" 可变而字面值却不行呢？区别在于两个类型对内存的处理上。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"内存与分配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存与分配","aria-hidden":"true"}},[this._v("#")]),this._v(" 内存与分配")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("对于 "),s("code",[this._v("String")]),this._v(" 类型，为了支持一个可变，可增长的文本片段，需要在堆上分配一块在编译时未知大小的内存来存放内容。这意味着：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("必须在运行时向操作系统请求内存。")]),this._v(" "),s("li",[this._v("需要一个当我们处理完 "),s("code",[this._v("String")]),this._v(" 时将内存返回给操作系统的方法。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("第一部分由我们完成：当调用 "),s("code",[this._v("String::from")]),this._v(" 时，它的实现 ("),s("em",[this._v("implementation")]),this._v(") 请求其所需的内存。这在编程语言中是非常通用的。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("然而，第二部分实现起来就各有区别了。在有 "),n("strong",[t._v("垃圾回收")]),t._v("（"),n("em",[t._v("garbage collector")]),t._v("，"),n("em",[t._v("GC")]),t._v("）的语言中， GC 记录并清除不再使用的内存，而我们并不需要关心它。没有 GC 的话，识别出不再使用的内存并调用代码显式释放就是我们的责任了，跟请求内存的时候一样。从历史的角度上说正确处理内存回收曾经是一个困难的编程问题。如果忘记回收了会浪费内存。如果过早回收了，将会出现无效变量。如果重复回收，这也是个 bug。我们需要精确的为一个 "),n("code",[t._v("allocate")]),t._v(" 配对一个 "),n("code",[t._v("free")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Rust 采取了一个不同的策略：内存在拥有它的变量离开作用域后就被自动释放。下面是示例 4-1 中作用域例子的一个使用 "),s("code",[this._v("String")]),this._v(" 而不是字符串字面值的版本：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"hello"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// 从此处起，s 是有效的")]),t._v("\n\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// 使用 s")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("                                  "),n("span",{attrs:{class:"token comment"}},[t._v("// 此作用域已结束，")]),t._v("\n                                   "),n("span",{attrs:{class:"token comment"}},[t._v("// s 不再有效")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这是一个将 "),n("code",[t._v("String")]),t._v(" 需要的内存返回给操作系统的很自然的位置：当 "),n("code",[t._v("s")]),t._v(" 离开作用域的时候。当变量离开作用域，Rust 为我们调用一个特殊的函数。这个函数叫做 "),n("code",[t._v("drop")]),t._v("，在这里 "),n("code",[t._v("String")]),t._v(" 的作者可以放置释放内存的代码。Rust 在结尾的 "),n("code",[t._v("}")]),t._v(" 处自动调用 "),n("code",[t._v("drop")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("注意：在 C++ 中，这种 item 在生命周期结束时释放资源的模式有时被称作 "),s("strong",[this._v("资源获取即初始化")]),this._v("（"),s("em",[this._v("Resource Acquisition Is Initialization (RAII)")]),this._v("）。如果你使用过 RAII 模式的话应该对 Rust 的 "),s("code",[this._v("drop")]),this._v(" 函数并不陌生。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"变量与数据交互的方式（一）：移动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量与数据交互的方式（一）：移动","aria-hidden":"true"}},[this._v("#")]),this._v(" 变量与数据交互的方式（一）：移动")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("5")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" y "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 4-2：将变量 "),s("code",[this._v("x")]),this._v(" 的整数值赋给 "),s("code",[this._v("y")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("我们大致可以猜到这在干什么：“将 "),n("code",[t._v("5")]),t._v(" 绑定到 "),n("code",[t._v("x")]),t._v("；接着生成一个值 "),n("code",[t._v("x")]),t._v(" 的拷贝并绑定到 "),n("code",[t._v("y")]),t._v("”。现在有了两个变量，"),n("code",[t._v("x")]),t._v(" 和 "),n("code",[t._v("y")]),t._v("，都等于 "),n("code",[t._v("5")]),t._v("。这也正是事实上发生了的，因为正数是有已知固定大小的简单值，所以这两个 "),n("code",[t._v("5")]),t._v(" 被放入了栈中。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在看看这个 "),s("code",[this._v("String")]),this._v(" 版本：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s1 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"hello"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s2 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" s1"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这看起来与上面的代码非常类似，所以我们可能会假设他们的运行方式也是类似的：也就是说，第二行可能会生成一个 "),s("code",[this._v("s1")]),this._v(" 的拷贝并绑定到 "),s("code",[this._v("s2")]),this._v(" 上。不过，事实上并不完全是这样。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("看看图 4-1 以了解 "),s("code",[this._v("String")]),this._v(" 的底层会发生什么。"),s("code",[this._v("String")]),this._v(" 由三部分组成，如图左侧所示：一个指向存放字符串内容内存的指针，一个长度，和一个容量。这一组数据存储在栈上。右侧则是堆上存放内容的内存部分。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("图 4-1：将值 "),s("code",[this._v('"hello"')]),this._v(" 绑定给 "),s("code",[this._v("s1")]),this._v(" 的 "),s("code",[this._v("String")]),this._v(" 在内存中的表现形式")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("长度表示 "),s("code",[this._v("String")]),this._v(" 的内容当前使用了多少字节的内存。容量是 "),s("code",[this._v("String")]),this._v(" 从操作系统总共获取了多少字节的内存。长度与容量的区别是很重要的，不过在当前上下文中并不重要，所以现在可以忽略容量。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当我们将 "),s("code",[this._v("s1")]),this._v(" 赋值给 "),s("code",[this._v("s2")]),this._v("，"),s("code",[this._v("String")]),this._v(" 的数据被复制了，这意味着我们从栈上拷贝了它的指针、长度和容量。我们并没有复制指针指向的堆上数据。换句话说，内存中数据的表现如图 4-2 所示。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("图 4-2：变量 "),s("code",[this._v("s2")]),this._v(" 的内存表现，它有一份 "),s("code",[this._v("s1")]),this._v(" 指针、长度和容量的拷贝")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这个表现形式看起来 "),s("strong",[this._v("并不像")]),this._v(" 图 4-3 中的那样，如果 Rust 也拷贝了堆上的数据，那么内存看起来就是这样的。如果 Rust 这么做了，那么操作 "),s("code",[this._v("s2 = s1")]),this._v(" 在堆上数据比较大的时候会对运行时性能造成非常大的影响。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("图 4-3：另一个 "),s("code",[this._v("s2 = s1")]),this._v(" 时可能的内存表现，如果 Rust 同时也拷贝了堆上的数据的话")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("之前我们提到过当变量离开作用域后，Rust 自动调用 "),n("code",[t._v("drop")]),t._v(" 函数并清理变量的堆内存。不过图 4-2 展示了两个数据指针指向了同一位置。这就有了一个问题：当 "),n("code",[t._v("s2")]),t._v(" 和 "),n("code",[t._v("s1")]),t._v(" 离开作用域，他们都会尝试释放相同的内存。这是一个叫做 "),n("strong",[t._v("二次释放")]),t._v("（"),n("em",[t._v("double free")]),t._v("）的错误，也是之前提到过的内存安全性 bug 之一。两次释放（相同）内存会导致内存污染，它可能会导致潜在的安全漏洞。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("为了确保内存安全，这种场景下 Rust 的处理有另一个细节值得注意。与其尝试拷贝被分配的内存，Rust 则认为 "),n("code",[t._v("s1")]),t._v(" 不再有效，因此 Rust 不需要在 "),n("code",[t._v("s1")]),t._v(" 离开作用域后清理任何东西。看看在 "),n("code",[t._v("s2")]),t._v(" 被创建之后尝试使用 "),n("code",[t._v("s1")]),t._v(" 会发生什么；这段代码不能运行：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore,does_not_compile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('let s1 = String::from("hello");\nlet s2 = s1;\n\nprintln!("{}, world!", s1);\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('error[E0382]: use of moved value: `s1`\n --\x3e src/main.rs:5:28\n  |\n3 |     let s2 = s1;\n  |         -- value moved here\n4 |\n5 |     println!("{}, world!", s1);\n  |                            ^^ value used here after move\n  |\n  = note: move occurs because `s1` has type `std::string::String`, which does\n  not implement the `Copy` trait\n')])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("如果你在其他语言中听说过术语 "),n("strong",[t._v("浅拷贝")]),t._v("（"),n("em",[t._v("shallow copy")]),t._v("）和 "),n("strong",[t._v("深拷贝")]),t._v("（"),n("em",[t._v("deep copy")]),t._v("），那么拷贝指针、长度和容量而不拷贝数据可能听起来像浅拷贝。不过因为 Rust 同时使第一个变量无效了，这个操作被称为 "),n("strong",[t._v("移动")]),t._v("（"),n("em",[t._v("move")]),t._v("），而不是浅拷贝。上面的例子可以解读为 "),n("code",[t._v("s1")]),t._v(" 被 "),n("strong",[t._v("移动")]),t._v(" 到了 "),n("code",[t._v("s2")]),t._v(" 中。那么具体发生了什么，如图 4-4 所示。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("图 4-4："),s("code",[this._v("s1")]),this._v(" 无效之后的内存表现")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这样就解决了我们的问题！因为只有 "),s("code",[this._v("s2")]),this._v(" 是有效的，当其离开作用域，它就释放自己的内存，完毕。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("另外，这里还隐含了一个设计选择：Rust 永远也不会自动创建数据的 “深拷贝”。因此，任何 "),s("strong",[this._v("自动")]),this._v(" 的复制可以被认为对运行时性能影响较小。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"变量与数据交互的方式（二）：克隆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量与数据交互的方式（二）：克隆","aria-hidden":"true"}},[this._v("#")]),this._v(" 变量与数据交互的方式（二）：克隆")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果我们 "),s("strong",[this._v("确实")]),this._v(" 需要深度复制 "),s("code",[this._v("String")]),this._v(" 中堆上的数据，而不仅仅是栈上的数据，可以使用一个叫做 "),s("code",[this._v("clone")]),this._v(" 的通用函数。第五章会讨论方法语法，不过因为方法在很多语言中是一个常见功能，所以之前你可能已经见过了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这是一个实际使用 "),s("code",[this._v("clone")]),this._v(" 方法的例子：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s1 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"hello"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s2 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" s1"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("clone")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"s1 = {}, s2 = {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s1"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s2"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这段代码能正常运行，并且明确产生图 4-3 中行为，这里堆上的数据 "),s("strong",[this._v("确实")]),this._v(" 被复制了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当出现 "),s("code",[this._v("clone")]),this._v(" 调用时，你知道一些特定的代码被执行而且这些代码可能相当消耗资源。你很容易察觉到一些不寻常的事情正在发生。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"只在栈上的数据：拷贝"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#只在栈上的数据：拷贝","aria-hidden":"true"}},[this._v("#")]),this._v(" 只在栈上的数据：拷贝")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("5")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" y "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"x = {}, y = {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("但这段代码似乎与我们刚刚学到的内容相矛盾：没有调用 "),s("code",[this._v("clone")]),this._v("，不过 "),s("code",[this._v("x")]),this._v(" 依然有效且没有被移动到 "),s("code",[this._v("y")]),this._v(" 中。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("原因是像整型这样的在编译时已知大小的类型被整个存储在栈上，所以拷贝其实际的值是快速的。这意味着没有理由在创建变量 "),s("code",[this._v("y")]),this._v(" 后使 "),s("code",[this._v("x")]),this._v(" 无效。换句话说，这里没有深浅拷贝的区别，所以这里调用 "),s("code",[this._v("clone")]),this._v(" 并不会与通常的浅拷贝有什么不同，我们可以不用管它。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("Rust 有一个叫做 "),n("code",[t._v("Copy")]),t._v(" trait 的特殊注解，可以用在类似整型这样的存储在栈上的类型上（第十章详细讲解 trait）。如果一个类型拥有 "),n("code",[t._v("Copy")]),t._v(" trait，一个旧的变量在将其赋值给其他变量后仍然可用。Rust 不允许自身或其任何部分实现了 "),n("code",[t._v("Drop")]),t._v(" trait 的类型使用 "),n("code",[t._v("Copy")]),t._v(" trait。如果我们对其值离开作用域时需要特殊处理的类型使用 "),n("code",[t._v("Copy")]),t._v(" 注解，将会出现一个编译时错误。要学习如何为你的类型增加 "),n("code",[t._v("Copy")]),t._v(" 注解，请阅读附录 C 中的 “可派生的 trait”。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("那么什么类型是 "),n("code",[t._v("Copy")]),t._v(" 的呢？可以查看给定类型的文档来确认，不过作为一个通用的规则，任何简单标量值的组合可以是 "),n("code",[t._v("Copy")]),t._v(" 的，不需要分配内存或某种形式资源的类型是 "),n("code",[t._v("Copy")]),t._v(" 的。如下是一些 "),n("code",[t._v("Copy")]),t._v(" 的类型：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ul",[n("li",[t._v("所有整数类型，比如 "),n("code",[t._v("u32")]),t._v("。")]),t._v(" "),n("li",[t._v("布尔类型，"),n("code",[t._v("bool")]),t._v("，它的值是 "),n("code",[t._v("true")]),t._v(" 和 "),n("code",[t._v("false")]),t._v("。")]),t._v(" "),n("li",[t._v("所有浮点数类型，比如 "),n("code",[t._v("f64")]),t._v("。")]),t._v(" "),n("li",[t._v("字符类型，"),n("code",[t._v("char")]),t._v("。")]),t._v(" "),n("li",[t._v("元组，当且仅当其包含的类型也都是 "),n("code",[t._v("Copy")]),t._v(" 的时候。比如，"),n("code",[t._v("(i32, i32)")]),t._v(" 是 "),n("code",[t._v("Copy")]),t._v(" 的，但 "),n("code",[t._v("(i32, String)")]),t._v(" 就不是。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"所有权与函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#所有权与函数","aria-hidden":"true"}},[this._v("#")]),this._v(" 所有权与函数")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"hello"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{attrs:{class:"token comment"}},[t._v("// s 进入作用域")]),t._v("\n\n    "),n("span",{attrs:{class:"token function"}},[t._v("takes_ownership")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("             "),n("span",{attrs:{class:"token comment"}},[t._v("// s 的值移动到函数里 ...")]),t._v("\n                                    "),n("span",{attrs:{class:"token comment"}},[t._v("// ... 所以到这里不再有效")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("5")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                      "),n("span",{attrs:{class:"token comment"}},[t._v("// x 进入作用域")]),t._v("\n\n    "),n("span",{attrs:{class:"token function"}},[t._v("makes_copy")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                  "),n("span",{attrs:{class:"token comment"}},[t._v("// x 应该移动函数里，")]),t._v("\n                                    "),n("span",{attrs:{class:"token comment"}},[t._v("// 但 i32 是 Copy 的，所以在后面可继续使用 x")]),t._v("\n\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// 这里, x 先移出了作用域，然后是 s。但因为 s 的值已被移走，")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 所以不会有特殊操作")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("takes_ownership")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("some_string"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// some_string 进入作用域")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"{}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" some_string"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// 这里，some_string 移出作用域并调用 `drop` 方法。占用的内存被释放")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("makes_copy")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("some_integer"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// some_integer 进入作用域")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"{}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" some_integer"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// 这里，some_integer 移出作用域。不会有特殊操作")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 4-3：带有所有权和作用域注释的函数")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("当尝试在调用 "),n("code",[t._v("takes_ownership")]),t._v(" 后使用 "),n("code",[t._v("s")]),t._v(" 时，Rust 会抛出一个编译时错误。这些静态检查使我们免于犯错。试试在 "),n("code",[t._v("main")]),t._v(" 函数中添加使用 "),n("code",[t._v("s")]),t._v(" 和 "),n("code",[t._v("x")]),t._v(" 的代码来看看哪里能使用他们，以及所有权规则会在哪里阻止我们这么做。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"返回值与作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#返回值与作用域","aria-hidden":"true"}},[this._v("#")]),this._v(" 返回值与作用域")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s1 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("gives_ownership")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),n("span",{attrs:{class:"token comment"}},[t._v("// gives_ownership 将返回值")]),t._v("\n                                        "),n("span",{attrs:{class:"token comment"}},[t._v("// 移给 s1")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s2 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"hello"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),n("span",{attrs:{class:"token comment"}},[t._v("// s2 进入作用域")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s3 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("takes_and_gives_back")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s2"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{attrs:{class:"token comment"}},[t._v("// s2 被移动到")]),t._v("\n                                        "),n("span",{attrs:{class:"token comment"}},[t._v("// takes_and_gives_back 中, ")]),t._v("\n                                        "),n("span",{attrs:{class:"token comment"}},[t._v("// 它也将返回值移给 s3")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// 这里, s3 移出作用域并被丢弃。s2 也移出作用域，但已被移走，")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 所以什么也不会发生。s1 移出作用域并被丢弃")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("gives_ownership")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" String "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("             "),n("span",{attrs:{class:"token comment"}},[t._v("// gives_ownership 将返回值移动给")]),t._v("\n                                             "),n("span",{attrs:{class:"token comment"}},[t._v("// 调用它的函数")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" some_string "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"hello"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// some_string 进入作用域.")]),t._v("\n\n    some_string                              "),n("span",{attrs:{class:"token comment"}},[t._v("// 返回 some_string 并移出给调用的函数")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// takes_and_gives_back 将传入字符串并返回该值")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("takes_and_gives_back")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a_string"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" String "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// a_string 进入作用域")]),t._v("\n\n    a_string  "),n("span",{attrs:{class:"token comment"}},[t._v("// 返回 a_string 并移出给调用的函数")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 4-4: 转移返回值的所有权")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("变量的所有权总是遵循相同的模式：将值赋给另一个变量时移动它。当持有堆中数据值的变量离开作用域时，其值将通过 "),s("code",[this._v("drop")]),this._v(" 被清理掉，除非数据被移动为另一个变量所有。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s1 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"hello"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s2"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" len"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("calculate_length")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("\"The length of '{}' is {}.\"")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s2"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" len"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("calculate_length")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" usize"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" length "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("len")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// len() 返回字符串的长度")]),t._v("\n\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 4-5: 返回参数的所有权")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("但是这未免有些形式主义，而且这种场景应该很常见。幸运的是，Rust 对此提供了一个功能，叫做 "),s("strong",[this._v("引用")]),this._v("（"),s("em",[this._v("references")]),this._v("）。")])}],!1,null,null,null);e.options.__file="ch04-01-what-is-ownership.md";s.default=e.exports}}]);