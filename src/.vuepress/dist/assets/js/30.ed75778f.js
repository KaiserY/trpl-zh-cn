(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{250:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch05-01-defining-structs.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch05-01-defining-structs.md"),n("OutboundLink")],1),t._v(" "),n("br"),t._v("\ncommit a86c1d315789b3ca13b20d50ad5005c62bdd9e37")])]),t._v(" "),n("p",[t._v("结构体和我们在第三章讨论过的元组类似。和元组一样，结构体的每一部分可以是不同类型。但不同于元组，结构体需要命名各部分数据以便能清楚的表明其值的意义。由于有了这些名字，结构体比元组更灵活：不需要依赖顺序来指定或访问实例中的值。")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._m(9),t._v(" "),n("p",[t._v("注意整个实例必须是可变的；Rust 并不允许只将某个字段标记为可变。另外需要注意同其他任何表达式一样，我们可以在函数体的最后一个表达式中构造一个结构体的新实例，来隐式地返回这个实例。")]),t._v(" "),t._m(10),t._v(" "),t._m(11),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"定义并实例化结构体"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义并实例化结构体","aria-hidden":"true"}},[this._v("#")]),this._v(" 定义并实例化结构体")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("定义结构体，需要使用 "),s("code",[this._v("struct")]),this._v(" 关键字并为整个结构体提供一个名字。结构体的名字需要描述它所组合的数据的意义。接着，在大括号中，定义每一部分数据的名字和类型，我们称为 "),s("strong",[this._v("字段")]),this._v("（"),s("em",[this._v("field")]),this._v("）。例如，示例 5-1 展示了一个存储用户账号信息的结构体：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" User "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    username"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    email"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    sign_in_count"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" u64"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    active"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" bool"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 5-1："),s("code",[this._v("User")]),this._v(" 结构体定义")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("一旦定义了结构体后，为了使用它，通过为每个字段指定具体值来创建这个结构体的 "),s("strong",[this._v("实例")]),this._v("。创建一个实例需要以结构体的名字开头，接着在大括号中使用 "),s("code",[this._v("key: value")]),this._v(" 键-值对的形式提供字段，其中 key 是字段的名字，value 是需要存储在字段中的数据值。实例中字段的顺序不需要和它们在结构体中声明的顺序一致。换句话说，结构体的定义就像一个类型的通用模板，而实例则会在这个模板中放入特定数据来创建这个类型的值。例如，可以像示例 5-2 这样来声明一个特定的用户：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" User "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     username"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     email"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     sign_in_count"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" u64"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     active"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" bool"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user1 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" User "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    email"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"someone@example.com"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    username"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"someusername123"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    active"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    sign_in_count"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 5-2：创建 "),s("code",[this._v("User")]),this._v(" 结构体的实例")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("为了从结构体中获取某个特定的值，可以使用点号。如果我们只想要用户的邮箱地址，可以用 "),s("code",[this._v("user1.email")]),this._v("。要更改结构体中的值，如果结构体的实例是可变的，我们可以使用点号并为对应的字段赋值。示例 5-3 展示了如何改变一个可变的 "),s("code",[this._v("User")]),this._v(" 实例 "),s("code",[this._v("email")]),this._v(" 字段的值：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" User "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     username"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     email"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     sign_in_count"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" u64"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     active"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" bool"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" user1 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" User "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    email"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"someone@example.com"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    username"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"someusername123"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    active"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    sign_in_count"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nuser1"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("email "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"anotheremail@example.com"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 5-3：改变 "),s("code",[this._v("User")]),this._v(" 实例 "),s("code",[this._v("email")]),this._v(" 字段的值")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("示例 5-4 显示了一个 "),n("code",[t._v("build_user")]),t._v(" 函数，它返回一个带有给定的 email 和用户名的 "),n("code",[t._v("User")]),t._v(" 结构体实例。"),n("code",[t._v("active")]),t._v(" 字段的值为 "),n("code",[t._v("true")]),t._v("，并且 "),n("code",[t._v("sign_in_count")]),t._v(" 的值为 "),n("code",[t._v("1")]),t._v("。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" User "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     username"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     email"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     sign_in_count"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" u64"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     active"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" bool"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("build_user")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("email"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" username"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" User "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    User "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        email"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" email"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        username"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" username"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        active"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        sign_in_count"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 5-4："),s("code",[this._v("build_user")]),this._v(" 函数获取 email 和用户名并返回 "),s("code",[this._v("User")]),this._v(" 实例")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("为函数参数起与结构体字段相同的名字是可以理解的，但是不得不重复 "),s("code",[this._v("email")]),this._v(" 和 "),s("code",[this._v("username")]),this._v(" 字段名称与变量有些啰嗦。如果结构体有更多字段，重复每个名称就更加烦人了。幸运的是，有一个方便的简写语法！")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"变量与字段同名时的字段初始化简写语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量与字段同名时的字段初始化简写语法","aria-hidden":"true"}},[this._v("#")]),this._v(" 变量与字段同名时的字段初始化简写语法")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("因为示例 5-4 中的参数名与字段名都完全相同，我们可以使用 "),n("strong",[t._v("字段初始化简写语法")]),t._v("（"),n("em",[t._v("field init shorthand")]),t._v("）来重写 "),n("code",[t._v("build_user")]),t._v("，这样其行为与之前完全相同，不过无需重复 "),n("code",[t._v("email")]),t._v(" 和 "),n("code",[t._v("username")]),t._v(" 了，如示例 5-5 所示。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" User "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     username"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     email"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     sign_in_count"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" u64"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     active"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" bool"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("build_user")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("email"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" username"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" User "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    User "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        email"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        username"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        active"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        sign_in_count"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 5-5："),s("code",[this._v("build_user")]),this._v(" 函数使用了字段初始化简写语法，因为 "),s("code",[this._v("email")]),this._v(" 和 "),s("code",[this._v("username")]),this._v(" 参数与结构体字段同名")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这里我们创建了一个新的 "),n("code",[t._v("User")]),t._v(" 结构体实例，它有一个叫做 "),n("code",[t._v("email")]),t._v(" 的字段。我们想要将 "),n("code",[t._v("email")]),t._v(" 字段的值设置为 "),n("code",[t._v("build_user")]),t._v(" 函数 "),n("code",[t._v("email")]),t._v(" 参数的值。因为 "),n("code",[t._v("email")]),t._v(" 字段与 "),n("code",[t._v("email")]),t._v(" 参数有着相同的名称，则只需编写 "),n("code",[t._v("email")]),t._v(" 而不是 "),n("code",[t._v("email: email")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"使用结构体更新语法从其他实例创建实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用结构体更新语法从其他实例创建实例","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用结构体更新语法从其他实例创建实例")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("使用旧实例的大部分值但改变其部分值来创建一个新的结构体实例通常是很有帮助的。这可以通过 "),s("strong",[this._v("结构体更新语法")]),this._v("（"),s("em",[this._v("struct update syntax")]),this._v("）实现。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("首先，示例 5-6 展示了不使用更新语法时，如何在 "),n("code",[t._v("user2")]),t._v(" 中创建一个新 "),n("code",[t._v("User")]),t._v(" 实例。我们为 "),n("code",[t._v("email")]),t._v(" 和 "),n("code",[t._v("username")]),t._v(" 设置了新的值，其他值则使用了实例 5-2 中创建的 "),n("code",[t._v("user1")]),t._v(" 中的同名值：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" User "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     username"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     email"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     sign_in_count"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" u64"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     active"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" bool"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user1 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" User "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     email"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"someone@example.com"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     username"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"someusername123"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     active"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     sign_in_count"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user2 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" User "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    email"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"another@example.com"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    username"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"anotherusername567"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    active"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" user1"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("active"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    sign_in_count"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" user1"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sign_in_count"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 5-6：创建 "),s("code",[this._v("User")]),this._v(" 新实例，其使用了一些来自 "),s("code",[this._v("user1")]),this._v(" 的值")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("使用结构体更新语法，我们可以通过更少的代码来达到相同的效果，如示例 5-7 所示。"),s("code",[this._v("..")]),this._v(" 语法指定了剩余未显式设置值的字段应有与给定实例对应字段相同的值。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" User "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     username"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     email"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     sign_in_count"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" u64"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     active"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" bool"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n# "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user1 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" User "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     email"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"someone@example.com"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     username"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"someusername123"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     active"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     sign_in_count"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user2 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" User "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    email"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"another@example.com"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    username"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"anotherusername567"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v("user1\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("span",{staticClass:"caption"},[t._v("示例 5-7：使用结构体更新语法为一个 "),n("code",[t._v("User")]),t._v(" 实例设置新的 "),n("code",[t._v("email")]),t._v(" 和 "),n("code",[t._v("username")]),t._v(" 值，不过其余值来自 "),n("code",[t._v("user1")]),t._v(" 变量中实例的字段")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("示例 5-7 中的代码也在 "),n("code",[t._v("user2")]),t._v(" 中创建了一个新实例，其有不同的 "),n("code",[t._v("email")]),t._v(" 和 "),n("code",[t._v("username")]),t._v(" 值不过 "),n("code",[t._v("active")]),t._v(" 和 "),n("code",[t._v("sign_in_count")]),t._v(" 字段的值与 "),n("code",[t._v("user1")]),t._v(" 相同。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"使用没有命名字段的元组结构体来创建不同的类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用没有命名字段的元组结构体来创建不同的类型","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用没有命名字段的元组结构体来创建不同的类型")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("也可以定义与元组（在第三章讨论过）类似的结构体，称为 "),s("strong",[this._v("元组结构体")]),this._v("（"),s("em",[this._v("tuple structs")]),this._v("）。元组结构体有着结构体名称提供的含义，但没有具体的字段名，只有字段的类型。当你想给整个元组取一个名字，并使元组成为与其他元组不同的类型时，元组结构体是很有用的，这时像常规结构体那样为每个字段命名就显得多余和形式化了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("定义元组结构体，以 "),s("code",[this._v("struct")]),this._v(" 关键字和结构体名开头并后跟元组中的类型。例如，下面是两个分别叫做 "),s("code",[this._v("Color")]),this._v(" 和 "),s("code",[this._v("Point")]),this._v(" 元组结构体的定义和用法：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Color")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Point")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" black "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Color")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" origin "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Point")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("注意 "),n("code",[t._v("black")]),t._v(" 和 "),n("code",[t._v("origin")]),t._v(" 值的类型不同，因为它们是不同的元组结构体的实例。你定义的每一个结构体有其自己的类型，即使结构体中的字段有着相同的类型。例如，一个获取 "),n("code",[t._v("Color")]),t._v(" 类型参数的函数不能接受 "),n("code",[t._v("Point")]),t._v(" 作为参数，即便这两个类型都由三个 "),n("code",[t._v("i32")]),t._v(" 值组成。在其他方面，元组结构体实例类似于元组：可以将其解构为单独的部分，也可以使用 "),n("code",[t._v(".")]),t._v(" 后跟索引来访问单独的值，等等。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"没有任何字段的类单元结构体"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#没有任何字段的类单元结构体","aria-hidden":"true"}},[this._v("#")]),this._v(" 没有任何字段的类单元结构体")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们也可以定义一个没有任何字段的结构体！它们被称为 "),s("strong",[this._v("类单元结构体")]),this._v("（"),s("em",[this._v("unit-like structs")]),this._v("）因为它们类似于 "),s("code",[this._v("()")]),this._v("，即 unit 类型。类单元结构体常常在你想要在某个类型上实现 trait 但不需要在类型中存储数据的时候发挥作用。我们将在第十章介绍 trait。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("blockquote",[n("h3",{attrs:{id:"结构体数据的所有权"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#结构体数据的所有权","aria-hidden":"true"}},[t._v("#")]),t._v(" 结构体数据的所有权")]),t._v(" "),n("p",[t._v("在示例 5-1 中的 "),n("code",[t._v("User")]),t._v(" 结构体的定义中，我们使用了自身拥有所有权的 "),n("code",[t._v("String")]),t._v(" 类型而不是 "),n("code",[t._v("&str")]),t._v(" 字符串 slice 类型。这是一个有意而为之的选择，因为我们想要这个结构体拥有它所有的数据，为此只要整个结构体是有效的话其数据也是有效的。")]),t._v(" "),n("p",[t._v("可以使结构体存储被其他对象拥有的数据的引用，不过这么做的话需要用上 "),n("strong",[t._v("生命周期")]),t._v("（"),n("em",[t._v("lifetimes")]),t._v("），这是一个第十章会讨论的 Rust 功能。生命周期确保结构体引用的数据有效性跟结构体本身保持一致。如果你尝试在结构体中存储一个引用而不指定生命周期将是无效的，比如这样：")]),t._v(" "),n("p",[n("span",{staticClass:"filename"},[t._v("文件名: src/main.rs")])]),t._v(" "),n("div",{staticClass:"language-rust,ignore,does_not_compile extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('struct User {\n    username: &str,\n    email: &str,\n    sign_in_count: u64,\n    active: bool,\n}\n\nfn main() {\n    let user1 = User {\n        email: "someone@example.com",\n        username: "someusername123",\n        active: true,\n        sign_in_count: 1,\n    };\n}\n')])])]),n("p",[t._v("编译器会抱怨它需要生命周期标识符：")]),t._v(" "),n("div",{staticClass:"language-text extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("error[E0106]: missing lifetime specifier\n --\x3e\n  |\n2 |     username: &str,\n  |               ^ expected lifetime parameter\n\nerror[E0106]: missing lifetime specifier\n --\x3e\n  |\n3 |     email: &str,\n  |            ^ expected lifetime parameter\n")])])]),n("p",[t._v("第十章会讲到如何修复这个问题以便在结构体中存储引用，不过现在，我们会使用像 "),n("code",[t._v("String")]),t._v(" 这类拥有所有权的类型来替代 "),n("code",[t._v("&str")]),t._v(" 这样的引用以修正这个错误。")])])}],!1,null,null,null);e.options.__file="ch05-01-defining-structs.md";s.default=e.exports}}]);