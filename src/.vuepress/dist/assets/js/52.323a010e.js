(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{218:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://github.com/rust-lang/book/blob/master/src/ch10-01-syntax.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ch10-01-syntax.md"),n("OutboundLink")],1),t._v(" "),n("br"),t._v("\ncommit 1fedfc4b96c2017f64ecfcf41a0a07e2e815f24f")])]),t._v(" "),n("p",[t._v("我们可以使用泛型为像函数签名或结构体这样的项创建定义，这样它们就可以用于多种不同的具体数据类型。让我们看看如何使用泛型定义函数、结构体、枚举和方法，然后我们将讨论泛型如何影响代码性能。")]),t._v(" "),t._m(1),t._v(" "),n("p",[t._v("当使用泛型定义函数时，我们在函数签名中通常为参数和返回值指定数据类型的位置放置泛型。以这种方式编写的代码将更灵活并能向函数调用者提供更多功能，同时不引入重复代码。")]),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._m(14),t._v(" "),n("p",[t._v("如果现在就尝试编译这些代码，会出现如下错误：")]),t._v(" "),t._m(15),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._m(22),t._v(" "),n("p",[t._v("其语法类似于函数定义中使用泛型。首先，必须在结构体名称后面的尖括号中声明泛型参数的名称。接着在结构体定义中可以指定具体数据类型的位置使用泛型类型。")]),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35),t._v(" "),t._m(36),t._m(37),t._v(" "),t._m(38),t._v(" "),t._m(39),t._m(40),t._v(" "),n("p",[t._v("当发现代码中有多个只有存放的值的类型有所不同的结构体或枚举定义时，你就应该像之前的函数定义中那样引入泛型类型来减少重复代码。")]),t._v(" "),t._m(41),t._v(" "),n("p",[t._v("也可以在定义中使用泛型在结构体和枚举上实现方法（像第五章那样）。")]),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44),t._m(45),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),t._m(48),t._v(" "),t._m(49),t._m(50),t._v(" "),t._m(51),t._v(" "),t._m(52),t._v(" "),t._m(53),t._v(" "),t._m(54),t._m(55),t._v(" "),t._m(56),t._v(" "),t._m(57),t._v(" "),t._m(58),t._v(" "),n("p",[t._v("在阅读本部分内容的同时，你可能会好奇使用泛型类型参数是否会有运行时消耗。好消息是：Rust 实现了泛型，使得使用泛型类型参数的代码相比使用具体类型并没有任何速度上的损失。")]),t._v(" "),t._m(59),t._v(" "),n("p",[t._v("编译器所做的工作正好与示例 10-5 中我们创建泛型函数的步骤相反。编译器寻找所有泛型代码被调用的位置并使用泛型代码针对具体类型生成代码。")]),t._v(" "),t._m(60),t._v(" "),t._m(61),t._m(62),t._v(" "),t._m(63),t._v(" "),t._m(64),t._v(" "),t._m(65),n("p",[t._v("我们可以使用泛型来编写不重复的代码，而 Rust 将会为每一个实例编译其特定类型的代码。这意味着在使用泛型时没有运行时开销；当代码运行，它的执行效率就跟好像手写每个具体定义的重复代码一样。这个单态化过程正是 Rust 泛型在运行时极其高效的原因。")])])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"泛型数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型数据类型","aria-hidden":"true"}},[this._v("#")]),this._v(" 泛型数据类型")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"在函数定义中使用泛型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在函数定义中使用泛型","aria-hidden":"true"}},[this._v("#")]),this._v(" 在函数定义中使用泛型")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("回到 "),s("code",[this._v("largest")]),this._v(" 函数上，示例 10-4 中展示了两个提供了相同的寻找 slice 中最大值功能的函数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("largest_i32")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i32"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" i32 "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" largest "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("item "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" list"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("iter")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" item "),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" largest "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            largest "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" item"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    largest\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("largest_char")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("char"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" char "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" largest "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("item "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" list"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("iter")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" item "),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" largest "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            largest "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" item"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    largest\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" number_list "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("vec!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("34")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("50")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("25")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("100")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("65")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("largest_i32")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("number_list"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"The largest number is {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#    "),n("span",{attrs:{class:"token function"}},[t._v("assert_eq!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("100")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" char_list "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("vec!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token char string"}},[t._v("'y'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token char string"}},[t._v("'m'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token char string"}},[t._v("'a'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token char string"}},[t._v("'q'")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("largest_char")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("char_list"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"The largest char is {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n#    "),n("span",{attrs:{class:"token function"}},[t._v("assert_eq!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token char string"}},[t._v("'y'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 10-4：两个只在名称和签名中类型有所不同的函数")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("largest_i32")]),t._v(" 函数是从示例 10-3 中提取的寻找 slice 中 "),n("code",[t._v("i32")]),t._v(" 最大值的函数。"),n("code",[t._v("largest_char")]),t._v(" 函数寻找 slice 中 "),n("code",[t._v("char")]),t._v(" 的最大值：这两个函数有着相同的代码，所以让我们在一个单独的函数中引入泛型参数来消除重复。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("为了参数化要定义的函数的签名中的类型，我们需要像给函数的值参数起名那样为这类型参数起一个名字。任何标识符都可以作为类型参数名。不过选择 "),s("code",[this._v("T")]),this._v(" 是因为 Rust 的习惯是让变量名尽量短，通常就只有一个字母，同时 Rust 类型命名规范是骆驼命名法（CamelCase）。"),s("code",[this._v("T")]),this._v(" 作为 “type” 的缩写是大部分 Rust 程序员的首选。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当需要在函数体中使用一个参数时，必须在函数签名中声明这个参数以便编译器能知道函数体中这个名称的意义。同理，当在函数签名中使用一个类型参数时，必须在使用它之前就声明它。为了定义泛型版本的 "),s("code",[this._v("largest")]),this._v(" 函数，类型参数声明位于函数名称与参数列表中间的尖括号 "),s("code",[this._v("<>")]),this._v(" 中，像这样：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("fn largest<T>(list: &[T]) -> T {\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这可以理解为：函数 "),n("code",[t._v("largest")]),t._v(" 有泛型类型 "),n("code",[t._v("T")]),t._v("。它有一个参数 "),n("code",[t._v("list")]),t._v("，它的类型是一个 "),n("code",[t._v("T")]),t._v(" 值的 slice。"),n("code",[t._v("largest")]),t._v(" 函数将会返回一个与 "),n("code",[t._v("T")]),t._v(" 相同类型的值。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("示例 10-5 展示一个在签名中使用了泛型的统一的 "),n("code",[t._v("largest")]),t._v(" 函数定义。该示例也向我们展示了如何对 "),n("code",[t._v("i32")]),t._v(" 值的 slice 或 "),n("code",[t._v("char")]),t._v(" 值的 slice 调用 "),n("code",[t._v("largest")]),t._v(" 函数。注意这些代码还不能编译，不过本章稍后部分会修复错误。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore,does_not_compile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("fn largest<T>(list: &[T]) -> T {\n    let mut largest = list[0];\n\n    for &item in list.iter() {\n        if item > largest {\n            largest = item;\n        }\n    }\n\n    largest\n}\n\nfn main() {\n    let number_list = vec![34, 50, 25, 100, 65];\n\n    let result = largest(&number_list);\n    println!(\"The largest number is {}\", result);\n\n    let char_list = vec!['y', 'm', 'a', 'q'];\n\n    let result = largest(&char_list);\n    println!(\"The largest char is {}\", result);\n}\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 10-5：一个还不能编译的使用泛型参数的 "),s("code",[this._v("largest")]),this._v(" 函数定义")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("error[E0369]: binary operation `>` cannot be applied to type `T`\n --\x3e src/main.rs:5:12\n  |\n5 |         if item > largest {\n  |            ^^^^^^^^^^^^^^\n  |\n  = note: an implementation of `std::cmp::PartialOrd` might be missing for `T`\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("注释中提到了 "),n("code",[t._v("std::cmp::PartialOrd")]),t._v("，这是一个 "),n("em",[t._v("trait")]),t._v("。下一部分会讲到 trait。不过简单来说，这个错误表明 "),n("code",[t._v("largest")]),t._v(" 的函数体不能适用于 "),n("code",[t._v("T")]),t._v(" 的所有可能的类型。因为在函数体需要比较 "),n("code",[t._v("T")]),t._v(" 类型的值，不过它只能用于我们知道如何排序的类型。为了开启比较功能，标准库中定义的 "),n("code",[t._v("std::cmp::PartialOrd")]),t._v(" trait 可以实现类型的比较功能（查看附录 C 获取该 trait 的更多信息）。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("标准库中定义的 "),s("code",[this._v("std::cmp::PartialOrd")]),this._v(" trait 可以实现类型的比较功能。在 “trait bound” 部分会讲解如何指定泛型实现特定的 trait，不过让我们先探索其他使用泛型参数的方法。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"结构体定义中的泛型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结构体定义中的泛型","aria-hidden":"true"}},[this._v("#")]),this._v(" 结构体定义中的泛型")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("同样也可以使用 "),n("code",[t._v("<>")]),t._v(" 语法来定义拥有一个或多个泛型参数类型字段的结构体。示例 10-6 展示了如何定义和使用一个可以存放任何类型的 "),n("code",[t._v("x")]),t._v(" 和 "),n("code",[t._v("y")]),t._v(" 坐标值的结构体 "),n("code",[t._v("Point")]),t._v("：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Point"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" integer "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("5")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("10")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" float "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1.0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("4.0")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("span",{staticClass:"caption"},[t._v("示例 10-6："),n("code",[t._v("Point")]),t._v(" 结构体存放了两个 "),n("code",[t._v("T")]),t._v(" 类型的值 "),n("code",[t._v("x")]),t._v(" 和 "),n("code",[t._v("y")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("注意 "),n("code",[t._v("Point")]),t._v(" 的定义中只使用了一个泛型类型，这个定义表明结构体 "),n("code",[t._v("Point")]),t._v(" 对于一些类型 "),n("code",[t._v("T")]),t._v(" 是泛型的，而且字段 "),n("code",[t._v("x")]),t._v(" 和 "),n("code",[t._v("y")]),t._v(" "),n("strong",[t._v("都是")]),t._v(" 相同类型的，无论它具体是何类型。如果尝试创建一个有不同类型值的 "),n("code",[t._v("Point")]),t._v(" 的实例，像示例 10-7 中的代码就不能编译：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-rust,ignore,does_not_compile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("struct Point<T> {\n    x: T,\n    y: T,\n}\n\nfn main() {\n    let wont_work = Point { x: 5, y: 4.0 };\n}\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 10-7：字段 "),s("code",[this._v("x")]),this._v(" 和 "),s("code",[this._v("y")]),this._v(" 必须是相同类型，因为他们都有相同的泛型类型 "),s("code",[this._v("T")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("在这个例子中，当把整型值 5 赋值给 "),n("code",[t._v("x")]),t._v(" 时，就告诉了编译器这个 "),n("code",[t._v("Point<T>")]),t._v(" 实例中的泛型 "),n("code",[t._v("T")]),t._v(" 是整型的。接着指定 "),n("code",[t._v("y")]),t._v(" 为 4.0，它被定义为与 "),n("code",[t._v("x")]),t._v(" 相同类型，就会得到一个像这样的类型不匹配错误：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("error[E0308]: mismatched types\n --\x3e src/main.rs:7:38\n  |\n7 |     let wont_work = Point { x: 5, y: 4.0 };\n  |                                      ^^^ expected integral variable, found\nfloating-point variable\n  |\n  = note: expected type `{integer}`\n             found type `{float}`\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("如果想要定义一个 "),n("code",[t._v("x")]),t._v(" 和 "),n("code",[t._v("y")]),t._v(" 可以有不同类型且仍然是泛型的 "),n("code",[t._v("Point")]),t._v(" 结构体，我们可以使用多个泛型类型参数。在示例 10-8 中，我们修改 "),n("code",[t._v("Point")]),t._v(" 的定义为拥有两个泛型类型 "),n("code",[t._v("T")]),t._v(" 和 "),n("code",[t._v("U")]),t._v("。其中字段 "),n("code",[t._v("x")]),t._v(" 是 "),n("code",[t._v("T")]),t._v(" 类型的，而字段 "),n("code",[t._v("y")]),t._v(" 是 "),n("code",[t._v("U")]),t._v(" 类型的：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Point"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" U"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" U"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" both_integer "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("5")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("10")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" both_float "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1.0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("4.0")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" integer_and_float "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("5")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("4.0")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 10-8：使用两个泛型的 "),s("code",[this._v("Point")]),this._v("，这样 "),s("code",[this._v("x")]),this._v(" 和 "),s("code",[this._v("y")]),this._v(" 可能是不同类型")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在所有这些 "),s("code",[this._v("Point")]),this._v(" 实例都是被允许的了！你可以在定义中使用任意多的泛型类型参数，不过太多的话代码将难以阅读和理解。当你的代码中需要许多泛型类型时，它可能表明你的代码需要重组为更小的部分。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"枚举定义中的泛型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#枚举定义中的泛型","aria-hidden":"true"}},[this._v("#")]),this._v(" 枚举定义中的泛型")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("类似于结构体，枚举也可以在其成员中存放泛型数据类型。第六章我们使用过了标准库提供的 "),s("code",[this._v("Option<T>")]),this._v(" 枚举，让我们再看看：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Option"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    None"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("现在这个定义看起来就更容易理解了。如你所见 "),n("code",[t._v("Option<T>")]),t._v(" 是一个拥有泛型 "),n("code",[t._v("T")]),t._v(" 的枚举，它有两个成员："),n("code",[t._v("Some")]),t._v("，它存放了一个类型 "),n("code",[t._v("T")]),t._v(" 的值，和不存在任何值的"),n("code",[t._v("None")]),t._v("。通过 "),n("code",[t._v("Option<T>")]),t._v(" 枚举可以表达有一个可能的值的抽象概念，同时因为 "),n("code",[t._v("Option<T>")]),t._v(" 是泛型的，无论这个可能的值是什么类型都可以使用这个抽象。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("枚举也可以拥有多个泛型类型。第九章使用过的 "),s("code",[this._v("Result")]),this._v(" 枚举定义就是一个这样的例子：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Result"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" E"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("Ok")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("Err")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("E"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("Result")]),t._v(" 枚举有两个泛型类型，"),n("code",[t._v("T")]),t._v(" 和 "),n("code",[t._v("E")]),t._v("。"),n("code",[t._v("Result")]),t._v(" 有两个成员："),n("code",[t._v("Ok")]),t._v("，它存放一个类型 "),n("code",[t._v("T")]),t._v(" 的值，而 "),n("code",[t._v("Err")]),t._v(" 则存放一个类型 "),n("code",[t._v("E")]),t._v(" 的值。这个定义使得 "),n("code",[t._v("Result")]),t._v(" 枚举能很方便的表达任何可能成功（返回 "),n("code",[t._v("T")]),t._v(" 类型的值）也可能失败（返回 "),n("code",[t._v("E")]),t._v(" 类型的值）的操作。回忆一下示例 9-2 中打开一个文件的场景：当文件被成功打开 "),n("code",[t._v("T")]),t._v(" 被放入了 "),n("code",[t._v("std::fs::File")]),t._v(" 类型而当打开文件出现问题时 "),n("code",[t._v("E")]),t._v(" 被放入了 "),n("code",[t._v("std::io::Error")]),t._v(" 类型。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"方法定义中的泛型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法定义中的泛型","aria-hidden":"true"}},[this._v("#")]),this._v(" 方法定义中的泛型")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以像第五章介绍的那样来为其定义中带有泛型的结构体或枚举实现方法。示例 10-9 中展示了示例 10-6 中定义的结构体 "),s("code",[this._v("Point<T>")]),this._v("，和在其上实现的名为 "),s("code",[this._v("x")]),this._v(" 的方法。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Point"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" Point"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("x")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("T "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("5")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("10")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"p.x = {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("x")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("span",{staticClass:"caption"},[t._v("示例 10-9：在 "),n("code",[t._v("Point<T>")]),t._v(" 结构体上实现方法 "),n("code",[t._v("x")]),t._v("，它返回 "),n("code",[t._v("T")]),t._v(" 类型的字段 "),n("code",[t._v("x")]),t._v(" 的引用")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里在 "),s("code",[this._v("Point<T>")]),this._v(" 上定义了一个叫做 "),s("code",[this._v("x")]),this._v(" 的方法来返回字段 "),s("code",[this._v("x")]),this._v(" 中数据的引用：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("注意必须在 "),n("code",[t._v("impl")]),t._v(" 后面声明 "),n("code",[t._v("T")]),t._v("，这样就可以在 "),n("code",[t._v("Point<T>")]),t._v(" 上实现的方法中使用它了。在 "),n("code",[t._v("impl")]),t._v(" 之后声明泛型 "),n("code",[t._v("T")]),t._v(" ，这样 Rust 就知道 "),n("code",[t._v("Point")]),t._v(" 的尖括号中的类型是泛型而不是具体类型。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("例如，可以选择为 "),n("code",[t._v("Point<f32>")]),t._v(" 实例实现方法，而不是为泛型 "),n("code",[t._v("Point")]),t._v(" 实例。示例 10-10 展示了一个没有在 "),n("code",[t._v("impl")]),t._v(" 之后（的尖括号）声明泛型的例子，这里使用了一个具体类型，"),n("code",[t._v("f32")]),t._v("：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[t._v("# "),n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Point"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n#     x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n#     y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n# "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#\n"),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Point"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("f32"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("distance_from_origin")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("&")]),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" f32 "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("powi")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("powi")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("sqrt")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 10-10：构建一个只用于拥有泛型参数 "),s("code",[this._v("T")]),this._v(" 的结构体的具体类型的 "),s("code",[this._v("impl")]),this._v(" 块")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这段代码意味着 "),n("code",[t._v("Point<f32>")]),t._v(" 类型会有一个方法 "),n("code",[t._v("distance_from_origin")]),t._v("，而其他 "),n("code",[t._v("T")]),t._v(" 不是 "),n("code",[t._v("f32")]),t._v(" 类型的 "),n("code",[t._v("Point<T>")]),t._v(" 实例则没有定义此方法。这个方法计算点实例与坐标 (0.0, 0.0) 之间的距离，并使用了只能用于浮点型的数学运算符。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("结构体定义中的泛型类型参数并不总是与结构体方法签名中使用的泛型是同一类型。示例 10-11 中在示例 10-8 中的结构体 "),n("code",[t._v("Point<T, U>")]),t._v(" 上定义了一个方法 "),n("code",[t._v("mixup")]),t._v("。这个方法获取另一个 "),n("code",[t._v("Point")]),t._v(" 作为参数，而它可能与调用 "),n("code",[t._v("mixup")]),t._v(" 的 "),n("code",[t._v("self")]),t._v(" 是不同的 "),n("code",[t._v("Point")]),t._v(" 类型。这个方法用 "),n("code",[t._v("self")]),t._v(" 的 "),n("code",[t._v("Point")]),t._v(" 类型的 "),n("code",[t._v("x")]),t._v(" 值（类型 "),n("code",[t._v("T")]),t._v("）和参数的 "),n("code",[t._v("Point")]),t._v(" 类型的 "),n("code",[t._v("y")]),t._v(" 值（类型 "),n("code",[t._v("W")]),t._v("）来创建一个新 "),n("code",[t._v("Point")]),t._v(" 类型的实例：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Point"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" U"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" U"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("impl")]),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" U"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" Point"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" U"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" mixup"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("V"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" W"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" other"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Point"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("V"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" W"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Point"),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" W"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("self")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" other"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p1 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("5")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("10.4")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p2 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Point "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"Hello"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token char string"}},[t._v("'c'")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p3 "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" p1"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("mixup")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p2"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token function"}},[t._v("println!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"p3.x = {}, p3.y = {}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p3"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p3"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"caption"},[this._v("示例 10-11：方法使用了与结构体定义中不同类型的泛型")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("在 "),n("code",[t._v("main")]),t._v(" 函数中，定义了一个有 "),n("code",[t._v("i32")]),t._v(" 类型的 "),n("code",[t._v("x")]),t._v("（其值为 "),n("code",[t._v("5")]),t._v("）和 "),n("code",[t._v("f64")]),t._v(" 的 "),n("code",[t._v("y")]),t._v("（其值为 "),n("code",[t._v("10.4")]),t._v("）的 "),n("code",[t._v("Point")]),t._v("。"),n("code",[t._v("p2")]),t._v(" 则是一个有着字符串 slice 类型的 "),n("code",[t._v("x")]),t._v("（其值为 "),n("code",[t._v('"Hello"')]),t._v("）和 "),n("code",[t._v("char")]),t._v(" 类型的 "),n("code",[t._v("y")]),t._v("（其值为"),n("code",[t._v("c")]),t._v("）的 "),n("code",[t._v("Point")]),t._v("。在 "),n("code",[t._v("p1")]),t._v(" 上以 "),n("code",[t._v("p2")]),t._v(" 作为参数调用 "),n("code",[t._v("mixup")]),t._v(" 会返回一个 "),n("code",[t._v("p3")]),t._v("，它会有一个 "),n("code",[t._v("i32")]),t._v(" 类型的 "),n("code",[t._v("x")]),t._v("，因为 "),n("code",[t._v("x")]),t._v(" 来自 "),n("code",[t._v("p1")]),t._v("，并拥有一个 "),n("code",[t._v("char")]),t._v(" 类型的 "),n("code",[t._v("y")]),t._v("，因为 "),n("code",[t._v("y")]),t._v(" 来自 "),n("code",[t._v("p2")]),t._v("。"),n("code",[t._v("println!")]),t._v(" 会打印出 "),n("code",[t._v("p3.x = 5, p3.y = c")]),t._v("。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这个例子的目的是展示一些泛型通过 "),n("code",[t._v("impl")]),t._v(" 声明而另一些通过方法定义声明的情况。这里泛型参数 "),n("code",[t._v("T")]),t._v(" 和 "),n("code",[t._v("U")]),t._v(" 声明于 "),n("code",[t._v("impl")]),t._v(" 之后，因为他们与结构体定义相对应。而泛型参数 "),n("code",[t._v("V")]),t._v(" 和 "),n("code",[t._v("W")]),t._v(" 声明于 "),n("code",[t._v("fn mixup")]),t._v(" 之后，因为他们只是相对于方法本身的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"泛型代码的性能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型代码的性能","aria-hidden":"true"}},[this._v("#")]),this._v(" 泛型代码的性能")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Rust 通过在编译时进行泛型代码的 "),s("strong",[this._v("单态化")]),this._v("（"),s("em",[this._v("monomorphization")]),this._v("）来保证效率。单态化是一个通过填充编译时使用的具体类型，将通用代码转换为特定代码的过程。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("让我们看看一个使用标准库中 "),s("code",[this._v("Option")]),this._v(" 枚举的例子：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" integer "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("5")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" float "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("5.0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("当 Rust 编译这些代码的时候，它会进行单态化。编译器会读取传递给 "),n("code",[t._v("Option")]),t._v(" 的值并发现有两种 "),n("code",[t._v("Option<T>")]),t._v("：一个对应 "),n("code",[t._v("i32")]),t._v(" 另一个对应 "),n("code",[t._v("f64")]),t._v("。为此，它会将泛型定义 "),n("code",[t._v("Option<T>")]),t._v(" 展开为 "),n("code",[t._v("Option_i32")]),t._v(" 和 "),n("code",[t._v("Option_f64")]),t._v("，接着将泛型定义替换为这两个具体的定义。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("编译器生成的单态化版本的代码看起来像这样，并包含将泛型 "),s("code",[this._v("Option")]),this._v(" 替换为编译器创建的具体定义后的用例代码：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("span",{staticClass:"filename"},[this._v("文件名: src/main.rs")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Option_i32 "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    None"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Option_f64 "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f64"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    None"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" integer "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Option_i32"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("5")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" float "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Option_f64"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token function"}},[t._v("Some")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("5.0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])}],!1,null,null,null);e.options.__file="ch10-01-syntax.md";s.default=e.exports}}]);